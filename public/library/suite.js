/*
@license

dhtmlxSuite v.6.5.6 Professional

This software is covered by DHTMLX Commercial License.
Usage without proper license is prohibited.

(c) XB Software.

*/
if (window.dhx){ window.dhx_legacy = dhx; delete window.dhx; }(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["dhx"] = factory();
	else
		root["dhx"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/codebase/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "../node_modules/domvm/dist/dev/domvm.dev.js":
/*!***************************************************!*\
  !*** ../node_modules/domvm/dist/dev/domvm.dev.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
* Copyright (c) 2017, Leon Sorokin
* All rights reserved. (MIT Licensed)
*
* domvm.js (DOM ViewModel)
* A thin, fast, dependency-free vdom view layer
* @preserve https://github.com/leeoniya/domvm (v3.2.6, dev build)
*/

(function (global, factory) {
	 true ? module.exports = factory() :
	undefined;
}(this, (function () { 'use strict';

// NOTE: if adding a new *VNode* type, make it < COMMENT and renumber rest.
// There are some places that test <= COMMENT to assert if node is a VNode

// VNode types
var ELEMENT	= 1;
var TEXT		= 2;
var COMMENT	= 3;

// placeholder types
var VVIEW		= 4;
var VMODEL		= 5;

var ENV_DOM = typeof window !== "undefined";
var win = ENV_DOM ? window : {};
var rAF = win.requestAnimationFrame;

var emptyObj = {};

function noop() {}

var isArr = Array.isArray;

function isSet(val) {
	return val != null;
}

function isPlainObj(val) {
	return val != null && val.constructor === Object;		//  && typeof val === "object"
}

function insertArr(targ, arr, pos, rem) {
	targ.splice.apply(targ, [pos, rem].concat(arr));
}

function isVal(val) {
	var t = typeof val;
	return t === "string" || t === "number";
}

function isFunc(val) {
	return typeof val === "function";
}

function isProm(val) {
	return typeof val === "object" && isFunc(val.then);
}



function assignObj(targ) {
	var args = arguments;

	for (var i = 1; i < args.length; i++)
		{ for (var k in args[i])
			{ targ[k] = args[i][k]; } }

	return targ;
}

// export const defProp = Object.defineProperty;

function deepSet(targ, path, val) {
	var seg;

	while (seg = path.shift()) {
		if (path.length === 0)
			{ targ[seg] = val; }
		else
			{ targ[seg] = targ = targ[seg] || {}; }
	}
}

/*
export function deepUnset(targ, path) {
	var seg;

	while (seg = path.shift()) {
		if (path.length === 0)
			targ[seg] = val;
		else
			targ[seg] = targ = targ[seg] || {};
	}
}
*/

function sliceArgs(args, offs) {
	var arr = [];
	for (var i = offs; i < args.length; i++)
		{ arr.push(args[i]); }
	return arr;
}

function cmpObj(a, b) {
	for (var i in a)
		{ if (a[i] !== b[i])
			{ return false; } }

	return true;
}

function cmpArr(a, b) {
	var alen = a.length;

	if (b.length !== alen)
		{ return false; }

	for (var i = 0; i < alen; i++)
		{ if (a[i] !== b[i])
			{ return false; } }

	return true;
}

// https://github.com/darsain/raft
// rAF throttler, aggregates multiple repeated redraw calls within single animframe
function raft(fn) {
	if (!rAF)
		{ return fn; }

	var id, ctx, args;

	function call() {
		id = 0;
		fn.apply(ctx, args);
	}

	return function() {
		ctx = this;
		args = arguments;
		if (!id) { id = rAF(call); }
	};
}

function curry(fn, args, ctx) {
	return function() {
		return fn.apply(ctx, args);
	};
}

/*
export function prop(val, cb, ctx, args) {
	return function(newVal, execCb) {
		if (newVal !== undefined && newVal !== val) {
			val = newVal;
			execCb !== false && isFunc(cb) && cb.apply(ctx, args);
		}

		return val;
	};
}
*/

/*
// adapted from https://github.com/Olical/binary-search
export function binaryKeySearch(list, item) {
    var min = 0;
    var max = list.length - 1;
    var guess;

	var bitwise = (max <= 2147483647) ? true : false;
	if (bitwise) {
		while (min <= max) {
			guess = (min + max) >> 1;
			if (list[guess].key === item) { return guess; }
			else {
				if (list[guess].key < item) { min = guess + 1; }
				else { max = guess - 1; }
			}
		}
	} else {
		while (min <= max) {
			guess = Math.floor((min + max) / 2);
			if (list[guess].key === item) { return guess; }
			else {
				if (list[guess].key < item) { min = guess + 1; }
				else { max = guess - 1; }
			}
		}
	}

    return -1;
}
*/

// https://en.wikipedia.org/wiki/Longest_increasing_subsequence
// impl borrowed from https://github.com/ivijs/ivi
function longestIncreasingSubsequence(a) {
	var p = a.slice();
	var result = [];
	result.push(0);
	var u;
	var v;

	for (var i = 0, il = a.length; i < il; ++i) {
		var j = result[result.length - 1];
		if (a[j] < a[i]) {
			p[i] = j;
			result.push(i);
			continue;
		}

		u = 0;
		v = result.length - 1;

		while (u < v) {
			var c = ((u + v) / 2) | 0;
			if (a[result[c]] < a[i]) {
				u = c + 1;
			} else {
				v = c;
			}
		}

		if (a[i] < a[result[u]]) {
			if (u > 0) {
				p[i] = result[u - 1];
			}
			result[u] = i;
		}
	}

	u = result.length;
	v = result[u - 1];

	while (u-- > 0) {
		result[u] = v;
		v = p[v];
	}

	return result;
}

// based on https://github.com/Olical/binary-search
function binaryFindLarger(item, list) {
	var min = 0;
	var max = list.length - 1;
	var guess;

	var bitwise = (max <= 2147483647) ? true : false;
	if (bitwise) {
		while (min <= max) {
			guess = (min + max) >> 1;
			if (list[guess] === item) { return guess; }
			else {
				if (list[guess] < item) { min = guess + 1; }
				else { max = guess - 1; }
			}
		}
	} else {
		while (min <= max) {
			guess = Math.floor((min + max) / 2);
			if (list[guess] === item) { return guess; }
			else {
				if (list[guess] < item) { min = guess + 1; }
				else { max = guess - 1; }
			}
		}
	}

	return (min == list.length) ? null : min;

//	return -1;
}

function isEvProp(name) {
	return name[0] === "o" && name[1] === "n";
}

function isSplProp(name) {
	return name[0] === "_";
}

function isStyleProp(name) {
	return name === "style";
}

function repaint(node) {
	node && node.el && node.el.offsetHeight;
}

function isHydrated(vm) {
	return vm.node != null && vm.node.el != null;
}

// tests interactive props where real val should be compared
function isDynProp(tag, attr) {
//	switch (tag) {
//		case "input":
//		case "textarea":
//		case "select":
//		case "option":
			switch (attr) {
				case "value":
				case "checked":
				case "selected":
//				case "selectedIndex":
					return true;
			}
//	}

	return false;
}

function getVm(n) {
	n = n || emptyObj;
	while (n.vm == null && n.parent)
		{ n = n.parent; }
	return n.vm;
}

function VNode() {}

var VNodeProto = VNode.prototype = {
	constructor: VNode,

	type:	null,

	vm:		null,

	// all this stuff can just live in attrs (as defined) just have getters here for it
	key:	null,
	ref:	null,
	data:	null,
	hooks:	null,
	ns:		null,

	el:		null,

	tag:	null,
	attrs:	null,
	body:	null,

	flags:	0,

	_class:	null,
	_diff:	null,

	// pending removal on promise resolution
	_dead:	false,
	// part of longest increasing subsequence?
	_lis:	false,

	idx:	null,
	parent:	null,

	/*
	// break out into optional fluent module
	key:	function(val) { this.key	= val; return this; },
	ref:	function(val) { this.ref	= val; return this; },		// deep refs
	data:	function(val) { this.data	= val; return this; },
	hooks:	function(val) { this.hooks	= val; return this; },		// h("div").hooks()
	html:	function(val) { this.html	= true; return this.body(val); },

	body:	function(val) { this.body	= val; return this; },
	*/
};

function defineText(body) {
	var node = new VNode;
	node.type = TEXT;
	node.body = body;
	return node;
}

var isStream = function() { return false };

var streamVal = noop;
var subStream = noop;
var unsubStream = noop;

function streamCfg(cfg) {
	isStream	= cfg.is;
	streamVal	= cfg.val;
	subStream	= cfg.sub;
	unsubStream	= cfg.unsub;
}

// creates a one-shot self-ending stream that redraws target vm
// TODO: if it's already registered by any parent vm, then ignore to avoid simultaneous parent & child refresh
function hookStream(s, vm) {
	var redrawStream = subStream(s, function (val) {
		// this "if" ignores the initial firing during subscription (there's no redrawable vm yet)
		if (redrawStream) {
			// if vm fully is formed (or mounted vm.node.el?)
			if (vm.node != null)
				{ vm.redraw(); }
			unsubStream(redrawStream);
		}
	});

	return streamVal(s);
}

function hookStream2(s, vm) {
	var redrawStream = subStream(s, function (val) {
		// this "if" ignores the initial firing during subscription (there's no redrawable vm yet)
		if (redrawStream) {
			// if vm fully is formed (or mounted vm.node.el?)
			if (vm.node != null)
				{ vm.redraw(); }
		}
	});

	return redrawStream;
}

var tagCache = {};

var RE_ATTRS = /\[(\w+)(?:=(\w+))?\]/g;

function cssTag(raw) {
	{
		var cached = tagCache[raw];

		if (cached == null) {
			var tag, id, cls, attr;

			tagCache[raw] = cached = {
				tag:	(tag	= raw.match( /^[-\w]+/))		?	tag[0]						: "div",
				id:		(id		= raw.match( /#([-\w]+)/))		? 	id[1]						: null,
				class:	(cls	= raw.match(/\.([-\w.]+)/))		?	cls[1].replace(/\./g, " ")	: null,
				attrs:	null,
			};

			while (attr = RE_ATTRS.exec(raw)) {
				if (cached.attrs == null)
					{ cached.attrs = {}; }
				cached.attrs[attr[1]] = attr[2] || "";
			}
		}

		return cached;
	}
}

var DEVMODE = {
	syncRedraw: false,

	warnings: true,

	verbose: true,

	mutations: true,

	DATA_REPLACED: function(vm, oldData, newData) {
		if (isFunc(vm.view) && vm.view.length > 1) {
			var msg = "A view's data was replaced. The data originally passed to the view closure during init is now stale. You may want to rely only on the data passed to render() or vm.data.";
			return [msg, vm, oldData, newData];
		}
	},

	UNKEYED_INPUT: function(vnode) {
		return ["Unkeyed <input> detected. Consider adding a name, id, _key, or _ref attr to avoid accidental DOM recycling between different <input> types.", vnode];
	},

	UNMOUNTED_REDRAW: function(vm) {
		return ["Invoking redraw() of an unmounted (sub)view may result in errors.", vm];
	},

	INLINE_HANDLER: function(vnode, oval, nval) {
		return ["Anonymous event handlers get re-bound on each redraw, consider defining them outside of templates for better reuse.", vnode, oval, nval];
	},

	MISMATCHED_HANDLER: function(vnode, oval, nval) {
		return ["Patching of different event handler styles is not fully supported for performance reasons. Ensure that handlers are defined using the same style.", vnode, oval, nval];
	},

	SVG_WRONG_FACTORY: function(vnode) {
		return ["<svg> defined using domvm.defineElement. Use domvm.defineSvgElement for <svg> & child nodes.", vnode];
	},

	FOREIGN_ELEMENT: function(el) {
		return ["domvm stumbled upon an element in its DOM that it didn't create, which may be problematic. You can inject external elements into the vtree using domvm.injectElement.", el];
	},

	REUSED_ATTRS: function(vnode) {
		return ["Attrs objects may only be reused if they are truly static, as a perf optimization. Mutating & reusing them will have no effect on the DOM due to 0 diff.", vnode];
	},

	ADJACENT_TEXT: function(vnode, text1, text2) {
		return ["Adjacent text nodes will be merged. Consider concatentating them yourself in the template for improved perf.", vnode, text1, text2];
	},

	ARRAY_FLATTENED: function(vnode, array) {
		return ["Arrays within templates will be flattened. When they are leading or trailing, it's easy and more performant to just .concat() them in the template.", vnode, array];
	},

	ALREADY_HYDRATED: function(vm) {
		return ["A child view failed to mount because it was already hydrated. Make sure not to invoke vm.redraw() or vm.update() on unmounted views.", vm];
	},

	ATTACH_IMPLICIT_TBODY: function(vnode, vchild) {
		return ["<table><tr> was detected in the vtree, but the DOM will be <table><tbody><tr> after HTML's implicit parsing. You should create the <tbody> vnode explicitly to avoid SSR/attach() failures.", vnode, vchild];
	}
};

function devNotify(key, args) {
	if (DEVMODE.warnings && isFunc(DEVMODE[key])) {
		var msgArgs = DEVMODE[key].apply(null, args);

		if (msgArgs) {
			msgArgs[0] = key + ": " + (DEVMODE.verbose ? msgArgs[0] : "");
			console.warn.apply(console, msgArgs);
		}
	}
}

// (de)optimization flags

// forces slow bottom-up removeChild to fire deep willRemove/willUnmount hooks,
var DEEP_REMOVE = 1;
// prevents inserting/removing/reordering of children
var FIXED_BODY = 2;
// enables fast keyed lookup of children via binary search, expects homogeneous keyed body
var KEYED_LIST = 4;
// indicates an vnode match/diff/recycler function for body
var LAZY_LIST = 8;

function initElementNode(tag, attrs, body, flags) {
	var node = new VNode;

	node.type = ELEMENT;

	if (isSet(flags))
		{ node.flags = flags; }

	node.attrs = attrs;

	var parsed = cssTag(tag);

	node.tag = parsed.tag;

	// meh, weak assertion, will fail for id=0, etc.
	if (parsed.id || parsed.class || parsed.attrs) {
		var p = node.attrs || {};

		if (parsed.id && !isSet(p.id))
			{ p.id = parsed.id; }

		if (parsed.class) {
			node._class = parsed.class;		// static class
			p.class = parsed.class + (isSet(p.class) ? (" " + p.class) : "");
		}
		if (parsed.attrs) {
			for (var key in parsed.attrs)
				{ if (!isSet(p[key]))
					{ p[key] = parsed.attrs[key]; } }
		}

//		if (node.attrs !== p)
			node.attrs = p;
	}

	var mergedAttrs = node.attrs;

	if (isSet(mergedAttrs)) {
		if (isSet(mergedAttrs._key))
			{ node.key = mergedAttrs._key; }

		if (isSet(mergedAttrs._ref))
			{ node.ref = mergedAttrs._ref; }

		if (isSet(mergedAttrs._hooks))
			{ node.hooks = mergedAttrs._hooks; }

		if (isSet(mergedAttrs._data))
			{ node.data = mergedAttrs._data; }

		if (isSet(mergedAttrs._flags))
			{ node.flags = mergedAttrs._flags; }

		if (!isSet(node.key)) {
			if (isSet(node.ref))
				{ node.key = node.ref; }
			else if (isSet(mergedAttrs.id))
				{ node.key = mergedAttrs.id; }
			else if (isSet(mergedAttrs.name))
				{ node.key = mergedAttrs.name + (mergedAttrs.type === "radio" || mergedAttrs.type === "checkbox" ? mergedAttrs.value : ""); }
		}
	}

	if (body != null)
		{ node.body = body; }

	{
		if (node.tag === "svg") {
			setTimeout(function() {
				node.ns == null && devNotify("SVG_WRONG_FACTORY", [node]);
			}, 16);
		}
		// todo: attrs.contenteditable === "true"?
		else if (/^(?:input|textarea|select|datalist|keygen|output)$/.test(node.tag) && node.key == null)
			{ devNotify("UNKEYED_INPUT", [node]); }
	}

	return node;
}

function setRef(vm, name, node) {
	var path = ["refs"].concat(name.split("."));
	deepSet(vm, path, node);
}

function setDeepRemove(node) {
	while (node = node.parent)
		{ node.flags |= DEEP_REMOVE; }
}

// vnew, vold
function preProc(vnew, parent, idx, ownVm) {
	if (vnew.type === VMODEL || vnew.type === VVIEW)
		{ return; }

	vnew.parent = parent;
	vnew.idx = idx;
	vnew.vm = ownVm;

	if (vnew.ref != null)
		{ setRef(getVm(vnew), vnew.ref, vnew); }

	var nh = vnew.hooks,
		vh = ownVm && ownVm.hooks;

	if (nh && (nh.willRemove || nh.didRemove) ||
		vh && (vh.willUnmount || vh.didUnmount))
		{ setDeepRemove(vnew); }

	if (isArr(vnew.body))
		{ preProcBody(vnew); }
	else {
		if (isStream(vnew.body))
			{ vnew.body = hookStream(vnew.body, getVm(vnew)); }
	}
}

function preProcBody(vnew) {
	var body = vnew.body;

	for (var i = 0; i < body.length; i++) {
		var node2 = body[i];

		// remove false/null/undefined
		if (node2 === false || node2 == null)
			{ body.splice(i--, 1); }
		// flatten arrays
		else if (isArr(node2)) {
			{
				if (i === 0 || i === body.length - 1)
					{ devNotify("ARRAY_FLATTENED", [vnew, node2]); }
			}
			insertArr(body, node2, i--, 1);
		}
		else {
			if (node2.type == null)
				{ body[i] = node2 = defineText(""+node2); }

			if (node2.type === TEXT) {
				// remove empty text nodes
				if (node2.body == null || node2.body === "")
					{ body.splice(i--, 1); }
				// merge with previous text node
				else if (i > 0 && body[i-1].type === TEXT) {
					{
						devNotify("ADJACENT_TEXT", [vnew, body[i-1].body, node2.body]);
					}
					body[i-1].body += node2.body;
					body.splice(i--, 1);
				}
				else
					{ preProc(node2, vnew, i, null); }
			}
			else
				{ preProc(node2, vnew, i, null); }
		}
	}
}

var unitlessProps = {
	animationIterationCount: true,
	boxFlex: true,
	boxFlexGroup: true,
	boxOrdinalGroup: true,
	columnCount: true,
	flex: true,
	flexGrow: true,
	flexPositive: true,
	flexShrink: true,
	flexNegative: true,
	flexOrder: true,
	gridRow: true,
	gridColumn: true,
	order: true,
	lineClamp: true,

	borderImageOutset: true,
	borderImageSlice: true,
	borderImageWidth: true,
	fontWeight: true,
	lineHeight: true,
	opacity: true,
	orphans: true,
	tabSize: true,
	widows: true,
	zIndex: true,
	zoom: true,

	fillOpacity: true,
	floodOpacity: true,
	stopOpacity: true,
	strokeDasharray: true,
	strokeDashoffset: true,
	strokeMiterlimit: true,
	strokeOpacity: true,
	strokeWidth: true
};

function autoPx(name, val) {
	{
		// typeof val === 'number' is faster but fails for numeric strings
		return !isNaN(val) && !unitlessProps[name] ? (val + "px") : val;
	}
}

// assumes if styles exist both are objects or both are strings
function patchStyle(n, o) {
	var ns =     (n.attrs || emptyObj).style;
	var os = o ? (o.attrs || emptyObj).style : null;

	// replace or remove in full
	if (ns == null || isVal(ns))
		{ n.el.style.cssText = ns; }
	else {
		for (var nn in ns) {
			var nv = ns[nn];

			{
				if (isStream(nv))
					{ nv = hookStream(nv, getVm(n)); }
			}

			if (os == null || nv != null && nv !== os[nn])
				{ n.el.style[nn] = autoPx(nn, nv); }
		}

		// clean old
		if (os) {
			for (var on in os) {
				if (ns[on] == null)
					{ n.el.style[on] = ""; }
			}
		}
	}
}

var didQueue = [];

function fireHook(hooks, name, o, n, immediate) {
	if (hooks != null) {
		var fn = o.hooks[name];

		if (fn) {
			if (name[0] === "d" && name[1] === "i" && name[2] === "d") {	// did*
				//	console.log(name + " should queue till repaint", o, n);
				immediate ? repaint(o.parent) && fn(o, n) : didQueue.push([fn, o, n]);
			}
			else {		// will*
				//	console.log(name + " may delay by promise", o, n);
				return fn(o, n);		// or pass  done() resolver
			}
		}
	}
}

function drainDidHooks(vm) {
	if (didQueue.length) {
		repaint(vm.node);

		var item;
		while (item = didQueue.shift())
			{ item[0](item[1], item[2]); }
	}
}

var doc = ENV_DOM ? document : null;

function closestVNode(el) {
	while (el._node == null)
		{ el = el.parentNode; }
	return el._node;
}

function createElement(tag, ns) {
	if (ns != null)
		{ return doc.createElementNS(ns, tag); }
	return doc.createElement(tag);
}

function createTextNode(body) {
	return doc.createTextNode(body);
}

function createComment(body) {
	return doc.createComment(body);
}

// ? removes if !recycled
function nextSib(sib) {
	return sib.nextSibling;
}

// ? removes if !recycled
function prevSib(sib) {
	return sib.previousSibling;
}

// TODO: this should collect all deep proms from all hooks and return Promise.all()
function deepNotifyRemove(node) {
	var vm = node.vm;

	var wuRes = vm != null && fireHook(vm.hooks, "willUnmount", vm, vm.data);

	var wrRes = fireHook(node.hooks, "willRemove", node);

	if ((node.flags & DEEP_REMOVE) === DEEP_REMOVE && isArr(node.body)) {
		for (var i = 0; i < node.body.length; i++)
			{ deepNotifyRemove(node.body[i]); }
	}

	return wuRes || wrRes;
}

function _removeChild(parEl, el, immediate) {
	var node = el._node, vm = node.vm;

	if (isArr(node.body)) {
		if ((node.flags & DEEP_REMOVE) === DEEP_REMOVE) {
			for (var i = 0; i < node.body.length; i++)
				{ _removeChild(el, node.body[i].el); }
		}
		else
			{ deepUnref(node); }
	}

	delete el._node;

	parEl.removeChild(el);

	fireHook(node.hooks, "didRemove", node, null, immediate);

	if (vm != null) {
		fireHook(vm.hooks, "didUnmount", vm, vm.data, immediate);
		vm.node = null;
	}
}

// todo: should delay parent unmount() by returning res prom?
function removeChild(parEl, el) {
	var node = el._node;

	// already marked for removal
	if (node._dead) { return; }

	var res = deepNotifyRemove(node);

	if (res != null && isProm(res)) {
		node._dead = true;
		res.then(curry(_removeChild, [parEl, el, true]));
	}
	else
		{ _removeChild(parEl, el); }
}

function deepUnref(node) {
	var obody = node.body;

	for (var i = 0; i < obody.length; i++) {
		var o2 = obody[i];
		delete o2.el._node;

		if (o2.vm != null)
			{ o2.vm.node = null; }

		if (isArr(o2.body))
			{ deepUnref(o2); }
	}
}

function clearChildren(parent) {
	var parEl = parent.el;

	if ((parent.flags & DEEP_REMOVE) === 0) {
		isArr(parent.body) && deepUnref(parent);
		parEl.textContent = null;
	}
	else {
		var el = parEl.firstChild;

		do {
			var next = nextSib(el);
			removeChild(parEl, el);
		} while (el = next);
	}
}

// todo: hooks
function insertBefore(parEl, el, refEl) {
	var node = el._node, inDom = el.parentNode != null;

	// el === refEl is asserted as a no-op insert called to fire hooks
	var vm = (el === refEl || !inDom) ? node.vm : null;

	if (vm != null)
		{ fireHook(vm.hooks, "willMount", vm, vm.data); }

	fireHook(node.hooks, inDom ? "willReinsert" : "willInsert", node);
	parEl.insertBefore(el, refEl);
	fireHook(node.hooks, inDom ? "didReinsert" : "didInsert", node);

	if (vm != null)
		{ fireHook(vm.hooks, "didMount", vm, vm.data); }
}

function insertAfter(parEl, el, refEl) {
	insertBefore(parEl, el, refEl ? nextSib(refEl) : null);
}

var onemit = {};

function emitCfg(cfg) {
	assignObj(onemit, cfg);
}

function emit(evName) {
	var targ = this,
		src = targ;

	var args = sliceArgs(arguments, 1).concat(src, src.data);

	do {
		var evs = targ.onemit;
		var fn = evs ? evs[evName] : null;

		if (fn) {
			fn.apply(targ, args);
			break;
		}
	} while (targ = targ.parent());

	if (onemit[evName])
		{ onemit[evName].apply(targ, args); }
}

var onevent = noop;

function config(newCfg) {
	onevent = newCfg.onevent || onevent;

	{
		if (newCfg.onemit)
			{ emitCfg(newCfg.onemit); }
	}

	{
		if (newCfg.stream)
			{ streamCfg(newCfg.stream); }
	}
}

function bindEv(el, type, fn) {
	el[type] = fn;
}

function exec(fn, args, e, node, vm) {
	var out = fn.apply(vm, args.concat([e, node, vm, vm.data]));

	// should these respect out === false?
	vm.onevent(e, node, vm, vm.data, args);
	onevent.call(null, e, node, vm, vm.data, args);

	if (out === false) {
		e.preventDefault();
		e.stopPropagation();
	}
}

function handle(e) {
	var node = closestVNode(e.target);
	var vm = getVm(node);

	var evDef = e.currentTarget._node.attrs["on" + e.type], fn, args;

	if (isArr(evDef)) {
		fn = evDef[0];
		args = evDef.slice(1);
		exec(fn, args, e, node, vm);
	}
	else {
		for (var sel in evDef) {
			if (e.target.matches(sel)) {
				var evDef2 = evDef[sel];

				if (isArr(evDef2)) {
					fn = evDef2[0];
					args = evDef2.slice(1);
				}
				else {
					fn = evDef2;
					args = [];
				}

				exec(fn, args, e, node, vm);
			}
		}
	}
}

function patchEvent(node, name, nval, oval) {
	if (nval === oval)
		{ return; }

	{
		if (isFunc(nval) && isFunc(oval) && oval.name == nval.name)
			{ devNotify("INLINE_HANDLER", [node, oval, nval]); }

		if (oval != null && nval != null &&
			(
				isArr(oval) != isArr(nval) ||
				isPlainObj(oval) != isPlainObj(nval) ||
				isFunc(oval) != isFunc(nval)
			)
		) { devNotify("MISMATCHED_HANDLER", [node, oval, nval]); }
	}

	var el = node.el;

	if (nval == null || isFunc(nval))
		{ bindEv(el, name, nval); }
	else if (oval == null)
		{ bindEv(el, name, handle); }
}

function remAttr(node, name, asProp) {
	if (name[0] === ".") {
		name = name.substr(1);
		asProp = true;
	}

	if (asProp)
		{ node.el[name] = ""; }
	else
		{ node.el.removeAttribute(name); }
}

// setAttr
// diff, ".", "on*", bool vals, skip _*, value/checked/selected selectedIndex
function setAttr(node, name, val, asProp, initial) {
	var el = node.el;

	if (val == null)
		{ !initial && remAttr(node, name, false); }		// will also removeAttr of style: null
	else if (node.ns != null)
		{ el.setAttribute(name, val); }
	else if (name === "class")
		{ el.className = val; }
	else if (name === "id" || typeof val === "boolean" || asProp)
		{ el[name] = val; }
	else if (name[0] === ".")
		{ el[name.substr(1)] = val; }
	else
		{ el.setAttribute(name, val); }
}

function patchAttrs(vnode, donor, initial) {
	var nattrs = vnode.attrs || emptyObj;
	var oattrs = donor.attrs || emptyObj;

	if (nattrs === oattrs) {
		{ devNotify("REUSED_ATTRS", [vnode]); }
	}
	else {
		for (var key in nattrs) {
			var nval = nattrs[key];
			var isDyn = isDynProp(vnode.tag, key);
			var oval = isDyn ? vnode.el[key] : oattrs[key];

			{
				if (isStream(nval))
					{ nattrs[key] = nval = hookStream(nval, getVm(vnode)); }
			}

			if (nval === oval) {}
			else if (isStyleProp(key))
				{ patchStyle(vnode, donor); }
			else if (isSplProp(key)) {}
			else if (isEvProp(key))
				{ patchEvent(vnode, key, nval, oval); }
			else
				{ setAttr(vnode, key, nval, isDyn, initial); }
		}

		// TODO: bench style.cssText = "" vs removeAttribute("style")
		for (var key in oattrs) {
			!(key in nattrs) &&
			!isSplProp(key) &&
			remAttr(vnode, key, isDynProp(vnode.tag, key) || isEvProp(key));
		}
	}
}

function createView(view, data, key, opts) {
	if (view.type === VVIEW) {
		data	= view.data;
		key		= view.key;
		opts	= view.opts;
		view	= view.view;
	}

	return new ViewModel(view, data, key, opts);
}

//import { XML_NS, XLINK_NS } from './defineSvgElement';
function hydrateBody(vnode) {
	for (var i = 0; i < vnode.body.length; i++) {
		var vnode2 = vnode.body[i];
		var type2 = vnode2.type;

		// ELEMENT,TEXT,COMMENT
		if (type2 <= COMMENT)
			{ insertBefore(vnode.el, hydrate(vnode2)); }		// vnode.el.appendChild(hydrate(vnode2))
		else if (type2 === VVIEW) {
			var vm = createView(vnode2.view, vnode2.data, vnode2.key, vnode2.opts)._redraw(vnode, i, false);		// todo: handle new data updates
			type2 = vm.node.type;
			insertBefore(vnode.el, hydrate(vm.node));
		}
		else if (type2 === VMODEL) {
			var vm = vnode2.vm;
			vm._redraw(vnode, i);					// , false
			type2 = vm.node.type;
			insertBefore(vnode.el, vm.node.el);		// , hydrate(vm.node)
		}
	}
}

//  TODO: DRY this out. reusing normal patch here negatively affects V8's JIT
function hydrate(vnode, withEl) {
	if (vnode.el == null) {
		if (vnode.type === ELEMENT) {
			vnode.el = withEl || createElement(vnode.tag, vnode.ns);

		//	if (vnode.tag === "svg")
		//		vnode.el.setAttributeNS(XML_NS, 'xmlns:xlink', XLINK_NS);

			if (vnode.attrs != null)
				{ patchAttrs(vnode, emptyObj, true); }

			if ((vnode.flags & LAZY_LIST) === LAZY_LIST)	// vnode.body instanceof LazyList
				{ vnode.body.body(vnode); }

			if (isArr(vnode.body))
				{ hydrateBody(vnode); }
			else if (vnode.body != null && vnode.body !== "")
				{ vnode.el.textContent = vnode.body; }
		}
		else if (vnode.type === TEXT)
			{ vnode.el = withEl || createTextNode(vnode.body); }
		else if (vnode.type === COMMENT)
			{ vnode.el = withEl || createComment(vnode.body); }
	}

	vnode.el._node = vnode;

	return vnode.el;
}

// prevent GCC from inlining some large funcs (which negatively affects Chrome's JIT)
//window.syncChildren = syncChildren;
window.lisMove = lisMove;

function nextNode(node, body) {
	return body[node.idx + 1];
}

function prevNode(node, body) {
	return body[node.idx - 1];
}

function parentNode(node) {
	return node.parent;
}

var BREAK = 1;
var BREAK_ALL = 2;

function syncDir(advSib, advNode, insert, sibName, nodeName, invSibName, invNodeName, invInsert) {
	return function(node, parEl, body, state, convTest, lis) {
		var sibNode, tmpSib;

		if (state[sibName] != null) {
			// skip dom elements not created by domvm
			if ((sibNode = state[sibName]._node) == null) {
				{ devNotify("FOREIGN_ELEMENT", [state[sibName]]); }

				state[sibName] = advSib(state[sibName]);
				return;
			}

			if (parentNode(sibNode) !== node) {
				tmpSib = advSib(state[sibName]);
				sibNode.vm != null ? sibNode.vm.unmount(true) : removeChild(parEl, state[sibName]);
				state[sibName] = tmpSib;
				return;
			}
		}

		if (state[nodeName] == convTest)
			{ return BREAK_ALL; }
		else if (state[nodeName].el == null) {
			insert(parEl, hydrate(state[nodeName]), state[sibName]);	// should lis be updated here?
			state[nodeName] = advNode(state[nodeName], body);		// also need to advance sib?
		}
		else if (state[nodeName].el === state[sibName]) {
			state[nodeName] = advNode(state[nodeName], body);
			state[sibName] = advSib(state[sibName]);
		}
		// head->tail or tail->head
		else if (!lis && sibNode === state[invNodeName]) {
			tmpSib = state[sibName];
			state[sibName] = advSib(tmpSib);
			invInsert(parEl, tmpSib, state[invSibName]);
			state[invSibName] = tmpSib;
		}
		else {
			{
				if (state[nodeName].vm != null)
					{ devNotify("ALREADY_HYDRATED", [state[nodeName].vm]); }
			}

			if (lis && state[sibName] != null)
				{ return lisMove(advSib, advNode, insert, sibName, nodeName, parEl, body, sibNode, state); }

			return BREAK;
		}
	};
}

function lisMove(advSib, advNode, insert, sibName, nodeName, parEl, body, sibNode, state) {
	if (sibNode._lis) {
		insert(parEl, state[nodeName].el, state[sibName]);
		state[nodeName] = advNode(state[nodeName], body);
	}
	else {
		// find closest tomb
		var t = binaryFindLarger(sibNode.idx, state.tombs);
		sibNode._lis = true;
		var tmpSib = advSib(state[sibName]);
		insert(parEl, state[sibName], t != null ? body[state.tombs[t]].el : t);

		if (t == null)
			{ state.tombs.push(sibNode.idx); }
		else
			{ state.tombs.splice(t, 0, sibNode.idx); }

		state[sibName] = tmpSib;
	}
}

var syncLft = syncDir(nextSib, nextNode, insertBefore, "lftSib", "lftNode", "rgtSib", "rgtNode", insertAfter);
var syncRgt = syncDir(prevSib, prevNode, insertAfter, "rgtSib", "rgtNode", "lftSib", "lftNode", insertBefore);

function syncChildren(node, donor) {
	var obody	= donor.body,
		parEl	= node.el,
		body	= node.body,
		state = {
			lftNode:	body[0],
			rgtNode:	body[body.length - 1],
			lftSib:		((obody)[0] || emptyObj).el,
			rgtSib:		(obody[obody.length - 1] || emptyObj).el,
		};

	converge:
	while (1) {
//		from_left:
		while (1) {
			var l = syncLft(node, parEl, body, state, null, false);
			if (l === BREAK) { break; }
			if (l === BREAK_ALL) { break converge; }
		}

//		from_right:
		while (1) {
			var r = syncRgt(node, parEl, body, state, state.lftNode, false);
			if (r === BREAK) { break; }
			if (r === BREAK_ALL) { break converge; }
		}

		sortDOM(node, parEl, body, state);
		break;
	}
}

// TODO: also use the state.rgtSib and state.rgtNode bounds, plus reduce LIS range
function sortDOM(node, parEl, body, state) {
	var kids = Array.prototype.slice.call(parEl.childNodes);
	var domIdxs = [];

	for (var k = 0; k < kids.length; k++) {
		var n = kids[k]._node;

		if (n.parent === node)
			{ domIdxs.push(n.idx); }
	}

	// list of non-movable vnode indices (already in correct order in old dom)
	var tombs = longestIncreasingSubsequence(domIdxs).map(function (i) { return domIdxs[i]; });

	for (var i = 0; i < tombs.length; i++)
		{ body[tombs[i]]._lis = true; }

	state.tombs = tombs;

	while (1) {
		var r = syncLft(node, parEl, body, state, null, true);
		if (r === BREAK_ALL) { break; }
	}
}

function alreadyAdopted(vnode) {
	return vnode.el._node.parent !== vnode.parent;
}

function takeSeqIndex(n, obody, fromIdx) {
	return obody[fromIdx];
}

function findSeqThorough(n, obody, fromIdx) {		// pre-tested isView?
	for (; fromIdx < obody.length; fromIdx++) {
		var o = obody[fromIdx];

		if (o.vm != null) {
			// match by key & viewFn || vm
			if (n.type === VVIEW && o.vm.view === n.view && o.vm.key === n.key || n.type === VMODEL && o.vm === n.vm)
				{ return o; }
		}
		else if (!alreadyAdopted(o) && n.tag === o.tag && n.type === o.type && n.key === o.key && (n.flags & ~DEEP_REMOVE) === (o.flags & ~DEEP_REMOVE))
			{ return o; }
	}

	return null;
}

function findHashKeyed(n, obody, fromIdx) {
	return obody[obody._keys[n.key]];
}

/*
// list must be a sorted list of vnodes by key
function findBinKeyed(n, list) {
	var idx = binaryKeySearch(list, n.key);
	return idx > -1 ? list[idx] : null;
}
*/

// have it handle initial hydrate? !donor?
// types (and tags if ELEM) are assumed the same, and donor exists
function patch(vnode, donor) {
	fireHook(donor.hooks, "willRecycle", donor, vnode);

	var el = vnode.el = donor.el;

	var obody = donor.body;
	var nbody = vnode.body;

	el._node = vnode;

	// "" => ""
	if (vnode.type === TEXT && nbody !== obody) {
		el.nodeValue = nbody;
		return;
	}

	if (vnode.attrs != null || donor.attrs != null)
		{ patchAttrs(vnode, donor, false); }

	// patch events

	var oldIsArr = isArr(obody);
	var newIsArr = isArr(nbody);
	var lazyList = (vnode.flags & LAZY_LIST) === LAZY_LIST;

//	var nonEqNewBody = nbody != null && nbody !== obody;

	if (oldIsArr) {
		// [] => []
		if (newIsArr || lazyList)
			{ patchChildren(vnode, donor); }
		// [] => "" | null
		else if (nbody !== obody) {
			if (nbody != null)
				{ el.textContent = nbody; }
			else
				{ clearChildren(donor); }
		}
	}
	else {
		// "" | null => []
		if (newIsArr) {
			clearChildren(donor);
			hydrateBody(vnode);
		}
		// "" | null => "" | null
		else if (nbody !== obody) {
			if (el.firstChild)
				{ el.firstChild.nodeValue = nbody; }
			else
				{ el.textContent = nbody; }
		}
	}

	fireHook(donor.hooks, "didRecycle", donor, vnode);
}

// larger qtys of KEYED_LIST children will use binary search
//const SEQ_FAILS_MAX = 100;

// TODO: modify vtree matcher to work similar to dom reconciler for keyed from left -> from right -> head/tail -> binary
// fall back to binary if after failing nri - nli > SEQ_FAILS_MAX
// while-advance non-keyed fromIdx
// [] => []
function patchChildren(vnode, donor) {
	var nbody		= vnode.body,
		nlen		= nbody.length,
		obody		= donor.body,
		olen		= obody.length,
		isLazy		= (vnode.flags & LAZY_LIST) === LAZY_LIST,
		isFixed		= (vnode.flags & FIXED_BODY) === FIXED_BODY,
		isKeyed		= (vnode.flags & KEYED_LIST) === KEYED_LIST,
		domSync		= !isFixed && vnode.type === ELEMENT,
		doFind		= true,
		find		= (
			isKeyed ? findHashKeyed :				// keyed lists/lazyLists
			isFixed || isLazy ? takeSeqIndex :		// unkeyed lazyLists and FIXED_BODY
			findSeqThorough							// more complex stuff
		);

	if (isKeyed) {
		var keys = {};
		for (var i = 0; i < obody.length; i++)
			{ keys[obody[i].key] = i; }
		obody._keys = keys;
	}

	if (domSync && nlen === 0) {
		clearChildren(donor);
		if (isLazy)
			{ vnode.body = []; }	// nbody.tpl(all);
		return;
	}

	var donor2,
		node2,
		foundIdx,
		patched = 0,
		everNonseq = false,
		fromIdx = 0;		// first unrecycled node (search head)

	if (isLazy) {
		var fnode2 = {key: null};
		var nbodyNew = Array(nlen);
	}

	for (var i = 0; i < nlen; i++) {
		if (isLazy) {
			var remake = false;
			var diffRes = null;

			if (doFind) {
				if (isKeyed)
					{ fnode2.key = nbody.key(i); }

				donor2 = find(fnode2, obody, fromIdx);
			}

			if (donor2 != null) {
                foundIdx = donor2.idx;
				diffRes = nbody.diff(i, donor2);

				// diff returns same, so cheaply adopt vnode without patching
				if (diffRes === true) {
					node2 = donor2;
					node2.parent = vnode;
					node2.idx = i;
					node2._lis = false;
				}
				// diff returns new diffVals, so generate new vnode & patch
				else
					{ remake = true; }
			}
			else
				{ remake = true; }

			if (remake) {
				node2 = nbody.tpl(i);			// what if this is a VVIEW, VMODEL, injected element?
				preProc(node2, vnode, i);

				node2._diff = diffRes != null ? diffRes : nbody.diff(i);

				if (donor2 != null)
					{ patch(node2, donor2); }
			}
			else {
				// TODO: flag tmp FIXED_BODY on unchanged nodes?

				// domSync = true;		if any idx changes or new nodes added/removed
			}

			nbodyNew[i] = node2;
		}
		else {
			var node2 = nbody[i];
			var type2 = node2.type;

			// ELEMENT,TEXT,COMMENT
			if (type2 <= COMMENT) {
				if (donor2 = doFind && find(node2, obody, fromIdx)) {
					patch(node2, donor2);
					foundIdx = donor2.idx;
				}
			}
			else if (type2 === VVIEW) {
				if (donor2 = doFind && find(node2, obody, fromIdx)) {		// update/moveTo
					foundIdx = donor2.idx;
					var vm = donor2.vm._update(node2.data, vnode, i);		// withDOM
				}
				else
					{ var vm = createView(node2.view, node2.data, node2.key, node2.opts)._redraw(vnode, i, false); }	// createView, no dom (will be handled by sync below)

				type2 = vm.node.type;
			}
			else if (type2 === VMODEL) {
				// if the injected vm has never been rendered, this vm._update() serves as the
				// initial vtree creator, but must avoid hydrating (creating .el) because syncChildren()
				// which is responsible for mounting below (and optionally hydrating), tests .el presence
				// to determine if hydration & mounting are needed
				var withDOM = isHydrated(node2.vm);

				var vm = node2.vm._update(node2.data, vnode, i, withDOM);
				type2 = vm.node.type;
			}
		}

		// found donor & during a sequential search ...at search head
		if (!isKeyed && donor2 != null) {
			if (foundIdx === fromIdx) {
				// advance head
				fromIdx++;
				// if all old vnodes adopted and more exist, stop searching
				if (fromIdx === olen && nlen > olen) {
					// short-circuit find, allow loop just create/init rest
					donor2 = null;
					doFind = false;
				}
			}
			else
				{ everNonseq = true; }

			if (olen > 100 && everNonseq && ++patched % 10 === 0)
				{ while (fromIdx < olen && alreadyAdopted(obody[fromIdx]))
					{ fromIdx++; } }
		}
	}

	// replace List w/ new body
	if (isLazy)
		{ vnode.body = nbodyNew; }

	domSync && syncChildren(vnode, donor);
}

function DOMInstr(withTime) {
	var isEdge = navigator.userAgent.indexOf("Edge") !== -1;
	var isIE = navigator.userAgent.indexOf("Trident/") !== -1;
	var getDescr = Object.getOwnPropertyDescriptor;
	var defProp = Object.defineProperty;

	var nodeProto = Node.prototype;
	var textContent = getDescr(nodeProto, "textContent");
	var nodeValue = getDescr(nodeProto, "nodeValue");

	var htmlProto = HTMLElement.prototype;
	var innerText = getDescr(htmlProto, "innerText");

	var elemProto	= Element.prototype;
	var innerHTML	= getDescr(!isIE ? elemProto : htmlProto, "innerHTML");
	var className	= getDescr(!isIE ? elemProto : htmlProto, "className");
	var id			= getDescr(!isIE ? elemProto : htmlProto, "id");

	var styleProto	= CSSStyleDeclaration.prototype;

	var cssText		= getDescr(styleProto, "cssText");

	var inpProto = HTMLInputElement.prototype;
	var areaProto = HTMLTextAreaElement.prototype;
	var selProto = HTMLSelectElement.prototype;
	var optProto = HTMLOptionElement.prototype;

	var inpChecked = getDescr(inpProto, "checked");
	var inpVal = getDescr(inpProto, "value");

	var areaVal = getDescr(areaProto, "value");

	var selVal = getDescr(selProto, "value");
	var selIndex = getDescr(selProto, "selectedIndex");

	var optSel = getDescr(optProto, "selected");

	// onclick, onkey*, etc..

	// var styleProto = CSSStyleDeclaration.prototype;
	// var setProperty = getDescr(styleProto, "setProperty");

	var origOps = {
		"document.createElement": null,
		"document.createElementNS": null,
		"document.createTextNode": null,
		"document.createComment": null,
		"document.createDocumentFragment": null,

		"DocumentFragment.prototype.insertBefore": null,		// appendChild

		"Element.prototype.appendChild": null,
		"Element.prototype.removeChild": null,
		"Element.prototype.insertBefore": null,
		"Element.prototype.replaceChild": null,
		"Element.prototype.remove": null,

		"Element.prototype.setAttribute": null,
		"Element.prototype.setAttributeNS": null,
		"Element.prototype.removeAttribute": null,
		"Element.prototype.removeAttributeNS": null,

		// assign?
		// dataset, classlist, any props like .onchange

		// .style.setProperty, .style.cssText
	};

	var counts = {};
	var start = null;

	function ctxName(opName) {
		var opPath = opName.split(".");
		var o = window;
		while (opPath.length > 1)
			{ o = o[opPath.shift()]; }

		return {ctx: o, last: opPath[0]};
	}

	for (var opName in origOps) {
		var p = ctxName(opName);

		if (origOps[opName] === null)
			{ origOps[opName] = p.ctx[p.last]; }

		(function(opName, opShort) {
			counts[opShort] = 0;
			p.ctx[opShort] = function() {
				counts[opShort]++;
				return origOps[opName].apply(this, arguments);
			};
		})(opName, p.last);
	}

	counts.textContent = 0;
	defProp(nodeProto, "textContent", {
		set: function(s) {
			counts.textContent++;
			textContent.set.call(this, s);
		},
	});

	counts.nodeValue = 0;
	defProp(nodeProto, "nodeValue", {
		set: function(s) {
			counts.nodeValue++;
			nodeValue.set.call(this, s);
		},
	});

	counts.innerText = 0;
	defProp(htmlProto, "innerText", {
		set: function(s) {
			counts.innerText++;
			innerText.set.call(this, s);
		},
	});

	counts.innerHTML = 0;
	defProp(!isIE ? elemProto : htmlProto, "innerHTML", {
		set: function(s) {
			counts.innerHTML++;
			innerHTML.set.call(this, s);
		},
	});

	counts.className = 0;
	defProp(!isIE ? elemProto : htmlProto, "className", {
		set: function(s) {
			counts.className++;
			className.set.call(this, s);
		},
	});

	counts.cssText = 0;
	defProp(styleProto, "cssText", {
		set: function(s) {
			counts.cssText++;
			cssText.set.call(this, s);
		},
	});

	counts.id = 0;
	defProp(!isIE ? elemProto : htmlProto, "id", {
		set: function(s) {
			counts.id++;
			id.set.call(this, s);
		},
	});

	counts.checked = 0;
	defProp(inpProto, "checked", {
		set: function(s) {
			counts.checked++;
			inpChecked.set.call(this, s);
		},
	});

	counts.value = 0;
	defProp(inpProto, "value", {
		set: function(s) {
			counts.value++;
			inpVal.set.call(this, s);
		},
	});

	defProp(areaProto, "value", {
		set: function(s) {
			counts.value++;
			areaVal.set.call(this, s);
		},
	});

	defProp(selProto, "value", {
		set: function(s) {
			counts.value++;
			selVal.set.call(this, s);
		},
	});

	counts.selectedIndex = 0;
	defProp(selProto, "selectedIndex", {
		set: function(s) {
			counts.selectedIndex++;
			selIndex.set.call(this, s);
		},
	});

	counts.selected = 0;
	defProp(optProto, "selected", {
		set: function(s) {
			counts.selected++;
			optSel.set.call(this, s);
		},
	});

	/*
	counts.setProperty = 0;
	defProp(styleProto, "setProperty", {
		set: function(s) {
			counts.setProperty++;
			setProperty.set.call(this, s);
		},
	});
	*/

	function reset() {
		for (var i in counts)
			{ counts[i] = 0; }
	}

	this.start = function() {
		start = +new Date;
	};

	this.end = function() {
		var _time = +new Date - start;
		start = null;
/*
		for (var opName in origOps) {
			var p = ctxName(opName);
			p.ctx[p.last] = origOps[opName];
		}

		defProp(nodeProto, "textContent", textContent);
		defProp(nodeProto, "nodeValue", nodeValue);
		defProp(htmlProto, "innerText", innerText);
		defProp(!isIE ? elemProto : htmlProto, "innerHTML", innerHTML);
		defProp(!isIE ? elemProto : htmlProto, "className", className);
		defProp(!isIE ? elemProto : htmlProto, "id", id);
		defProp(inpProto,  "checked", inpChecked);
		defProp(inpProto,  "value", inpVal);
		defProp(areaProto, "value", areaVal);
		defProp(selProto,  "value", selVal);
		defProp(selProto,  "selectedIndex", selIndex);
		defProp(optProto,  "selected", optSel);
	//	defProp(styleProto, "setProperty", setProperty);
		defProp(styleProto, "cssText", cssText);
*/
		var out = {};

		for (var i in counts)
			{ if (counts[i] > 0)
				{ out[i] = counts[i]; } }

		reset();

		if (withTime)
			{ out._time = _time; }

		return out;
	};
}

var instr = null;

{
	if (DEVMODE.mutations) {
		instr = new DOMInstr(true);
	}
}

// view + key serve as the vm's unique identity
function ViewModel(view, data, key, opts) {
	var vm = this;

	vm.view = view;
	vm.data = data;
	vm.key = key;

	{
		if (isStream(data))
			{ vm._stream = hookStream2(data, vm); }
	}

	if (opts) {
		vm.opts = opts;
		vm.config(opts);
	}

	var out = isPlainObj(view) ? view : view.call(vm, vm, data, key, opts);

	if (isFunc(out))
		{ vm.render = out; }
	else {
		vm.render = out.render;
		vm.config(out);
	}

	// these must be wrapped here since they're debounced per view
	vm._redrawAsync = raft(function (_) { return vm.redraw(true); });
	vm._updateAsync = raft(function (newData) { return vm.update(newData, true); });

	vm.init && vm.init.call(vm, vm, vm.data, vm.key, opts);
}

var ViewModelProto = ViewModel.prototype = {
	constructor: ViewModel,

	_diff:	null,	// diff cache

	init:	null,
	view:	null,
	key:	null,
	data:	null,
	state:	null,
	api:	null,
	opts:	null,
	node:	null,
	hooks:	null,
	onevent: noop,
	refs:	null,
	render:	null,

	mount: mount,
	unmount: unmount,
	config: function(opts) {
		var t = this;

		if (opts.init)
			{ t.init = opts.init; }
		if (opts.diff)
			{ t.diff = opts.diff; }
		if (opts.onevent)
			{ t.onevent = opts.onevent; }

		// maybe invert assignment order?
		if (opts.hooks)
			{ t.hooks = assignObj(t.hooks || {}, opts.hooks); }

		{
			if (opts.onemit)
				{ t.onemit = assignObj(t.onemit || {}, opts.onemit); }
		}
	},
	parent: function() {
		return getVm(this.node.parent);
	},
	root: function() {
		var p = this.node;

		while (p.parent)
			{ p = p.parent; }

		return p.vm;
	},
	redraw: function(sync) {
		{
			if (DEVMODE.syncRedraw) {
				sync = true;
			}
		}
		var vm = this;
		sync ? vm._redraw(null, null, isHydrated(vm)) : vm._redrawAsync();
		return vm;
	},
	update: function(newData, sync) {
		{
			if (DEVMODE.syncRedraw) {
				sync = true;
			}
		}
		var vm = this;
		sync ? vm._update(newData, null, null, isHydrated(vm)) : vm._updateAsync(newData);
		return vm;
	},

	_update: updateSync,
	_redraw: redrawSync,
	_redrawAsync: null,
	_updateAsync: null,
};

function mount(el, isRoot) {
	var vm = this;

	{
		if (DEVMODE.mutations)
			{ instr.start(); }
	}

	if (isRoot) {
		clearChildren({el: el, flags: 0});

		vm._redraw(null, null, false);

		// if placeholder node doesnt match root tag
		if (el.nodeName.toLowerCase() !== vm.node.tag) {
			hydrate(vm.node);
			insertBefore(el.parentNode, vm.node.el, el);
			el.parentNode.removeChild(el);
		}
		else
			{ insertBefore(el.parentNode, hydrate(vm.node, el), el); }
	}
	else {
		vm._redraw(null, null);

		if (el)
			{ insertBefore(el, vm.node.el); }
	}

	if (el)
		{ drainDidHooks(vm); }

	{
		if (DEVMODE.mutations)
			{ console.log(instr.end()); }
	}

	return vm;
}

// asSub means this was called from a sub-routine, so don't drain did* hook queue
function unmount(asSub) {
	var vm = this;

	{
		if (isStream(vm._stream))
			{ unsubStream(vm._stream); }
	}

	var node = vm.node;
	var parEl = node.el.parentNode;

	// edge bug: this could also be willRemove promise-delayed; should .then() or something to make sure hooks fire in order
	removeChild(parEl, node.el);

	if (!asSub)
		{ drainDidHooks(vm); }
}

function reParent(vm, vold, newParent, newIdx) {
	if (newParent != null) {
		newParent.body[newIdx] = vold;
		vold.idx = newIdx;
		vold.parent = newParent;
		vold._lis = false;
	}
	return vm;
}

function redrawSync(newParent, newIdx, withDOM) {
	var isRedrawRoot = newParent == null;
	var vm = this;
	var isMounted = vm.node && vm.node.el && vm.node.el.parentNode;

	{
		// was mounted (has node and el), but el no longer has parent (unmounted)
		if (isRedrawRoot && vm.node && vm.node.el && !vm.node.el.parentNode)
			{ devNotify("UNMOUNTED_REDRAW", [vm]); }

		if (isRedrawRoot && DEVMODE.mutations && isMounted)
			{ instr.start(); }
	}

	var vold = vm.node, oldDiff, newDiff;

	if (vm.diff != null) {
		oldDiff = vm._diff;
		vm._diff = newDiff = vm.diff(vm, vm.data);

		if (vold != null) {
			var cmpFn = isArr(oldDiff) ? cmpArr : cmpObj;
			var isSame = oldDiff === newDiff || cmpFn(oldDiff, newDiff);

			if (isSame)
				{ return reParent(vm, vold, newParent, newIdx); }
		}
	}

	isMounted && fireHook(vm.hooks, "willRedraw", vm, vm.data);

	var vnew = vm.render.call(vm, vm, vm.data, oldDiff, newDiff);

	if (vnew === vold)
		{ return reParent(vm, vold, newParent, newIdx); }

	// todo: test result of willRedraw hooks before clearing refs
	vm.refs = null;

	// always assign vm key to root vnode (this is a de-opt)
	if (vm.key != null && vnew.key !== vm.key)
		{ vnew.key = vm.key; }

	vm.node = vnew;

	if (newParent) {
		preProc(vnew, newParent, newIdx, vm);
		newParent.body[newIdx] = vnew;
	}
	else if (vold && vold.parent) {
		preProc(vnew, vold.parent, vold.idx, vm);
		vold.parent.body[vold.idx] = vnew;
	}
	else
		{ preProc(vnew, null, null, vm); }

	if (withDOM !== false) {
		if (vold) {
			// root node replacement
			if (vold.tag !== vnew.tag || vold.key !== vnew.key) {
				// hack to prevent the replacement from triggering mount/unmount
				vold.vm = vnew.vm = null;

				var parEl = vold.el.parentNode;
				var refEl = nextSib(vold.el);
				removeChild(parEl, vold.el);
				insertBefore(parEl, hydrate(vnew), refEl);

				// another hack that allows any higher-level syncChildren to set
				// reconciliation bounds using a live node
				vold.el = vnew.el;

				// restore
				vnew.vm = vm;
			}
			else
				{ patch(vnew, vold); }
		}
		else
			{ hydrate(vnew); }
	}

	isMounted && fireHook(vm.hooks, "didRedraw", vm, vm.data);

	if (isRedrawRoot && isMounted)
		{ drainDidHooks(vm); }

	{
		if (isRedrawRoot && DEVMODE.mutations && isMounted)
			{ console.log(instr.end()); }
	}

	return vm;
}

// this also doubles as moveTo
// TODO? @withRedraw (prevent redraw from firing)
function updateSync(newData, newParent, newIdx, withDOM) {
	var vm = this;

	if (newData != null) {
		if (vm.data !== newData) {
			{
				devNotify("DATA_REPLACED", [vm, vm.data, newData]);
			}
			fireHook(vm.hooks, "willUpdate", vm, newData);
			vm.data = newData;

			{
				if (isStream(vm._stream))
					{ unsubStream(vm._stream); }
				if (isStream(newData))
					{ vm._stream = hookStream2(newData, vm); }
			}
		}
	}

	return vm._redraw(newParent, newIdx, withDOM);
}

function defineElement(tag, arg1, arg2, flags) {
	var attrs, body;

	if (arg2 == null) {
		if (isPlainObj(arg1))
			{ attrs = arg1; }
		else
			{ body = arg1; }
	}
	else {
		attrs = arg1;
		body = arg2;
	}

	return initElementNode(tag, attrs, body, flags);
}

//export const XML_NS = "http://www.w3.org/2000/xmlns/";
var SVG_NS = "http://www.w3.org/2000/svg";

function defineSvgElement(tag, arg1, arg2, flags) {
	var n = defineElement(tag, arg1, arg2, flags);
	n.ns = SVG_NS;
	return n;
}

function defineComment(body) {
	var node = new VNode;
	node.type = COMMENT;
	node.body = body;
	return node;
}

// placeholder for declared views
function VView(view, data, key, opts) {
	this.view = view;
	this.data = data;
	this.key = key;
	this.opts = opts;
}

VView.prototype = {
	constructor: VView,

	type: VVIEW,
	view: null,
	data: null,
	key: null,
	opts: null,
};

function defineView(view, data, key, opts) {
	return new VView(view, data, key, opts);
}

// placeholder for injected ViewModels
function VModel(vm) {
	this.vm = vm;
}

VModel.prototype = {
	constructor: VModel,

	type: VMODEL,
	vm: null,
};

function injectView(vm) {
//	if (vm.node == null)
//		vm._redraw(null, null, false);

//	return vm.node;

	return new VModel(vm);
}

function injectElement(el) {
	var node = new VNode;
	node.type = ELEMENT;
	node.el = node.key = el;
	return node;
}

function lazyList(items, cfg) {
	var len = items.length;

	var self = {
		items: items,
		length: len,
		// defaults to returning item identity (or position?)
		key: function(i) {
			return cfg.key(items[i], i);
		},
		// default returns 0?
		diff: function(i, donor) {
			var newVals = cfg.diff(items[i], i);
			if (donor == null)
				{ return newVals; }
			var oldVals = donor._diff;
			var same = newVals === oldVals || isArr(oldVals) ? cmpArr(newVals, oldVals) : cmpObj(newVals, oldVals);
			return same || newVals;
		},
		tpl: function(i) {
			return cfg.tpl(items[i], i);
		},
		map: function(tpl) {
			cfg.tpl = tpl;
			return self;
		},
		body: function(vnode) {
			var nbody = Array(len);

			for (var i = 0; i < len; i++) {
				var vnode2 = self.tpl(i);

			//	if ((vnode.flags & KEYED_LIST) === KEYED_LIST && self. != null)
			//		vnode2.key = getKey(item);

				vnode2._diff = self.diff(i);			// holds oldVals for cmp

				nbody[i] = vnode2;

				// run preproc pass (should this be just preProc in above loop?) bench
				preProc(vnode2, vnode, i);
			}

			// replace List with generated body
			vnode.body = nbody;
		}
	};

	return self;
}

var nano = {
	config: config,

	ViewModel: ViewModel,
	VNode: VNode,

	createView: createView,

	defineElement: defineElement,
	defineSvgElement: defineSvgElement,
	defineText: defineText,
	defineComment: defineComment,
	defineView: defineView,

	injectView: injectView,
	injectElement: injectElement,

	lazyList: lazyList,

	FIXED_BODY: FIXED_BODY,
	DEEP_REMOVE: DEEP_REMOVE,
	KEYED_LIST: KEYED_LIST,
	LAZY_LIST: LAZY_LIST,
};

function protoPatch(n, doRepaint) {
	patch$1(this, n, doRepaint);
}

// newNode can be either {class: style: } or full new VNode
// will/didPatch hooks?
function patch$1(o, n, doRepaint) {
	if (n.type != null) {
		// no full patching of view roots, just use redraw!
		if (o.vm != null)
			{ return; }

		preProc(n, o.parent, o.idx, null);
		o.parent.body[o.idx] = n;
		patch(n, o);
		doRepaint && repaint(n);
		drainDidHooks(getVm(n));
	}
	else {
		// TODO: re-establish refs

		// shallow-clone target
		var donor = Object.create(o);
		// fixate orig attrs
		donor.attrs = assignObj({}, o.attrs);
		// assign new attrs into live targ node
		var oattrs = assignObj(o.attrs, n);
		// prepend any fixed shorthand class
		if (o._class != null) {
			var aclass = oattrs.class;
			oattrs.class = aclass != null && aclass !== "" ? o._class + " " + aclass : o._class;
		}

		patchAttrs(o, donor);

		doRepaint && repaint(o);
	}
}

VNodeProto.patch = protoPatch;

function nextSubVms(n, accum) {
	var body = n.body;

	if (isArr(body)) {
		for (var i = 0; i < body.length; i++) {
			var n2 = body[i];

			if (n2.vm != null)
				{ accum.push(n2.vm); }
			else
				{ nextSubVms(n2, accum); }
		}
	}

	return accum;
}

function defineElementSpread(tag) {
	var args = arguments;
	var len = args.length;
	var body, attrs;

	if (len > 1) {
		var bodyIdx = 1;

		if (isPlainObj(args[1])) {
			attrs = args[1];
			bodyIdx = 2;
		}

		if (len === bodyIdx + 1 && (isVal(args[bodyIdx]) || isArr(args[bodyIdx]) || attrs && (attrs._flags & LAZY_LIST) === LAZY_LIST))
			{ body = args[bodyIdx]; }
		else
			{ body = sliceArgs(args, bodyIdx); }
	}

	return initElementNode(tag, attrs, body);
}

function defineSvgElementSpread() {
	var n = defineElementSpread.apply(null, arguments);
	n.ns = SVG_NS;
	return n;
}

ViewModelProto.emit = emit;
ViewModelProto.onemit = null;

ViewModelProto.body = function() {
	return nextSubVms(this.node, []);
};

nano.defineElementSpread = defineElementSpread;
nano.defineSvgElementSpread = defineSvgElementSpread;

ViewModelProto._stream = null;

function protoAttach(el) {
	var vm = this;
	if (vm.node == null)
		{ vm._redraw(null, null, false); }

	attach(vm.node, el);

	return vm;
}

// very similar to hydrate, TODO: dry
function attach(vnode, withEl) {
	vnode.el = withEl;
	withEl._node = vnode;

	var nattrs = vnode.attrs;

	for (var key in nattrs) {
		var nval = nattrs[key];
		var isDyn = isDynProp(vnode.tag, key);

		if (isStyleProp(key) || isSplProp(key)) {}
		else if (isEvProp(key))
			{ patchEvent(vnode, key, nval); }
		else if (nval != null && isDyn)
			{ setAttr(vnode, key, nval, isDyn); }
	}

	if ((vnode.flags & LAZY_LIST) === LAZY_LIST)
		{ vnode.body.body(vnode); }

	if (isArr(vnode.body) && vnode.body.length > 0) {
		var c = withEl.firstChild;
		var i = 0;
		var v = vnode.body[i];
		do {
			if (v.type === VVIEW)
				{ v = createView(v.view, v.data, v.key, v.opts)._redraw(vnode, i, false).node; }
			else if (v.type === VMODEL)
				{ v = v.node || v._redraw(vnode, i, false).node; }

			{
				if (vnode.tag === "table" && v.tag === "tr") {
					devNotify("ATTACH_IMPLICIT_TBODY", [vnode, v]);
				}
			}

			attach(v, c);
		} while ((c = c.nextSibling) && (v = vnode.body[++i]))
	}
}

function vmProtoHtml(dynProps) {
	var vm = this;

	if (vm.node == null)
		{ vm._redraw(null, null, false); }

	return html(vm.node, dynProps);
}

function vProtoHtml(dynProps) {
	return html(this, dynProps);
}

function camelDash(val) {
	return val.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
}

function styleStr(css) {
	var style = "";

	for (var pname in css) {
		if (css[pname] != null)
			{ style += camelDash(pname) + ": " + autoPx(pname, css[pname]) + '; '; }
	}

	return style;
}

function toStr(val) {
	return val == null ? '' : ''+val;
}

var voidTags = {
    area: true,
    base: true,
    br: true,
    col: true,
    command: true,
    embed: true,
    hr: true,
    img: true,
    input: true,
    keygen: true,
    link: true,
    meta: true,
    param: true,
    source: true,
    track: true,
	wbr: true
};

function escHtml(s) {
	s = toStr(s);

	for (var i = 0, out = ''; i < s.length; i++) {
		switch (s[i]) {
			case '&': out += '&amp;';  break;
			case '<': out += '&lt;';   break;
			case '>': out += '&gt;';   break;
		//	case '"': out += '&quot;'; break;
		//	case "'": out += '&#039;'; break;
		//	case '/': out += '&#x2f;'; break;
			default:  out += s[i];
		}
	}

	return out;
}

function escQuotes(s) {
	s = toStr(s);

	for (var i = 0, out = ''; i < s.length; i++)
		{ out += s[i] === '"' ? '&quot;' : s[i]; }		// also &?

	return out;
}

function eachHtml(arr, dynProps) {
	var buf = '';
	for (var i = 0; i < arr.length; i++)
		{ buf += html(arr[i], dynProps); }
	return buf;
}

var innerHTML = ".innerHTML";

function html(node, dynProps) {
	var out, style;

	switch (node.type) {
		case VVIEW:
			out = createView(node.view, node.data, node.key, node.opts).html(dynProps);
			break;
		case VMODEL:
			out = node.vm.html();
			break;
		case ELEMENT:
			if (node.el != null && node.tag == null) {
				out = node.el.outerHTML;		// pre-existing dom elements (does not currently account for any props applied to them)
				break;
			}

			var buf = "";

			buf += "<" + node.tag;

			var attrs = node.attrs,
				hasAttrs = attrs != null;

			if (hasAttrs) {
				for (var pname in attrs) {
					if (isEvProp(pname) || pname[0] === "." || pname[0] === "_" || dynProps === false && isDynProp(node.tag, pname))
						{ continue; }

					var val = attrs[pname];

					if (pname === "style" && val != null) {
						style = typeof val === "object" ? styleStr(val) : val;
						continue;
					}

					if (val === true)
						{ buf += " " + escHtml(pname) + '=""'; }
					else if (val === false) {}
					else if (val != null)
						{ buf += " " + escHtml(pname) + '="' + escQuotes(val) + '"'; }
				}

				if (style != null)
					{ buf += ' style="' + escQuotes(style.trim()) + '"'; }
			}

			// if body-less svg node, auto-close & return
			if (node.body == null && node.ns != null && node.tag !== "svg")
				{ return buf + "/>"; }
			else
				{ buf += ">"; }

			if (!voidTags[node.tag]) {
				if (hasAttrs && attrs[innerHTML] != null)
					{ buf += attrs[innerHTML]; }
				else if (isArr(node.body))
					{ buf += eachHtml(node.body, dynProps); }
				else if ((node.flags & LAZY_LIST) === LAZY_LIST) {
					node.body.body(node);
					buf += eachHtml(node.body, dynProps);
				}
				else
					{ buf += escHtml(node.body); }

				buf += "</" + node.tag + ">";
			}
			out = buf;
			break;
		case TEXT:
			out = escHtml(node.body);
			break;
		case COMMENT:
			out = "<!--" + escHtml(node.body) + "-->";
			break;
	}

	return out;
}

ViewModelProto.attach = protoAttach;

ViewModelProto.html = vmProtoHtml;
VNodeProto.html = vProtoHtml;

nano.DEVMODE = DEVMODE;

return nano;

})));
//# sourceMappingURL=domvm.dev.js.map


/***/ }),

/***/ "../node_modules/process/browser.js":
/*!******************************************!*\
  !*** ../node_modules/process/browser.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "../node_modules/promiz/promiz.js":
/*!****************************************!*\
  !*** ../node_modules/promiz/promiz.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, setImmediate) {(function () {
  global = this

  var queueId = 1
  var queue = {}
  var isRunningTask = false

  if (!global.setImmediate)
    global.addEventListener('message', function (e) {
      if (e.source == global){
        if (isRunningTask)
          nextTick(queue[e.data])
        else {
          isRunningTask = true
          try {
            queue[e.data]()
          } catch (e) {}

          delete queue[e.data]
          isRunningTask = false
        }
      }
    })

  function nextTick(fn) {
    if (global.setImmediate) setImmediate(fn)
    // if inside of web worker
    else if (global.importScripts) setTimeout(fn)
    else {
      queueId++
      queue[queueId] = fn
      global.postMessage(queueId, '*')
    }
  }

  Deferred.resolve = function (value) {
    if (!(this._d == 1))
      throw TypeError()

    if (value instanceof Deferred)
      return value

    return new Deferred(function (resolve) {
        resolve(value)
    })
  }

  Deferred.reject = function (value) {
    if (!(this._d == 1))
      throw TypeError()

    return new Deferred(function (resolve, reject) {
        reject(value)
    })
  }

  Deferred.all = function (arr) {
    if (!(this._d == 1))
      throw TypeError()

    if (!(arr instanceof Array))
      return Deferred.reject(TypeError())

    var d = new Deferred()

    function done(e, v) {
      if (v)
        return d.resolve(v)

      if (e)
        return d.reject(e)

      var unresolved = arr.reduce(function (cnt, v) {
        if (v && v.then)
          return cnt + 1
        return cnt
      }, 0)

      if(unresolved == 0)
        d.resolve(arr)

      arr.map(function (v, i) {
        if (v && v.then)
          v.then(function (r) {
            arr[i] = r
            done()
            return r
          }, done)
      })
    }

    done()

    return d
  }

  Deferred.race = function (arr) {
    if (!(this._d == 1))
      throw TypeError()

    if (!(arr instanceof Array))
      return Deferred.reject(TypeError())

    if (arr.length == 0)
      return new Deferred()

    var d = new Deferred()

    function done(e, v) {
      if (v)
        return d.resolve(v)

      if (e)
        return d.reject(e)

      var unresolved = arr.reduce(function (cnt, v) {
        if (v && v.then)
          return cnt + 1
        return cnt
      }, 0)

      if(unresolved == 0)
        d.resolve(arr)

      arr.map(function (v, i) {
        if (v && v.then)
          v.then(function (r) {
            done(null, r)
          }, done)
      })
    }

    done()

    return d
  }

  Deferred._d = 1


  /**
   * @constructor
   */
  function Deferred(resolver) {
    'use strict'
    if (typeof resolver != 'function' && resolver != undefined)
      throw TypeError()

    if (typeof this != 'object' || (this && this.then))
      throw TypeError()

    // states
    // 0: pending
    // 1: resolving
    // 2: rejecting
    // 3: resolved
    // 4: rejected
    var self = this,
      state = 0,
      val = 0,
      next = [],
      fn, er;

    self['promise'] = self

    self['resolve'] = function (v) {
      fn = self.fn
      er = self.er
      if (!state) {
        val = v
        state = 1

        nextTick(fire)
      }
      return self
    }

    self['reject'] = function (v) {
      fn = self.fn
      er = self.er
      if (!state) {
        val = v
        state = 2

        nextTick(fire)

      }
      return self
    }

    self['_d'] = 1

    self['then'] = function (_fn, _er) {
      if (!(this._d == 1))
        throw TypeError()

      var d = new Deferred()

      d.fn = _fn
      d.er = _er
      if (state == 3) {
        d.resolve(val)
      }
      else if (state == 4) {
        d.reject(val)
      }
      else {
        next.push(d)
      }

      return d
    }

    self['catch'] = function (_er) {
      return self['then'](null, _er)
    }

    var finish = function (type) {
      state = type || 4
      next.map(function (p) {
        state == 3 && p.resolve(val) || p.reject(val)
      })
    }

    try {
      if (typeof resolver == 'function')
        resolver(self['resolve'], self['reject'])
    } catch (e) {
      self['reject'](e)
    }

    return self

    // ref : reference to 'then' function
    // cb, ec, cn : successCallback, failureCallback, notThennableCallback
    function thennable (ref, cb, ec, cn) {
      // Promises can be rejected with other promises, which should pass through
      if (state == 2) {
        return cn()
      }
      if ((typeof val == 'object' || typeof val == 'function') && typeof ref == 'function') {
        try {

          // cnt protects against abuse calls from spec checker
          var cnt = 0
          ref.call(val, function (v) {
            if (cnt++) return
            val = v
            cb()
          }, function (v) {
            if (cnt++) return
            val = v
            ec()
          })
        } catch (e) {
          val = e
          ec()
        }
      } else {
        cn()
      }
    };

    function fire() {

      // check if it's a thenable
      var ref;
      try {
        ref = val && val.then
      } catch (e) {
        val = e
        state = 2
        return fire()
      }

      thennable(ref, function () {
        state = 1
        fire()
      }, function () {
        state = 2
        fire()
      }, function () {
        try {
          if (state == 1 && typeof fn == 'function') {
            val = fn(val)
          }

          else if (state == 2 && typeof er == 'function') {
            val = er(val)
            state = 1
          }
        } catch (e) {
          val = e
          return finish()
        }

        if (val == self) {
          val = TypeError()
          finish()
        } else thennable(ref, function () {
            finish(3)
          }, finish, function () {
            finish(state == 1 && 3)
          })

      })
    }


  }

  // Export our library object, either for node.js or as a globally scoped variable
  if (true) {
    module['exports'] = Deferred
  } else {}
})()

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../timers-browserify/main.js */ "../node_modules/timers-browserify/main.js").setImmediate))

/***/ }),

/***/ "../node_modules/setimmediate/setImmediate.js":
/*!****************************************************!*\
  !*** ../node_modules/setimmediate/setImmediate.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../process/browser.js */ "../node_modules/process/browser.js")))

/***/ }),

/***/ "../node_modules/timers-browserify/main.js":
/*!*************************************************!*\
  !*** ../node_modules/timers-browserify/main.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(/*! setimmediate */ "../node_modules/setimmediate/setImmediate.js");
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "../node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "../node_modules/webpack/buildin/global.js":
/*!*************************************************!*\
  !*** ../node_modules/webpack/buildin/global.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "../styles/suite.scss":
/*!****************************!*\
  !*** ../styles/suite.scss ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ "../ts-all/sources/entry.ts":
/*!**********************************!*\
  !*** ../ts-all/sources/entry.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! ../../styles/suite.scss */ "../styles/suite.scss");
// HELPERS
/* tslint:disable */
var CssManager_1 = __webpack_require__(/*! @dhx/ts-common/CssManager */ "../ts-common/CssManager.ts");
exports.cssManager = CssManager_1.cssManager;
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
exports.EventSystem = events_1.EventSystem;
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
exports.awaitRedraw = dom_1.awaitRedraw;
exports.resizeHandler = dom_1.resizeHandler;
var ts_vault_1 = __webpack_require__(/*! @dhx/ts-vault */ "../ts-vault/index.ts");
exports.Uploader = ts_vault_1.Uploader;
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
exports.DataCollection = ts_data_1.DataCollection;
exports.TreeCollection = ts_data_1.TreeCollection;
exports.DataProxy = ts_data_1.DataProxy;
exports.dataDrivers = ts_data_1.dataDrivers;
exports.ajax = ts_data_1.ajax;
// WIDGETS
var ts_layout_1 = __webpack_require__(/*! @dhx/ts-layout */ "../ts-layout/index.ts");
exports.Layout = ts_layout_1.Layout;
var ts_list_1 = __webpack_require__(/*! @dhx/ts-list */ "../ts-list/index.ts");
exports.List = ts_list_1.List;
var ts_calendar_1 = __webpack_require__(/*! @dhx/ts-calendar */ "../ts-calendar/index.ts");
exports.Calendar = ts_calendar_1.Calendar;
var ts_colorpicker_1 = __webpack_require__(/*! @dhx/ts-colorpicker */ "../ts-colorpicker/index.ts");
exports.Colorpicker = ts_colorpicker_1.Colorpicker;
var ts_chart_1 = __webpack_require__(/*! @dhx/ts-chart */ "../ts-chart/index.ts");
exports.Chart = ts_chart_1.Chart;
var ts_combobox_1 = __webpack_require__(/*! @dhx/ts-combobox */ "../ts-combobox/index.ts");
exports.Combobox = ts_combobox_1.Combobox;
var ts_dataview_1 = __webpack_require__(/*! @dhx/ts-dataview */ "../ts-dataview/index.ts");
exports.DataView = ts_dataview_1.DataView;
var ts_form_1 = __webpack_require__(/*! @dhx/ts-form */ "../ts-form/index.ts");
exports.Form = ts_form_1.Form;
var ts_grid_1 = __webpack_require__(/*! @dhx/ts-grid */ "../ts-grid/index.ts");
exports.Grid = ts_grid_1.Grid;
var ts_message_1 = __webpack_require__(/*! @dhx/ts-message */ "../ts-message/index.ts");
exports.message = ts_message_1.message;
exports.alert = ts_message_1.alert;
exports.confirm = ts_message_1.confirm;
exports.enableTooltip = ts_message_1.enableTooltip;
exports.disableTooltip = ts_message_1.disableTooltip;
exports.tooltip = ts_message_1.tooltip;
var ts_menu_1 = __webpack_require__(/*! @dhx/ts-menu */ "../ts-menu/index.ts");
exports.Menu = ts_menu_1.Menu;
exports.ContextMenu = ts_menu_1.ContextMenu;
var ts_popup_1 = __webpack_require__(/*! @dhx/ts-popup */ "../ts-popup/index.ts");
exports.Popup = ts_popup_1.Popup;
var ts_ribbon_1 = __webpack_require__(/*! @dhx/ts-ribbon */ "../ts-ribbon/index.ts");
exports.Ribbon = ts_ribbon_1.Ribbon;
var ts_sidebar_1 = __webpack_require__(/*! @dhx/ts-sidebar */ "../ts-sidebar/index.ts");
exports.Sidebar = ts_sidebar_1.Sidebar;
var ts_slider_1 = __webpack_require__(/*! @dhx/ts-slider */ "../ts-slider/index.ts");
exports.Slider = ts_slider_1.Slider;
var ts_tabbar_1 = __webpack_require__(/*! @dhx/ts-tabbar */ "../ts-tabbar/index.ts");
exports.Tabbar = ts_tabbar_1.Tabbar;
var ts_timepicker_1 = __webpack_require__(/*! @dhx/ts-timepicker */ "../ts-timepicker/index.ts");
exports.Timepicker = ts_timepicker_1.Timepicker;
var ts_toolbar_1 = __webpack_require__(/*! @dhx/ts-toolbar */ "../ts-toolbar/index.ts");
exports.Toolbar = ts_toolbar_1.Toolbar;
var ts_tree_1 = __webpack_require__(/*! @dhx/ts-tree */ "../ts-tree/index.ts");
exports.Tree = ts_tree_1.Tree;
var ts_window_1 = __webpack_require__(/*! @dhx/ts-window */ "../ts-window/index.ts");
exports.Window = ts_window_1.Window;
// TOOLS
var ts_colorpicker_2 = __webpack_require__(/*! @dhx/ts-colorpicker */ "../ts-colorpicker/index.ts");
var en_1 = __webpack_require__(/*! @dhx/ts-message/sources/locales/en */ "../ts-message/sources/locales/en.ts");
var en_2 = __webpack_require__(/*! @dhx/ts-calendar/sources/locales/en */ "../ts-calendar/sources/locales/en.ts");
var en_3 = __webpack_require__(/*! @dhx/ts-combobox/sources/locales/en */ "../ts-combobox/sources/locales/en.ts");
var en_4 = __webpack_require__(/*! @dhx/ts-form/sources/locales/en */ "../ts-form/sources/locales/en.ts");
var en_5 = __webpack_require__(/*! @dhx/ts-timepicker/sources/locales/en */ "../ts-timepicker/sources/locales/en.ts");
var w = window;
exports.i18n = w.dhx && w.dhx.i18n ? w.dhx.i18 : {};
exports.i18n.setLocale = function (component, value) {
    var target = exports.i18n[component];
    for (var key in value) {
        target[key] = value[key];
    }
};
exports.i18n.colorpicker = exports.i18n.colorpicker || ts_colorpicker_2.locale;
exports.i18n.message = exports.i18n.message || en_1.default;
exports.i18n.calendar = exports.i18n.calendar || en_2.default;
exports.i18n.combobox = exports.i18n.combobox || en_3.default;
exports.i18n.form = exports.i18n.form || en_4.default;
exports.i18n.timepicker = exports.i18n.timepicker || en_5.default;


/***/ }),

/***/ "../ts-all/sources/entry_pro.ts":
/*!**************************************!*\
  !*** ../ts-all/sources/entry_pro.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./entry */ "../ts-all/sources/entry.ts"));
// HELPERS
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
exports.dataDrivers = ts_data_1.dataDriversPro;
exports.LazyDataProxy = ts_data_1.LazyDataProxy;
var ts_treegrid_1 = __webpack_require__(/*! @dhx/ts-treegrid */ "../ts-treegrid/index.ts");
exports.TreeGridCollection = ts_treegrid_1.TreeGridCollection;
var ts_grid_1 = __webpack_require__(/*! @dhx/ts-grid */ "../ts-grid/index.ts");
exports.Grid = ts_grid_1.ProGrid;
// WIDGETS
var ts_treegrid_2 = __webpack_require__(/*! @dhx/ts-treegrid */ "../ts-treegrid/index.ts");
exports.TreeGrid = ts_treegrid_2.TreeGrid;


/***/ }),

/***/ "../ts-calendar/index.ts":
/*!*******************************!*\
  !*** ../ts-calendar/index.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Calendar */ "../ts-calendar/sources/Calendar.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-calendar/sources/types.ts"));
__export(__webpack_require__(/*! ./sources/DateFormatter */ "../ts-calendar/sources/DateFormatter.ts"));


/***/ }),

/***/ "../ts-calendar/sources/Calendar.ts":
/*!******************************************!*\
  !*** ../ts-calendar/sources/Calendar.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_timepicker_1 = __webpack_require__(/*! @dhx/ts-timepicker */ "../ts-timepicker/index.ts");
var DateHelper_1 = __webpack_require__(/*! ./DateHelper */ "../ts-calendar/sources/DateHelper.ts");
var DateFormatter_1 = __webpack_require__(/*! ./DateFormatter */ "../ts-calendar/sources/DateFormatter.ts");
var helper_1 = __webpack_require__(/*! ./helper */ "../ts-calendar/sources/helper.ts");
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-calendar/sources/locales/en.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-calendar/sources/types.ts");
var Calendar = /** @class */ (function (_super) {
    __extends(Calendar, _super);
    function Calendar(container, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, container, core_1.extend({
            weekStart: "sunday",
            thisMonthOnly: false,
            dateFormat: window && window.dhx && window.dhx.dateFormat,
            width: "250px",
        }, config)) || this;
        _this._selected = [];
        _this.events = new events_1.EventSystem();
        _this.config.disabledDates = _this.config.disabledDates || _this.config.block; // TODO: remove suite_7.0
        _this.config.mode = _this.config.mode || _this.config.view; // TODO: remove suite_7.0
        if (!_this.config.dateFormat) {
            if (_this.config.timePicker) {
                if (_this.config.timeFormat === 12) {
                    _this.config.dateFormat = "%d/%m/%y %h:%i %A";
                }
                else {
                    _this.config.dateFormat = "%d/%m/%y %H:%i";
                }
            }
            else {
                _this.config.dateFormat = "%d/%m/%y";
            }
        }
        if (_this.config.value) {
            _this._setSelected(_this.config.value);
        }
        if (_this.config.date) {
            _this._currentDate = DateHelper_1.DateHelper.toDateObject(_this.config.date, _this.config.dateFormat);
        }
        else if (_this._getSelected()) {
            _this._currentDate = DateHelper_1.DateHelper.copy(_this._getSelected());
        }
        else {
            _this._currentDate = new Date();
        }
        switch (_this.config.mode) {
            case "month":
                _this._currentViewMode = "month";
                break;
            case "year":
                _this._currentViewMode = "year";
                break;
            default:
                _this._currentViewMode = "calendar";
        }
        _this._initHandlers();
        if (_this.config.timePicker) {
            _this._timepicker = new ts_timepicker_1.Timepicker(null, {
                timeFormat: _this.config.timeFormat,
                controls: true,
            });
            var initTime = _this._getSelected() || new Date();
            _this._timepicker.setValue(initTime);
            _this._time = _this._timepicker.getValue();
            _this._timepicker.events.on(ts_timepicker_1.TimepickerEvents.afterClose, function () {
                _this._timepicker.setValue(_this._time);
                _this.showDate(null, "calendar");
            });
            _this._timepicker.events.on(ts_timepicker_1.TimepickerEvents.afterApply, function () {
                var _a = _this._timepicker.getValue(true), hour = _a.hour, minute = _a.minute, AM = _a.AM;
                var oldDate = _this._getSelected();
                var newDate = DateHelper_1.DateHelper.withHoursAndMinutes(_this._getSelected() || new Date(), hour, minute, AM);
                if (_this.events.fire(types_1.CalendarEvents.beforeChange, [newDate, oldDate, true])) {
                    _this._selected[_this._selected.length - 1] = newDate;
                    _this.events.fire(types_1.CalendarEvents.change, [newDate, oldDate, true]);
                }
                _this._time = _this._timepicker.getValue();
                _this.showDate(null, "calendar");
            });
        }
        var render = function () { return _this._draw(); };
        _this.mount(container, dom_1.create({ render: render }));
        return _this;
    }
    Calendar.prototype.setValue = function (value) {
        if (!value || (value instanceof Array && value.length === 0)) {
            return false;
        }
        this._selected = [];
        var currentDate = value instanceof Array ? value[0] : value;
        var date = DateHelper_1.DateHelper.toDateObject(currentDate, this.config.dateFormat);
        var oldDate = DateHelper_1.DateHelper.copy(this._getSelected());
        if (!this.events.fire(types_1.CalendarEvents.beforeChange, [date, oldDate, false])) {
            return false;
        }
        this._setSelected(value);
        if (this._timepicker) {
            this._timepicker.setValue(date);
            this._time = this._timepicker.getValue();
        }
        this.showDate(this._getSelected());
        this.events.fire(types_1.CalendarEvents.change, [date, oldDate, false]);
        this.paint();
        return true;
    };
    Calendar.prototype.getValue = function (asDateObject) {
        var _this = this;
        if (asDateObject === void 0) { asDateObject = false; }
        if (!this._selected[0]) {
            return "";
        }
        if (this.config.range) {
            return asDateObject
                ? this._selected.map(function (date) { return DateHelper_1.DateHelper.copy(date); })
                : this._selected.map(function (date) { return DateFormatter_1.getFormatedDate(_this.config.dateFormat, date); });
        }
        return asDateObject
            ? DateHelper_1.DateHelper.copy(this._selected[0])
            : DateFormatter_1.getFormatedDate(this.config.dateFormat, this._selected[0]);
    };
    Calendar.prototype.getCurrentMode = function () {
        return this._currentViewMode;
    };
    Calendar.prototype.showDate = function (date, mode) {
        if (date) {
            this._currentDate = DateHelper_1.DateHelper.copy(date);
        }
        if (mode) {
            this._currentViewMode = mode;
        }
        this.paint();
    };
    Calendar.prototype.destructor = function () {
        if (this._linkedCalendar) {
            this._unlink();
        }
        if (this._timepicker) {
            this._timepicker.destructor();
        }
        this.unmount();
    };
    Calendar.prototype.clear = function () {
        var oldDate = this.getValue(true);
        if (this.config.timePicker) {
            this._timepicker.clear();
            this._time = this._timepicker.getValue();
        }
        this._selected = [];
        this.showDate(null, this.config.mode);
        this.events.fire(types_1.CalendarEvents.change, [this.getValue(true), oldDate, false]);
    };
    Calendar.prototype.link = function (targetCalendar) {
        var _this = this;
        if (this._linkedCalendar) {
            this._unlink();
        }
        this._linkedCalendar = targetCalendar;
        var rawLowerDate = this.getValue(true);
        var rawUpperDate = targetCalendar.getValue(true);
        var lowerDate = rawLowerDate && DateHelper_1.DateHelper.dayStart(rawLowerDate);
        var upperDate = rawUpperDate && DateHelper_1.DateHelper.dayStart(rawUpperDate);
        var getRangeClass = function (date) {
            if (DateHelper_1.DateHelper.isSameDay(upperDate, lowerDate)) {
                return null;
            }
            var positionInRange = "dhx_calendar-day--in-range";
            if (DateHelper_1.DateHelper.isSameDay(date, lowerDate)) {
                positionInRange += " dhx_calendar-day--first-date";
            }
            if (DateHelper_1.DateHelper.isSameDay(date, upperDate)) {
                positionInRange += " dhx_calendar-day--last-date";
            }
            return positionInRange;
        };
        var rangeMark = function (date) {
            if (lowerDate && upperDate) {
                return date >= lowerDate && date <= upperDate && getRangeClass(date);
            }
        };
        if (!this.config.$rangeMark || !this._linkedCalendar.config.$rangeMark) {
            this.config.$rangeMark = this._linkedCalendar.config.$rangeMark = rangeMark;
        }
        if (!this.config.disabledDates || !this._linkedCalendar.config.disabledDates) {
            this.config.disabledDates = function (date) {
                if (upperDate) {
                    return date > upperDate;
                }
            };
            this._linkedCalendar.config.disabledDates = function (date) {
                if (lowerDate) {
                    return date < lowerDate;
                }
            };
        }
        this.config.thisMonthOnly = true;
        targetCalendar.config.thisMonthOnly = true;
        this.events.on(types_1.CalendarEvents.change, function (date) {
            lowerDate = DateHelper_1.DateHelper.dayStart(date);
            _this._linkedCalendar.paint();
        }, "link");
        this._linkedCalendar.events.on(types_1.CalendarEvents.change, function (date) {
            upperDate = DateHelper_1.DateHelper.dayStart(date);
            _this.paint();
        }, "link");
        this._linkedCalendar.paint();
        this.paint();
    };
    Calendar.prototype._unlink = function () {
        if (this._linkedCalendar) {
            this.config.$rangeMark = this._linkedCalendar.config.$rangeMark = null;
            this.config.disabledDates = this._linkedCalendar.config.disabledDates = null;
            this.events.detach(types_1.CalendarEvents.change, "link");
            this._linkedCalendar.events.detach(types_1.CalendarEvents.change, "link");
            this._linkedCalendar.paint();
            this.paint();
            this._linkedCalendar = null;
        }
    };
    Calendar.prototype._setSelected = function (value) {
        var _this = this;
        var currentDate = value instanceof Array ? value[0] : value;
        var date = DateHelper_1.DateHelper.toDateObject(currentDate, this.config.dateFormat);
        if (value instanceof Array && this.config.range) {
            var filterDate_1 = [];
            value.forEach(function (element, index) {
                if (index < 2) {
                    filterDate_1.push(DateHelper_1.DateHelper.toDateObject(element, _this.config.dateFormat));
                }
            });
            if (filterDate_1.length === 2 && filterDate_1[0] < filterDate_1[1]) {
                filterDate_1.forEach(function (element) { return _this._selected.push(element); });
            }
            else {
                this._selected[0] = filterDate_1[0];
            }
        }
        else {
            this._selected[0] = date;
        }
    };
    Calendar.prototype._getSelected = function () {
        return this._selected[this._selected.length - 1];
    };
    Calendar.prototype._draw = function () {
        switch (this._currentViewMode) {
            case "calendar":
                this.events.fire(types_1.CalendarEvents.modeChange, ["calendar"]);
                return this._drawCalendar();
            case "month":
                this.events.fire(types_1.CalendarEvents.modeChange, ["month"]);
                return this._drawMonthSelector();
            case "year":
                this.events.fire(types_1.CalendarEvents.modeChange, ["year"]);
                return this._drawYearSelector();
            case "timepicker":
                this.events.fire(types_1.CalendarEvents.modeChange, ["timepicker"]);
                return this._drawTimepicker();
        }
    };
    Calendar.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onclick: {
                ".dhx_calendar-year, .dhx_calendar-month, .dhx_calendar-day": function (_e, vn) {
                    var date = vn.attrs._date;
                    var oldDate = DateHelper_1.DateHelper.copy(_this._getSelected());
                    switch (_this._currentViewMode) {
                        case "calendar": {
                            var mergedDate = _this.config.timePicker
                                ? DateHelper_1.DateHelper.mergeHoursAndMinutes(date, _this._getSelected() || _this._currentDate)
                                : date;
                            if (!_this.events.fire(types_1.CalendarEvents.beforeChange, [mergedDate, oldDate, true])) {
                                return;
                            }
                            if (_this.config.range &&
                                _this._selected.length === 1 &&
                                _this._selected[0] < mergedDate) {
                                _this._selected.push(mergedDate);
                            }
                            else {
                                _this._selected = [];
                                _this._selected[0] = mergedDate;
                            }
                            _this.showDate(_this._getSelected());
                            _this.events.fire(types_1.CalendarEvents.change, [date, oldDate, true]);
                            break;
                        }
                        case "month":
                            if (_this.config.mode !== "month") {
                                DateHelper_1.DateHelper.setMonth(_this._currentDate, date);
                                _this.showDate(null, "calendar");
                                _this.events.fire(types_1.CalendarEvents.monthSelected, [date]);
                            }
                            else {
                                var newDate = DateHelper_1.DateHelper.fromYearAndMonth(_this._currentDate.getFullYear() || _this._getSelected().getFullYear(), date);
                                if (!_this.events.fire(types_1.CalendarEvents.beforeChange, [newDate, oldDate, true])) {
                                    return;
                                }
                                _this._currentDate = newDate;
                                _this._selected[0] = newDate;
                                _this.events.fire(types_1.CalendarEvents.change, [_this._getSelected(), oldDate, true]);
                                _this.events.fire(types_1.CalendarEvents.monthSelected, [date]);
                                _this.paint();
                            }
                            break;
                        case "year":
                            if (_this.config.mode !== "year") {
                                DateHelper_1.DateHelper.setYear(_this._currentDate, date);
                                _this.showDate(null, "month");
                                _this.events.fire(types_1.CalendarEvents.yearSelected, [date]);
                            }
                            else {
                                var newDate = DateHelper_1.DateHelper.fromYear(date);
                                if (!_this.events.fire(types_1.CalendarEvents.beforeChange, [newDate, oldDate, true])) {
                                    return;
                                }
                                _this._currentDate = newDate;
                                _this._selected[0] = newDate;
                                _this.events.fire(types_1.CalendarEvents.change, [_this._getSelected(), oldDate, true]);
                                _this.events.fire(types_1.CalendarEvents.yearSelected, [date]);
                                _this.paint();
                            }
                    }
                },
                ".dhx_calendar-action__cancel": function () {
                    _this.showDate(_this._getSelected(), "calendar");
                    _this.events.fire(types_1.CalendarEvents.cancelClick, []);
                },
                ".dhx_calendar-action__show-month": function () { return _this.showDate(null, "month"); },
                ".dhx_calendar-action__show-year": function () { return _this.showDate(null, "year"); },
                ".dhx_calendar-action__next": function () {
                    var newDate;
                    switch (_this._currentViewMode) {
                        case "calendar":
                            newDate = DateHelper_1.DateHelper.addMonth(_this._currentDate, 1);
                            break;
                        case "month":
                            newDate = DateHelper_1.DateHelper.addYear(_this._currentDate, 1);
                            break;
                        case "year":
                            newDate = DateHelper_1.DateHelper.addYear(_this._currentDate, 12);
                    }
                    _this.showDate(newDate);
                },
                ".dhx_calendar-action__prev": function () {
                    var newDate;
                    switch (_this._currentViewMode) {
                        case "calendar":
                            newDate = DateHelper_1.DateHelper.addMonth(_this._currentDate, -1);
                            break;
                        case "month":
                            newDate = DateHelper_1.DateHelper.addYear(_this._currentDate, -1);
                            break;
                        case "year":
                            newDate = DateHelper_1.DateHelper.addYear(_this._currentDate, -12);
                    }
                    _this.showDate(newDate);
                },
                ".dhx_calendar-action__show-timepicker": function () {
                    _this._currentViewMode = "timepicker";
                    _this.paint();
                },
            },
            onmouseover: {
                ".dhx_calendar-day": function (event, node) {
                    _this.events.fire(types_1.CalendarEvents.dateMouseOver, [new Date(node.attrs._date), event]);
                    _this.events.fire(types_1.CalendarEvents.dateHover, [new Date(node.attrs._date), event]); // TODO: remove suite_7.0
                },
            },
        };
    };
    Calendar.prototype._getData = function (date) {
        var _this = this;
        var firstDay = this.config.weekStart === "monday" ? 1 : 0;
        var first = DateHelper_1.DateHelper.weekStart(DateHelper_1.DateHelper.monthStart(date), firstDay);
        var data = [];
        var weeksCount = 6;
        var currentDate = first;
        while (weeksCount--) {
            var currentWeek = DateHelper_1.DateHelper.getWeekNumber(currentDate);
            var disabledDays = 0;
            var daysCount = 7;
            var days = [];
            var _loop_1 = function () {
                var isDateWeekEnd = DateHelper_1.DateHelper.isWeekEnd(currentDate);
                var isCurrentMonth = date.getMonth() === currentDate.getMonth();
                var isBlocked = this_1.config.disabledDates && this_1.config.disabledDates(currentDate);
                var css = [];
                if (this_1.config.range && this_1._selected[0] && this_1._selected[1]) {
                    var getRangeClass_1 = function () {
                        if (DateHelper_1.DateHelper.isSameDay(_this._selected[0], _this._selected[1])) {
                            return null;
                        }
                        return "dhx_calendar-day--in-range";
                    };
                    var rangeMark = function () {
                        if (_this._selected[0] && _this._selected[1]) {
                            var firstDate = DateHelper_1.DateHelper.dayStart(_this._selected[0]);
                            var lastDate = DateHelper_1.DateHelper.dayStart(_this._selected[1]);
                            return currentDate >= firstDate && currentDate <= lastDate && getRangeClass_1();
                        }
                    };
                    this_1.config.$rangeMark = rangeMark;
                }
                if (isDateWeekEnd && isCurrentMonth) {
                    css.push("dhx_calendar-day--weekend");
                }
                if (!isCurrentMonth) {
                    if (this_1.config.thisMonthOnly) {
                        disabledDays++;
                        css.push("dhx_calendar-day--hidden");
                    }
                    else {
                        css.push("dhx_calendar-day--muffled");
                    }
                }
                if (this_1.config.mark) {
                    var markedCss = this_1.config.mark(currentDate);
                    if (markedCss) {
                        css.push(markedCss);
                    }
                }
                if (this_1.config.$rangeMark) {
                    var rangeMark = this_1.config.$rangeMark(currentDate);
                    if (rangeMark) {
                        css.push(rangeMark);
                    }
                }
                if (isBlocked) {
                    if (isDateWeekEnd) {
                        css.push("dhx_calendar-day--weekend-disabled");
                    }
                    else {
                        css.push("dhx_calendar-day--disabled");
                    }
                }
                this_1._selected.forEach(function (selected, index) {
                    if (selected && DateHelper_1.DateHelper.isSameDay(selected, currentDate)) {
                        var dayCss = "dhx_calendar-day--selected";
                        if (_this.config.range) {
                            dayCss += " dhx_calendar-day--selected-" + (index === 0 ? "first " : "last");
                        }
                        css.push(dayCss);
                    }
                });
                days.push({
                    date: currentDate,
                    day: currentDate.getDate(),
                    css: css.join(" "),
                });
                currentDate = DateHelper_1.DateHelper.addDay(currentDate);
            };
            var this_1 = this;
            while (daysCount--) {
                _loop_1();
            }
            data.push({
                weekNumber: currentWeek,
                days: days,
                disabledWeekNumber: disabledDays === 7,
            });
        }
        return data;
    };
    Calendar.prototype._drawCalendar = function () {
        var date = this._currentDate;
        var _a = this.config, weekStart = _a.weekStart, thisMonthOnly = _a.thisMonthOnly, css = _a.css, timePicker = _a.timePicker, width = _a.width;
        var weekDays = weekStart === "monday" ? __spreadArrays(en_1.default.daysShort.slice(1), [en_1.default.daysShort[0]]) : en_1.default.daysShort;
        var weekDaysHeader = weekDays.map(function (day) { return dom_1.el(".dhx_calendar-weekday", day); });
        var data = this._getData(date);
        var content = [];
        var weekNumbers = [];
        var weekNumbersWrapper;
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var week = data_1[_i];
            var weekRow = week.days.map(function (item) {
                return dom_1.el("div.dhx_calendar-day", {
                    class: item.css,
                    _date: item.date,
                    tabIndex: 1,
                }, item.day);
            });
            if (this.config.weekNumbers && !(week.disabledWeekNumber && thisMonthOnly)) {
                weekNumbers.push(dom_1.el("div", {
                    class: "dhx_calendar-week-number",
                }, week.weekNumber));
            }
            content = content.concat(weekRow);
        }
        if (this.config.weekNumbers) {
            weekNumbersWrapper = dom_1.el(".dhx_calendar__week-numbers", weekNumbers);
        }
        var widgetClass = "dhx_calendar dhx_widget" +
            (css ? " " + css : "") +
            (timePicker ? " dhx_calendar--with_timepicker" : "") +
            (this.config.weekNumbers ? " dhx_calendar--with_week-numbers" : "");
        return dom_1.el("div", __assign({ class: widgetClass, style: {
                width: this.config.weekNumbers ? "calc(" + width + " + 48px )" : width,
            } }, this._handlers), [
            dom_1.el(".dhx_calendar__wrapper", [
                this._drawHeader(dom_1.el("button.dhx_calendar-action__show-month.dhx_button.dhx_button--view_link.dhx_button--size_small.dhx_button--color_secondary.dhx_button--circle", en_1.default.months[date.getMonth()] + " " + date.getFullYear())),
                this.config.weekNumbers &&
                    dom_1.el(".dhx_calendar__dates-wrapper", [
                        dom_1.el(".dhx_calendar__weekdays", weekDaysHeader),
                        dom_1.el(".dhx_calendar__days", content),
                        weekNumbersWrapper,
                    ]),
                !this.config.weekNumbers && dom_1.el(".dhx_calendar__weekdays", weekDaysHeader),
                !this.config.weekNumbers && dom_1.el(".dhx_calendar__days", content),
                timePicker
                    ? dom_1.el(".dhx_timepicker__actions", [
                        dom_1.el("button.dhx_calendar__timepicker-button." +
                            "dhx_button.dhx_button--view_link.dhx_button--size_small.dhx_button--color_secondary.dhx_button--width_full.dhx_button--circle.dhx_calendar-action__show-timepicker", [
                            dom_1.el("span.dhx_button__icon.dxi.dxi-clock-outline"),
                            dom_1.el("span.dhx_button__text", this._time),
                        ]),
                    ])
                    : null,
            ]),
        ]);
    };
    Calendar.prototype._drawMonthSelector = function () {
        var date = this._currentDate;
        var currentMonth = date.getMonth();
        var currentYear = this._getSelected() ? this._getSelected().getFullYear() : null;
        var _a = this.config, css = _a.css, timePicker = _a.timePicker, weekNumbers = _a.weekNumbers, width = _a.width, mode = _a.mode;
        var widgetClass = "dhx_calendar dhx_widget" +
            (css ? " " + css : "") +
            (timePicker ? " dhx_calendar--with_timepicker" : "") +
            (weekNumbers ? " dhx_calendar--with_week-numbers" : "");
        return dom_1.el("div", __assign({ class: widgetClass, style: {
                width: weekNumbers ? "calc(" + width + " + 48px)" : width,
            } }, this._handlers), [
            dom_1.el(".dhx_calendar__wrapper", [
                this._drawHeader(dom_1.el("button.dhx_calendar-action__show-year.dhx_button.dhx_button--view_link.dhx_button--size_small.dhx_button--color_secondary.dhx_button--circle", date.getFullYear())),
                dom_1.el(".dhx_calendar__months", en_1.default.monthsShort.map(function (item, i) {
                    return dom_1.el("div", {
                        class: "dhx_calendar-month" +
                            (currentMonth === i && currentYear === date.getFullYear()
                                ? " dhx_calendar-month--selected"
                                : ""),
                        tabIndex: 1,
                        _date: i,
                    }, item);
                })),
                mode !== "month"
                    ? dom_1.el(".dhx_calendar__actions", [
                        dom_1.el("button.dhx_button.dhx_button--color_primary.dhx_button--view_link.dhx_button--size_small.dhx_button--width_full.dhx_button--circle.dhx_calendar-action__cancel", en_1.default.cancel),
                    ])
                    : null,
            ]),
        ]);
    };
    Calendar.prototype._drawYearSelector = function () {
        var _this = this;
        var date = this._currentDate;
        var yearsDiapason = DateHelper_1.DateHelper.getTwelweYears(date);
        var _a = this.config, css = _a.css, timePicker = _a.timePicker, weekNumbers = _a.weekNumbers, width = _a.width, mode = _a.mode;
        var widgetClass = "dhx_calendar dhx_widget" +
            (css ? " " + css : "") +
            (timePicker ? " dhx_calendar--with_timepicker" : "") +
            (weekNumbers ? " dhx_calendar--with_week-numbers" : "");
        return dom_1.el("div", __assign({ class: widgetClass, style: { width: weekNumbers ? "calc(" + width + " + 48px)" : width } }, this._handlers), [
            dom_1.el(".dhx_calendar__wrapper", [
                this._drawHeader(dom_1.el("button.dhx_button.dhx_button--view_link.dhx_button--size_small.dhx_button--color_secondary.dhx_button--circle", yearsDiapason[0] + "-" + yearsDiapason[yearsDiapason.length - 1])),
                dom_1.el(".dhx_calendar__years", yearsDiapason.map(function (item) {
                    return dom_1.el("div", {
                        class: "dhx_calendar-year" +
                            (_this._getSelected() && item === _this._getSelected().getFullYear()
                                ? " dhx_calendar-year--selected"
                                : ""),
                        _date: item,
                        tabIndex: 1,
                    }, item);
                })),
                mode !== "year" && mode !== "month"
                    ? dom_1.el(".dhx_calendar__actions", [
                        dom_1.el("button.dhx_button.dhx_button--color_primary.dhx_button--view_link.dhx_button--size_small.dhx_button--width_full.dhx_button--circle.dhx_calendar-action__cancel", en_1.default.cancel),
                    ])
                    : null,
            ]),
        ]);
    };
    Calendar.prototype._drawHeader = function (actionContent) {
        return dom_1.el(".dhx_calendar__navigation", [
            dom_1.el("button.dhx_calendar-navigation__button.dhx_calendar-action__prev" +
                helper_1.linkButtonClasses +
                ".dhx_button--icon.dhx_button--circle", [dom_1.el(".dhx_button__icon.dxi.dxi-chevron-left")]),
            actionContent,
            dom_1.el("button.dhx_calendar-navigation__button.dhx_calendar-action__next" +
                helper_1.linkButtonClasses +
                ".dhx_button--icon.dhx_button--circle", [dom_1.el(".dhx_button__icon.dxi.dxi-chevron-right")]),
        ]);
    };
    Calendar.prototype._drawTimepicker = function () {
        var _a = this.config, css = _a.css, weekNumbers = _a.weekNumbers, width = _a.width;
        return dom_1.el(".dhx_widget.dhx-calendar", {
            class: css ? " " + css : "",
            style: { width: weekNumbers ? "calc(" + width + " + 48px)" : width },
        }, [dom_1.inject(this._timepicker.getRootView())]);
    };
    return Calendar;
}(view_1.View));
exports.Calendar = Calendar;


/***/ }),

/***/ "../ts-calendar/sources/DateFormatter.ts":
/*!***********************************************!*\
  !*** ../ts-calendar/sources/DateFormatter.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-calendar/sources/locales/en.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
/*
    %d	day as a number with leading zero, 01..31
    %j	day as a number, 1..31
    %D	short name of the day, Su Mo Tu...
    %l	full name of the day, Sunday Monday Tuesday...
    %m	month as a number with leading zero, 01..12
    %n	month as a number, 1..12
    %M	short name of the month, Jan Feb Mar...
    %F	full name of the month, January February March...
    %y	year as a number, 2 digits
    %Y	year as a number, 4 digits
    %h	hours 12-format with leading zero, 01..12)
    %g	hours 12-format, 1..12)
    %H	hours 24-format with leading zero, 01..24
    %G	hours 24-format, 1..24
    %i	minutes with leading zero, 01..59
    %s	seconds with leading zero, 01..59
    %a	am or pm
    %A	AM or PM
    %u	milliseconds
    %P	timezone offset
*/
var formatters = {
    "%d": function (date) {
        var day = date.getDate();
        return day < 10 ? "0" + day : day;
    },
    "%j": function (date) { return date.getDate(); },
    "%l": function (date) {
        return en_1.default.days[date.getDay()];
    },
    "%D": function (date) {
        return en_1.default.daysShort[date.getDay()];
    },
    "%m": function (date) {
        var month = date.getMonth() + 1;
        return month < 10 ? "0" + month : month;
    },
    "%n": function (date) { return date.getMonth() + 1; },
    "%M": function (date) { return en_1.default.monthsShort[date.getMonth()]; },
    "%F": function (date) { return en_1.default.months[date.getMonth()]; },
    "%y": function (date) {
        return date
            .getFullYear()
            .toString()
            .slice(2);
    },
    "%Y": function (date) { return date.getFullYear(); },
    "%h": function (date) {
        var hours = date.getHours() % 12;
        if (hours === 0) {
            hours = 12;
        }
        return hours < 10 ? "0" + hours : hours;
    },
    "%g": function (date) {
        var hours = date.getHours() % 12;
        if (hours === 0) {
            hours = 12;
        }
        return hours;
    },
    "%H": function (date) {
        var hours = date.getHours();
        return hours < 10 ? "0" + hours : hours;
    },
    "%G": function (date) { return date.getHours(); },
    "%i": function (date) {
        var minutes = date.getMinutes();
        return minutes < 10 ? "0" + minutes : minutes;
    },
    "%s": function (date) {
        var seconds = date.getSeconds();
        return seconds < 10 ? "0" + seconds : seconds;
    },
    "%a": function (date) {
        return date.getHours() >= 12 ? "pm" : "am";
    },
    "%A": function (date) {
        return date.getHours() >= 12 ? "PM" : "AM";
    },
    "%u": function (date) { return date.getMilliseconds(); },
};
var setFormatters = {
    "%d": function (date, value) {
        var check = /(^([0-9][0-9])$)/i.test(value);
        check ? date.setDate(Number(value)) : date.setDate(Number(1));
    },
    "%j": function (date, value) {
        var check = /(^([0-9]?[0-9])$)/i.test(value);
        check ? date.setDate(Number(value)) : date.setDate(Number(1));
    },
    "%m": function (date, value) {
        var check = /(^([0-9][0-9])$)/i.test(value);
        check ? date.setMonth(Number(value) - 1) : date.setMonth(Number(0));
    },
    "%n": function (date, value) {
        var check = /(^([0-9]?[0-9])$)/i.test(value);
        check ? date.setMonth(Number(value) - 1) : date.setMonth(Number(0));
    },
    "%M": function (date, value) {
        var index = core_1.findIndex(en_1.default.monthsShort, function (v) { return v === value; });
        index === -1 ? date.setMonth(0) : date.setMonth(index);
    },
    "%F": function (date, value) {
        var index = core_1.findIndex(en_1.default.months, function (v) { return v === value; });
        index === -1 ? date.setMonth(0) : date.setMonth(index);
    },
    "%y": function (date, value) {
        var check = /(^([0-9][0-9])$)/i.test(value);
        check ? date.setFullYear(Number("20" + value)) : date.setFullYear(Number("2000"));
    },
    "%Y": function (date, value) {
        var check = /(^([0-9][0-9][0-9][0-9])$)/i.test(value);
        check ? date.setFullYear(Number(value)) : date.setFullYear(Number("2000"));
    },
    "%h": function (date, value, dateFormat) {
        var check = /(^0[1-9]|1[0-2]$)/i.test(value);
        (check && dateFormat === "pm") || dateFormat === "PM"
            ? date.setHours(Number(value))
            : date.setHours(Number(0));
    },
    "%g": function (date, value, dateFormat) {
        var check = /(^[1-9]$)|(^0[1-9]|1[0-2]$)/i.test(value);
        (check && dateFormat === "pm") || dateFormat === "PM"
            ? date.setHours(Number(value))
            : date.setHours(Number(0));
    },
    "%H": function (date, value) {
        var check = /(^[0-2][0-9]$)/i.test(value);
        check ? date.setHours(Number(value)) : date.setHours(Number(0));
    },
    "%G": function (date, value) {
        var check = /(^[1-9][0-9]?$)/i.test(value);
        check ? date.setHours(Number(value)) : date.setHours(Number(0));
    },
    "%i": function (date, value) {
        var check = /(^([0-5][0-9])$)/i.test(value);
        check ? date.setMinutes(Number(value)) : date.setMinutes(Number(0));
    },
    "%s": function (date, value) {
        var check = /(^([0-5][0-9])$)/i.test(value);
        check ? date.setSeconds(Number(value)) : date.setSeconds(Number(0));
    },
    "%a": function (date, value) {
        if (value === "pm") {
            date.setHours(date.getHours() + 12);
        }
    },
    "%A": function (date, value) {
        if (value === "PM") {
            date.setHours(date.getHours() + 12);
        }
    },
};
var TokenType;
(function (TokenType) {
    TokenType[TokenType["separator"] = 0] = "separator";
    TokenType[TokenType["datePart"] = 1] = "datePart";
})(TokenType || (TokenType = {}));
function tokenizeFormat(format) {
    var tokens = [];
    var currentSeparator = "";
    for (var i = 0; i < format.length; i++) {
        if (format[i] === "%") {
            if (currentSeparator.length > 0) {
                tokens.push({
                    type: TokenType.separator,
                    value: currentSeparator,
                });
                currentSeparator = "";
            }
            tokens.push({
                type: TokenType.datePart,
                value: format[i] + format[i + 1],
            });
            i++;
        }
        else {
            currentSeparator += format[i];
        }
    }
    if (currentSeparator.length > 0) {
        tokens.push({
            type: TokenType.separator,
            value: currentSeparator,
        });
    }
    return tokens;
}
function getFormatedDate(format, date) {
    return tokenizeFormat(format).reduce(function (res, token) {
        if (token.type === TokenType.separator) {
            return res + token.value;
        }
        else {
            if (!formatters[token.value]) {
                return res;
            }
            return res + formatters[token.value](date);
        }
    }, "");
}
exports.getFormatedDate = getFormatedDate;
function stringToDate(str, format, validate) {
    if (typeof str !== "string") {
        return;
    }
    var tokens = tokenizeFormat(format);
    var dateParts = [];
    var index = 0;
    var formatter = null;
    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
        var token = tokens_1[_i];
        if (token.type === TokenType.separator) {
            var sepratorIndex = str.indexOf(token.value, index);
            if (sepratorIndex === -1) {
                if (validate) {
                    return false;
                }
                throw new Error("Incorrect date, see docs: https://docs.dhtmlx.com/suite/calendar__api__calendar_dateformat_config.html");
            }
            if (formatter) {
                dateParts.push({
                    formatter: formatter,
                    value: str.slice(index, sepratorIndex),
                });
                formatter = null;
            }
            index = sepratorIndex + token.value.length;
        }
        else if (token.type === TokenType.datePart) {
            formatter = token.value;
        }
    }
    if (formatter) {
        dateParts.push({
            formatter: formatter,
            value: str.slice(index),
        });
    }
    dateParts.reverse();
    var dateFormat;
    for (var _a = 0, dateParts_1 = dateParts; _a < dateParts_1.length; _a++) {
        var datePart = dateParts_1[_a];
        if (datePart.formatter === "%A" || datePart.formatter === "%a") {
            dateFormat = datePart.value;
        }
    }
    var date = new Date(0);
    for (var _b = 0, dateParts_2 = dateParts; _b < dateParts_2.length; _b++) {
        var datePart = dateParts_2[_b];
        if (setFormatters[datePart.formatter]) {
            setFormatters[datePart.formatter](date, datePart.value, dateFormat);
        }
    }
    return validate ? true : date;
}
exports.stringToDate = stringToDate;


/***/ }),

/***/ "../ts-calendar/sources/DateHelper.ts":
/*!********************************************!*\
  !*** ../ts-calendar/sources/DateHelper.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var DateFormatter_1 = __webpack_require__(/*! ./DateFormatter */ "../ts-calendar/sources/DateFormatter.ts");
var DateHelper = /** @class */ (function () {
    function DateHelper() {
    }
    DateHelper.copy = function (d) {
        return new Date(d);
    };
    DateHelper.fromYear = function (year) {
        return new Date(year, 0, 1);
    };
    DateHelper.fromYearAndMonth = function (year, month) {
        return new Date(year, month, 1);
    };
    DateHelper.weekStart = function (d, firstWeekday) {
        var diff = (d.getDay() + 7 - firstWeekday) % 7;
        return new Date(d.getFullYear(), d.getMonth(), d.getDate() - diff);
    };
    DateHelper.monthStart = function (d) {
        return new Date(d.getFullYear(), d.getMonth(), 1);
    };
    DateHelper.yearStart = function (d) {
        return new Date(d.getFullYear(), 0, 1);
    };
    DateHelper.dayStart = function (d) {
        return new Date(d.getFullYear(), d.getMonth(), d.getDate());
    };
    DateHelper.addDay = function (d, count) {
        if (count === void 0) { count = 1; }
        return new Date(d.getFullYear(), d.getMonth(), d.getDate() + count);
    };
    DateHelper.addMonth = function (d, count) {
        if (count === void 0) { count = 1; }
        return new Date(d.getFullYear(), d.getMonth() + count);
    };
    DateHelper.addYear = function (d, count) {
        if (count === void 0) { count = 1; }
        return new Date(d.getFullYear() + count, d.getMonth());
    };
    DateHelper.withHoursAndMinutes = function (d, hours, minutes, dateFormat) {
        if (dateFormat === undefined || (!dateFormat && hours === 12) || (dateFormat && hours !== 12)) {
            return new Date(d.getFullYear(), d.getMonth(), d.getDate(), hours, minutes);
        }
        else if (dateFormat && hours === 12) {
            return new Date(d.getFullYear(), d.getMonth(), d.getDate(), 0, minutes);
        }
        else {
            return new Date(d.getFullYear(), d.getMonth(), d.getDate(), hours + 12, minutes);
        }
    };
    DateHelper.setMonth = function (d, month) {
        d.setMonth(month);
    };
    DateHelper.setYear = function (d, year) {
        d.setFullYear(year);
    };
    DateHelper.mergeHoursAndMinutes = function (source, target) {
        return new Date(source.getFullYear(), source.getMonth(), source.getDate(), target.getHours(), target.getMinutes());
    };
    DateHelper.isWeekEnd = function (d) {
        return d.getDay() === 0 || d.getDay() === 6;
    };
    DateHelper.getTwelweYears = function (d) {
        var y = d.getFullYear();
        var firstYear = y - (y % 12);
        return core_1.range(firstYear, firstYear + 11);
    };
    DateHelper.getWeekNumber = function (d) {
        if (d.getDay() !== 6) {
            d = DateHelper.addDay(d, 6 - d.getDay());
        }
        var dayMS = 24 * 60 * 60 * 1000;
        var ordinal = (d.valueOf() - DateHelper.yearStart(d).valueOf()) / dayMS;
        return Math.floor((ordinal - d.getDay() + 10) / 7);
    };
    DateHelper.isSameDay = function (d1, d2) {
        return (d1.getFullYear() === d2.getFullYear() &&
            d1.getMonth() === d2.getMonth() &&
            d1.getDate() === d2.getDate());
    };
    DateHelper.toDateObject = function (date, dateFormat) {
        if (typeof date === "string") {
            return DateFormatter_1.stringToDate(date, dateFormat);
        }
        else {
            return new Date(date);
        }
    };
    DateHelper.nullTimestampDate = new Date(0);
    return DateHelper;
}());
exports.DateHelper = DateHelper;


/***/ }),

/***/ "../ts-calendar/sources/helper.ts":
/*!****************************************!*\
  !*** ../ts-calendar/sources/helper.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.linkButtonClasses = ".dhx_button.dhx_button--view_link.dhx_button--icon.dhx_button--size_medium.dhx_button--color_secondary";


/***/ }),

/***/ "../ts-calendar/sources/locales/en.ts":
/*!********************************************!*\
  !*** ../ts-calendar/sources/locales/en.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var locale = {
    monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    months: [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
    ],
    daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Monday"],
    cancel: "Cancel",
};
exports.default = locale;


/***/ }),

/***/ "../ts-calendar/sources/types.ts":
/*!***************************************!*\
  !*** ../ts-calendar/sources/types.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CalendarEvents;
(function (CalendarEvents) {
    CalendarEvents["change"] = "change";
    CalendarEvents["beforeChange"] = "beforechange";
    CalendarEvents["modeChange"] = "modeChange";
    CalendarEvents["monthSelected"] = "monthSelected";
    CalendarEvents["yearSelected"] = "yearSelected";
    CalendarEvents["cancelClick"] = "cancelClick";
    CalendarEvents["dateMouseOver"] = "dateMouseOver";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    CalendarEvents["dateHover"] = "dateHover";
})(CalendarEvents = exports.CalendarEvents || (exports.CalendarEvents = {}));


/***/ }),

/***/ "../ts-chart/index.ts":
/*!****************************!*\
  !*** ../ts-chart/index.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Chart */ "../ts-chart/sources/Chart.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-chart/sources/types.ts"));


/***/ }),

/***/ "../ts-chart/sources/AxisCreator.ts":
/*!******************************************!*\
  !*** ../ts-chart/sources/AxisCreator.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(/*! ./helpers/common */ "../ts-chart/sources/helpers/common.ts");
var allowedBases = [1, 2, 3, 5, 10];
var AxisCreator = /** @class */ (function () {
    function AxisCreator(_data, conf) {
        if (conf === void 0) { conf = {}; }
        this._data = _data;
        var defaults = {
            min: Math.min.apply(Math, this._data),
            max: Math.max.apply(Math, this._data),
            maxTicks: this._data.length < 20 ? this._data.length : 20,
        };
        if (defaults.max === defaults.min) {
            if (defaults.max > 0) {
                defaults = __assign(__assign({}, defaults), { min: 0 });
            }
            if (defaults.max < 0) {
                defaults = __assign(__assign({}, defaults), { max: 0, min: defaults.min - 1 });
            }
        }
        this.config = __assign(__assign({}, defaults), conf);
        if (this.config.padding) {
            this._addPadding();
        }
    }
    AxisCreator.prototype.getScale = function () {
        var steps;
        if (this.config.log) {
            steps = this._logSteps();
        }
        else {
            var step = this._getStep();
            steps = this._calculateSteps(step);
        }
        return {
            min: steps[0],
            max: steps[steps.length - 1],
            steps: steps,
        };
    };
    AxisCreator.prototype._getStep = function () {
        var ticks = this.config.maxTicks;
        var dif = this.config.max - this.config.min;
        var exponent = Math.floor(common_1.log10(dif / ticks));
        var step = Math.pow(10, exponent);
        var rawBase = dif / step / ticks;
        var nearestBase = allowedBases[__spreadArrays(allowedBases, [rawBase]).sort(function (a, b) { return a - b; }).indexOf(rawBase)];
        return nearestBase * step;
    };
    AxisCreator.prototype._calculateSteps = function (step) {
        var firstIndex = Math.floor(this.config.min / step);
        var lastIndex = Math.ceil(this.config.max / step);
        var steps = [];
        for (var i = firstIndex; i <= lastIndex; i++) {
            var currentStep = step * i;
            if (Math.floor(currentStep) !== currentStep) {
                currentStep = parseFloat(currentStep.toFixed(8));
            }
            steps.push(currentStep);
        }
        return steps;
    };
    AxisCreator.prototype._logSteps = function () {
        var steps = [];
        if (this.config.min < 0) {
            var negativeExponent = Math.ceil(common_1.log10(-this.config.min));
            for (var i = negativeExponent; i > 0; i--) {
                steps.push(-(Math.pow(10, i)));
            }
            steps.push(0);
        }
        if (this.config.max > 0) {
            var positiveExponent = Math.ceil(common_1.log10(this.config.max));
            for (var i = 1; i <= positiveExponent; i++) {
                steps.push(Math.pow(10, i));
            }
        }
        return steps;
    };
    AxisCreator.prototype._addPadding = function () {
        this.config.min -= this.config.padding;
    };
    return AxisCreator;
}());
exports.AxisCreator = AxisCreator;


/***/ }),

/***/ "../ts-chart/sources/Chart.ts":
/*!************************************!*\
  !*** ../ts-chart/sources/Chart.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var ComposeLayer_1 = __webpack_require__(/*! ./ComposeLayer */ "../ts-chart/sources/ComposeLayer.ts");
var Legend_1 = __webpack_require__(/*! ./Legend */ "../ts-chart/sources/Legend.ts");
var Tooltip_1 = __webpack_require__(/*! ./Tooltip */ "../ts-chart/sources/Tooltip.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-chart/sources/types.ts");
var index_1 = __webpack_require__(/*! ./scales/index */ "../ts-chart/sources/scales/index.ts");
var index_2 = __webpack_require__(/*! ./series/index */ "../ts-chart/sources/series/index.ts");
var Stacker_1 = __webpack_require__(/*! ./series/Stacker */ "../ts-chart/sources/series/Stacker.ts");
var common_1 = __webpack_require__(/*! ./helpers/common */ "../ts-chart/sources/helpers/common.ts");
var Chart = /** @class */ (function (_super) {
    __extends(Chart, _super);
    function Chart(node, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, null, config) || this;
        // using zero values ensure that widget will not attempt to render self in the hidden state
        _this._width = 0;
        _this._height = 0;
        _this._left = 0;
        _this._top = 0;
        var dataConfig = {};
        if (config.maxPoints) {
            dataConfig.approximate = {
                value: config.series.map(function (a) { return a.value; }),
                maxNum: config.maxPoints,
            };
        }
        if (Array.isArray(config.data)) {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.DataCollection(dataConfig, _this.events);
            _this.data.parse(config.data);
        }
        else if (config.data && config.data.events) {
            _this.data = config.data;
            _this.events = _this.data.events;
            _this.events.context = _this;
        }
        else {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.DataCollection(dataConfig, _this.events);
        }
        _this._globalHTMLHandlers = {
            onmousemove: function (e) {
                var _a = _this._layers.getSizes(), left = _a.left, top = _a.top, bottom = _a.bottom, right = _a.right;
                var pageX = e.pageX, pageY = e.pageY;
                var rects = _this.getRootView().node.el.getBoundingClientRect();
                _this._left = rects.left + window.pageXOffset;
                _this._top = rects.top + window.pageYOffset;
                var x = pageX - left - _this._left;
                var y = pageY - top - _this._top;
                if (x >= 0 && x <= _this._width - right - left && y >= 0 && y <= _this._height - bottom - top) {
                    _this.events.fire(types_1.ChartEvents.chartMouseMove, [x, y, _this._left + left, _this._top + top]);
                }
                else {
                    _this.events.fire(types_1.ChartEvents.chartMouseLeave);
                }
            },
            onmouseleave: function () { return _this.events.fire(types_1.ChartEvents.chartMouseLeave); },
        };
        _this._layers = new ComposeLayer_1.ComposeLayer();
        _this.setConfig(config);
        _this._initEvents();
        var render = function (vm, obj) {
            if (!_this.data.getLength()) {
                return dom_1.el("div");
            }
            var content = [
                dom_1.resizer(function (x, y) {
                    _this._width = x;
                    _this._height = y || 400; // if height is not provided, use default value
                    var view = _this.getRootView();
                    if (view && view.node && view.node.el) {
                        var rects = view.node.el.getBoundingClientRect();
                        _this._left = rects.left + window.pageXOffset;
                        _this._top = rects.top + window.pageYOffset;
                    }
                    _this.events.fire(types_1.ChartEvents.resize, [
                        {
                            width: _this._width,
                            height: _this._height,
                        },
                    ]);
                    _this.paint();
                }),
            ];
            if (_this._width && _this._height) {
                content.push(_this._layers.toVDOM(_this._width, _this._height));
            }
            return dom_1.el(".dhx_widget.dhx_chart", {
                class: config.css ? config.css : "",
                onmousemove: _this._globalHTMLHandlers.onmousemove,
                onmouseleave: _this._globalHTMLHandlers.onmouseleave,
            }, content);
        };
        _this.mount(node, dom_1.create({ render: render }));
        return _this;
    }
    Chart.prototype.getSeries = function (key) {
        return this._series[key];
    };
    Chart.prototype.eachSeries = function (handler) {
        var result = [];
        for (var key in this._series) {
            result.push(handler.call(this, this._series[key]));
        }
        return result;
    };
    Chart.prototype.destructor = function () {
        this._tooltip.destructor();
        this.events.clear();
        this.unmount();
    };
    Chart.prototype.setConfig = function (config) {
        var _this = this;
        this.config = config;
        this._layers.clear();
        this._series = {};
        this._scales = {};
        var min;
        // let baseLine;
        if (config.scales) {
            for (var key in config.scales) {
                var scale = __assign({}, config.scales[key]);
                if (config.scales[key].min !== undefined) {
                    min = config.scales[key].min;
                }
                scale.type = scale.type || this._detectScaleType(scale, key);
                if (config.scales.radial && key !== "radial") {
                    scale.hidden = true;
                }
                this._setScale(scale, key);
            }
        }
        var stack = new Stacker_1.default();
        this._layers.add(stack);
        config.series.forEach(function (cfg) {
            if (cfg.baseLine !== undefined && cfg.baseLine < min) {
                cfg.baseLine = undefined;
            }
            var serieConfig = __assign({}, cfg);
            serieConfig.type = serieConfig.type || config.type;
            var chartFactory = index_2.default[serieConfig.type];
            if (serieConfig.barWidth || _this.config.barWidth) {
                serieConfig.barWidth = serieConfig.barWidth || _this.config.barWidth;
            }
            var chart = new chartFactory(_this.data, serieConfig, _this.events);
            var scales = common_1.getScales(config.scales);
            var chartScales = scales.length > 1 && scales[0] !== "radial"
                ? scales
                : scales[0] === "radial"
                    ? scales
                    : ["bottom", "left"];
            chartScales.forEach(function (type) {
                var scale = _this._scales[type];
                if (!scale) {
                    return;
                }
                chart.addScale(type, scale);
                if (!serieConfig.stacked) {
                    scale.add(chart);
                }
                else {
                    scale.add(stack);
                }
            });
            _this._series[chart.id] = chart;
            if (serieConfig.stacked) {
                stack.add(chart);
            }
            else {
                _this._layers.add(chart);
            }
        });
        if (config.legend) {
            var legendConfig = __assign({}, config.legend);
            if (legendConfig.series) {
                legendConfig.$seriesInfo = legendConfig.series.map(function (id) { return _this._series[id]; });
            }
            var legend = new Legend_1.Legend(this.data, legendConfig, this.events);
            this._layers.add(legend);
        }
        this._tooltip = new Tooltip_1.Tooltip(document.body, { chart: this });
        this.paint();
    };
    Chart.prototype._setScale = function (config, position) {
        var scale = new index_1.default[config.type](this.data, config, position);
        if (scale.config.grid && scale.config.type !== "radial") {
            this._layers.add(scale.scaleGrid());
        }
        this._layers.add(scale);
        this._scales[position] = scale;
    };
    Chart.prototype._detectScaleType = function (config, key) {
        if (key === "radial") {
            return key;
        }
        if (config.text) {
            return "text";
        }
        return "numeric";
    };
    Chart.prototype._initEvents = function () {
        var _this = this;
        // hide/show series on legend click
        this.events.on(types_1.ChartEvents.toggleSeries, function (id, pieLike) {
            if (pieLike) {
                var serie = _this._series[Object.keys(_this._series)[0]];
                if (serie) {
                    serie.toggle(id);
                    _this.paint();
                }
            }
            else if (_this._series[id]) {
                _this._series[id].toggle();
                _this.paint();
            }
        }, this);
        // repaint on data change
        this.events.on(ts_data_1.DataEvents.change, function () { return _this.paint(); });
    };
    return Chart;
}(view_1.View));
exports.Chart = Chart;


/***/ }),

/***/ "../ts-chart/sources/ComposeLayer.ts":
/*!*******************************************!*\
  !*** ../ts-chart/sources/ComposeLayer.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var Filters_1 = __webpack_require__(/*! ./Filters */ "../ts-chart/sources/Filters.ts");
var ComposeLayer = /** @class */ (function () {
    function ComposeLayer() {
        this._data = [];
        this._sizes = { left: 20, right: 20, top: 10, bottom: 10 };
    }
    ComposeLayer.prototype.add = function (obj) {
        this._data.push(obj);
    };
    ComposeLayer.prototype.clear = function () {
        this._data.forEach(function (item) { return item.destructor && item.destructor(); });
        this._data = [];
    };
    ComposeLayer.prototype.getSizes = function () {
        return this._sizes;
    };
    ComposeLayer.prototype.toVDOM = function (width, height) {
        var sizes = { left: 20, right: 20, top: 10, bottom: 10 };
        // eslint-disable-next-line @typescript-eslint/unbound-method
        var toPaint = this._data.filter(function (l) { return !l.dataReady || l.dataReady().length; });
        // eslint-disable-next-line @typescript-eslint/unbound-method
        this._data.forEach(function (l) { return !l.scaleReady || l.scaleReady(sizes); });
        var shift = 0;
        var shiftCount = 0;
        toPaint.forEach(function (item) {
            if (item.seriesShift) {
                shift += item.seriesShift();
                shiftCount++;
            }
        });
        var step = shift / shiftCount;
        shift = shiftCount ? (step - shift) / 2 : 0;
        toPaint.forEach(function (item) {
            if (item.seriesShift) {
                item.seriesShift(shift);
                shift += step;
            }
        });
        this._sizes = sizes;
        var contentWidth = width - sizes.left - sizes.right;
        var contentHeight = height - sizes.top - sizes.bottom;
        var chartsContent = dom_1.sv("g", {
            transform: "translate(" + sizes.left + ", " + sizes.top + ")",
        }, __spreadArrays([
            dom_1.sv("rect.dhx_chart-graph_area", {
                width: contentWidth > 0 ? contentWidth : 0,
                height: contentHeight > 0 ? contentHeight : 0,
                fill: "transparent",
            })
        ], toPaint.map(function (item) {
            return item.paint(width - (sizes.left + sizes.right), height - (sizes.top + sizes.bottom));
        })));
        var defs = dom_1.sv("defs", [Filters_1.dropShadow(), Filters_1.shadow()]);
        return dom_1.sv("svg", {
            width: width,
            height: height,
        }, [defs, chartsContent]);
    };
    return ComposeLayer;
}());
exports.ComposeLayer = ComposeLayer;


/***/ }),

/***/ "../ts-chart/sources/Filters.ts":
/*!**************************************!*\
  !*** ../ts-chart/sources/Filters.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
exports.shadow = function () {
    return dom_1.sv("filter", { id: "shadow" }, [
        dom_1.sv("feDiffuseLighting", {
            in: "SourceGraphic",
            result: "light",
            "lighting-color": "white",
        }, [dom_1.sv("feDistantLight", { azimuth: 90, elevation: 25 })]),
        dom_1.sv("feComposite", {
            in: "SourceGraphic",
            in2: "light",
            operator: "arithmetic",
            k1: "1",
            k2: "0",
            k3: "0",
            k4: "0",
        }),
    ]);
};
exports.dropShadow = function () {
    return dom_1.sv("filter", {
        id: "dropshadow",
        x: "-100%",
        y: "-100%",
        width: "300%",
        height: "300%",
    }, [
        dom_1.sv("feGaussianBlur", { in: "SourceAlpha", stdDeviation: 2 }),
        dom_1.sv("feOffset", { dx: 0, dy: 0, result: "offsetblur" }),
        dom_1.sv("feOffset", { dx: 0, dy: 0, result: "offsetblur" }),
        dom_1.sv("feFlood", { "flood-color": "rgba(85,85,85,0.5)" }),
        dom_1.sv("feComposite", { in2: "offsetblur", operator: "in" }),
        dom_1.sv("feMerge", [dom_1.sv("feMergeNode"), dom_1.sv("feMergeNode", { in: "SourceGraphic" })]),
    ]);
};


/***/ }),

/***/ "../ts-chart/sources/Legend.ts":
/*!*************************************!*\
  !*** ../ts-chart/sources/Legend.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! ./types */ "../ts-chart/sources/types.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var common_1 = __webpack_require__(/*! ./helpers/common */ "../ts-chart/sources/helpers/common.ts");
var legend_1 = __webpack_require__(/*! ./shapes/legend */ "../ts-chart/sources/shapes/legend.ts");
function getDefaultMargin(halign, valign) {
    switch (valign) {
        case "middle": {
            switch (halign) {
                case "right":
                    return 60;
                case "left":
                    return 120;
                case "center":
                    throw new Error("cant place legend on center, middle");
            }
        }
        // eslint-disable-next-line no-fallthrough
        case "top":
            return 20;
        case "bottom":
            return 60;
    }
}
var Legend = /** @class */ (function () {
    function Legend(_data, config, _events) {
        var _this = this;
        this._data = _data;
        this._events = _events;
        var defaults = {
            form: "rect",
            itemPadding: 20,
            halign: "right",
            valign: "middle",
        };
        this.config = __assign(__assign({}, defaults), config);
        this.config.margin = config.margin || getDefaultMargin(this.config.halign, this.config.valign);
        this._handlers = {
            onclick: function (id, pieLike) {
                return _this._events.fire(types_1.ChartEvents.toggleSeries, [id, pieLike]);
            },
        };
    }
    Legend.prototype.scaleReady = function (sizes) {
        if (this.config.valign === "middle") {
            if (this.config.halign === "right") {
                sizes.right += this.config.size || 200;
            }
            else if (this.config.halign === "left") {
                sizes.left += this.config.size || 200;
            }
        }
        else {
            if (this.config.valign === "top") {
                sizes.top += this.config.size || 40;
            }
            else if (this.config.valign === "bottom") {
                sizes.bottom += this.config.size || 40;
            }
        }
    };
    Legend.prototype.paint = function (width, height) {
        var _this = this;
        var data = this._getData();
        var config = this.config;
        var positionX;
        var positionY;
        var font = common_1.getFontStyle("legend-text");
        var figureWidth = 10; // get Figure width from config ??
        var margin = config.margin, itemPadding = config.itemPadding;
        var svg = [];
        var isMid = config.valign === "middle";
        var xPadding = 0;
        var yPadding = 0;
        data.forEach(function (item) {
            svg.push(dom_1.sv("g", {
                transform: "translate(" + xPadding + "," + yPadding + ")",
                onclick: [_this._handlers.onclick, item.id, _this.config.values],
                class: "legend-item " + (!item.active ? "not-active" : ""),
            }, [
                dom_1.sv("text", {
                    x: figureWidth / 2 + 5,
                    y: 0,
                    class: "start-text legend-text",
                }, [common_1.verticalCenteredText(item.text)]),
                legend_1.legendShape(config.form, item),
            ]));
            if (!isMid) {
                var textWidth = common_1.getTextWidth(item.text, font);
                xPadding += textWidth + itemPadding + figureWidth * 1.5;
            }
            else {
                yPadding += itemPadding + 2;
            }
        });
        switch (config.valign) {
            case "top":
                positionY = -margin - figureWidth / 2;
                break;
            case "middle":
                positionY = (height - yPadding) / 2 + itemPadding / 2;
                break;
            case "bottom":
                positionY = height + margin;
                break;
        }
        switch (config.halign) {
            case "left":
                positionX = isMid ? -margin : figureWidth / 2;
                break;
            case "center":
                positionX = (width - xPadding) / 2;
                break;
            case "right":
                positionX = isMid
                    ? width + margin + figureWidth / 2
                    : width - xPadding + itemPadding + figureWidth / 2;
                break;
        }
        return dom_1.sv("g", { transform: "translate(" + positionX + ", " + positionY + ")" }, svg);
    };
    Legend.prototype._getData = function () {
        var drawData = [];
        if (this.config.values) {
            var text_1 = common_1.locator(this.config.values.text);
            var fill_1 = common_1.locator(this.config.values.color);
            this._data.map(function (item) {
                drawData.push({
                    id: item.id,
                    text: text_1(item).toString(),
                    alpha: 1,
                    fill: fill_1(item).toString(),
                    active: !item.$hidden,
                });
            });
        }
        else {
            var series = this.config.$seriesInfo;
            for (var _i = 0, series_1 = series; _i < series_1.length; _i++) {
                var serie = series_1[_i];
                var seriaConfig = serie.config;
                var useColor = seriaConfig.fill && seriaConfig.color;
                drawData.push({
                    id: seriaConfig.id,
                    text: seriaConfig.name || seriaConfig.value,
                    alpha: seriaConfig.alpha,
                    fill: seriaConfig.fill || seriaConfig.color,
                    color: useColor && seriaConfig.color,
                    active: seriaConfig.active,
                });
            }
        }
        return drawData;
    };
    return Legend;
}());
exports.Legend = Legend;


/***/ }),

/***/ "../ts-chart/sources/Tooltip.ts":
/*!**************************************!*\
  !*** ../ts-chart/sources/Tooltip.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var common_1 = __webpack_require__(/*! ./helpers/common */ "../ts-chart/sources/helpers/common.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-chart/sources/types.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var getAttrs = function (textWidth, x, y, type, chartType) {
    var dy = chartType === "bar" ? 5 : 0;
    switch (type) {
        case "top": {
            var h1 = (textWidth + 20 - 8 - 4) / 2;
            var h2 = textWidth + 20 - 4;
            var d = "M0 0 l4 -4 h" + h1 + " a2 2 0 0 0 2 -2 v-18 a2 2 0 0 0 -2 -2 h" + -h2 + " a2 2 0 0 0 -2 2 v18 a2 2 0 0 0 2 2 h" + h1 + " Z";
            var textX = 0;
            var textY = -15;
            return {
                d: d,
                left: x,
                top: y - 6 + dy,
                textX: textX,
                textY: textY,
            };
        }
        case "bot": {
            var h1 = (textWidth + 20 - 8 - 4) / 2;
            var h2 = textWidth + 20 - 4;
            var d = "M0 0 l4 4 h" + h1 + " a2 2 0 0 1 2 2 v18 a2 2 0 0 1 -2 2 h" + -h2 + " a2 2 0 0 1 -2 -2 v-18 a2 2 0 0 1 2 -2 h" + h1 + " Z";
            var textX = 0;
            var textY = 15;
            return {
                d: d,
                left: x,
                top: y + 6 - dy,
                textX: textX,
                textY: textY,
            };
        }
        case "right": {
            var h = textWidth + 20 - 4;
            var d = "M0 0 l4 -4 v-5 a2 2 0 0 1 2 -2 h" + h + " a2 2 0 0 1 2 2 v18 a2 2 0 0 1 -2 2 h" + -h + " a2 2 0 0 1 -2 -2 v-5 Z";
            var textX = h / 2 + 6;
            var textY = 0;
            return {
                d: d,
                left: x + 1,
                top: y,
                textX: textX,
                textY: textY,
            };
        }
        case "left": {
            var h = textWidth + 20 - 4;
            var d = "M0 0 l-4 -4 v-5 a2 2 0 0 0 -2 -2 h" + -h + " a2 2 0 0 0 -2 2 v18 a2 2 0 0 0 2 2 h" + h + " a2 2 0 0 0 2 -2 v-5 Z";
            var textX = -h / 2 - 6;
            var textY = 0;
            return {
                d: d,
                left: x - 1,
                top: y,
                textX: textX,
                textY: textY,
            };
        }
        case "simple": {
            var h = textWidth + 20 - 4;
            var d = "M0 0 v-4 a2 2 0 0 1 2 -2 h" + h + " a2 2 0 0 1 2 2 v18 a2 2 0 0 1 -2 2 h" + -h + " a2 2 0 0 1 -2 -2 v-6 Z";
            var textX = h / 2 + 2;
            var textY = 6;
            return {
                d: d,
                left: x - h / 2 - 2,
                top: y - 5,
                textX: textX,
                textY: textY,
            };
        }
    }
};
var Tooltip = /** @class */ (function (_super) {
    __extends(Tooltip, _super);
    function Tooltip(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this._chart = config.chart;
        _this._state = {
            leftOffset: 0,
            topOffset: 0,
            value: "",
            x: 0,
            y: 0,
            type: null,
            chartType: null,
            isVisible: false,
        };
        _this.mount(container, dom_1.create({ render: function () { return _this._draw(); } }));
        _this._chart.events.on(types_1.ChartEvents.chartMouseMove, function (x, y, left, top) {
            var closest = [Infinity, null, null, null, null]; // (dist, x, y, id, serieid)
            _this._chart.eachSeries(function (serie) {
                var serieClosest = serie.getClosest(x, y);
                if (closest[0] > serieClosest[0]) {
                    closest[0] = serieClosest[0];
                    closest[1] = serieClosest[1];
                    closest[2] = serieClosest[2];
                    closest[3] = serieClosest[3];
                    closest[4] = serie.id;
                }
            });
            var tooltipSeries = _this._chart.getSeries(closest[4]);
            if (tooltipSeries) {
                var ref = common_1.calcPointRef(closest[3], closest[4]);
                if (ref === _this._lastPointRef) {
                    return;
                }
                var text = tooltipSeries.getTooltipText(closest[3]);
                if (text) {
                    var tooltipType = tooltipSeries.getTooltipType(closest[3], closest[1], closest[2]);
                    _this._enableActivePoint(ref);
                    _this._state.leftOffset = left;
                    _this._state.topOffset = top;
                    _this._state.value = text;
                    _this._state.x = closest[1];
                    _this._state.y = closest[2];
                    _this._state.type = tooltipType;
                    _this._state.chartType = tooltipSeries.config.type;
                    _this._state.isVisible = true;
                }
                else {
                    _this._hide();
                }
                _this.paint();
            }
        }, _this);
        _this._chart.events.on(types_1.ChartEvents.chartMouseLeave, function () { return _this._hide(); }, _this);
        return _this;
    }
    Tooltip.prototype.destructor = function () {
        this._chart.events.detach(types_1.ChartEvents.chartMouseLeave, this);
        this._chart.events.detach(types_1.ChartEvents.chartMouseMove, this);
        this.unmount();
    };
    Tooltip.prototype._hide = function () {
        this._disableLastActivePoint();
        this._state.isVisible = false;
        this.paint();
    };
    Tooltip.prototype._enableActivePoint = function (ref) {
        var rootView = this._chart.getRootView();
        var point = rootView && rootView.refs && rootView.refs[ref];
        if (point) {
            this._disableLastActivePoint();
            this._lastPointRef = ref;
            point.patch({ class: point.attrs.class + " active-figure" });
        }
    };
    Tooltip.prototype._disableLastActivePoint = function () {
        if (this._lastPointRef) {
            var rootView = this._chart.getRootView();
            var point = rootView && rootView.refs && rootView.refs[this._lastPointRef];
            if (point) {
                point.patch({ class: point.attrs.class.replace(" active-figure", "") });
            }
            this._lastPointRef = null;
        }
    };
    Tooltip.prototype._draw = function () {
        var _a = this._state, value = _a.value, x = _a.x, y = _a.y, type = _a.type, chartType = _a.chartType, isVisible = _a.isVisible;
        var attrs;
        if (isVisible && value !== "") {
            var style = common_1.getFontStyle("tooltip-text");
            var textWidth = common_1.getTextWidth(value, style);
            attrs = getAttrs(textWidth, x, y, type || "top", chartType);
        }
        else {
            attrs = { textX: 0, textY: 0, d: null, left: 0, top: 0 };
        }
        return dom_1.el(".dhx_chart.tooltip-container", {
            style: {
                pointerEvents: "none",
                width: 0,
                height: 0,
                visibility: isVisible ? "visible" : "hidden",
                position: "absolute",
                left: attrs.left + this._state.leftOffset + "px",
                top: attrs.top + this._state.topOffset + "px",
            },
        }, isVisible
            ? [
                dom_1.sv("svg", [
                    dom_1.sv("path", { d: attrs.d, class: "tooltip-form" }),
                    dom_1.sv("text", { x: attrs.textX, y: attrs.textY, class: "tooltip-text" }, [
                        common_1.verticalCenteredText(value),
                    ]),
                ]),
            ]
            : null);
    };
    return Tooltip;
}(view_1.View));
exports.Tooltip = Tooltip;


/***/ }),

/***/ "../ts-chart/sources/helpers/circle.ts":
/*!*********************************************!*\
  !*** ../ts-chart/sources/helpers/circle.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var common_1 = __webpack_require__(/*! ./common */ "../ts-chart/sources/helpers/common.ts");
function getCoordinates(percent, radiusX, radiusY) {
    var x = Math.cos(2 * Math.PI * percent) * radiusX;
    var y = Math.sin(2 * Math.PI * percent) * radiusY;
    return [x, y];
}
exports.getCoordinates = getCoordinates;
function shiftCoordinates(item, dx, dy) {
    return [item[0] + dx, item[1] + dy];
}
exports.shiftCoordinates = shiftCoordinates;
exports.pieLikeHandlers = {
    onmouseover: function (shiftX, shiftY, _, node) {
        node.el.setAttribute("transform", "translate(" + shiftX + ", " + shiftY + ") scale(1.05)");
        node.el.classList.add("dhx_pie-transform-delay");
    },
    onmouseout: function (_, node) {
        node.el.setAttribute("transform", "translate(0, 0)");
        node.el.classList.remove("dhx_pie-transform-delay");
    },
};
function checkMiss(v, r) {
    var miss = 0.000001;
    return v - miss < r && v + miss > r;
}
function drawBackgroundCircle(radius, color) {
    return dom_1.sv("circle", {
        cx: 0,
        cy: 0,
        r: radius,
        fill: color,
        stroke: "none",
        class: "background-circle",
    });
}
function arc(r, flag) {
    return "M" + -r + ",0A" + r + "," + r + " 0 " + (flag ? 0 : 1) + " 1 " + r + ",0A" + r + "," + r + " 0 " + (flag ? 0 : 1) + " 1 " + -r + ",0";
}
function radarScale(data, width, height) {
    var radius;
    if (height > width) {
        radius = width / 2;
    }
    else {
        radius = height / 2;
    }
    var scalePercent = 1 / data.scales.length;
    var largeArcFlag = scalePercent > 0.5 ? 1 : 0;
    var svg = [];
    var background = drawBackgroundCircle(radius, "#FAFBFD");
    svg.push(background);
    var currentPercent = -0.25;
    var grid = [];
    var axis = data.axis;
    var gridClass = "radar-grid " + (data.zebra ? "zebra" : "");
    for (var i = 1; i < axis.length; i += 2) {
        var r1 = radius * axis[i - 1];
        var r2 = radius * axis[i];
        var d = arc(r1, true) + " " + arc(r2, false);
        var arcs = dom_1.sv("path", {
            d: d,
            fill: "none",
            stroke: "black",
            class: gridClass,
        });
        grid.push(arcs);
    }
    svg.push(grid);
    data.scales.forEach(function (item) {
        var _a = getCoordinates(currentPercent, radius, radius), startX = _a[0], startY = _a[1];
        var nextPercent = currentPercent + scalePercent;
        var _b = getCoordinates(nextPercent, radius, radius), endX = _b[0], endY = _b[1];
        var d = "M " + startX + " " + startY + " A " + radius + " " + radius + " 0 " + largeArcFlag + " 1 " + endX + " " + endY + " L 0 0";
        var path = dom_1.sv("path", {
            d: d,
            stroke: "black",
            fill: "none",
            class: "radar-scale",
        });
        svg.push(path);
        var _c = [8, 8], yTextPadding = _c[0], xTextPadding = _c[1];
        var dy = checkMiss(currentPercent, 0) || checkMiss(currentPercent, 0.5)
            ? 0
            : currentPercent < 0 || currentPercent > 0.5
                ? -yTextPadding
                : yTextPadding;
        var dx = checkMiss(currentPercent, -0.25) || checkMiss(currentPercent, 0.25)
            ? 0
            : currentPercent < -0.25 || currentPercent > 0.25
                ? -xTextPadding
                : xTextPadding;
        if (checkMiss(currentPercent, -0.25) || checkMiss(currentPercent, 0.25)) {
            var alignFn = checkMiss(currentPercent, -0.25) ? common_1.verticalTopText : common_1.verticalBottomText;
            var text = dom_1.sv("text", { x: startX + dx, y: startY + dy, class: "scale-text" }, [alignFn(item)]);
            svg.push(text);
        }
        else {
            var className = currentPercent >= -0.25 && currentPercent <= 0.25
                ? "start-text scale-text"
                : "end-text scale-text";
            var text = dom_1.sv("text", { x: startX + dx, y: startY + dy, class: className }, [
                common_1.verticalCenteredText(item),
            ]);
            svg.push(text);
        }
        currentPercent = nextPercent;
    });
    currentPercent = -0.25;
    if (data.realAxis) {
        var scaleText = data.realAxis.map(function (item, index) {
            var _a = getCoordinates(-0.25, radius * axis[index], radius * axis[index]), x = _a[0], y = _a[1];
            return dom_1.sv("text", { x: x, y: y, dx: -10, class: "radar-axis-text" }, [
                common_1.verticalCenteredText(item.toString()),
            ]);
        });
        svg.push(scaleText);
    }
    return dom_1.sv("g", { transform: "translate(" + width / 2 + ", " + height / 2 + ")" }, svg);
}
exports.radarScale = radarScale;


/***/ }),

/***/ "../ts-chart/sources/helpers/common.ts":
/*!*********************************************!*\
  !*** ../ts-chart/sources/helpers/common.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var defaultColors = [
    "#394E79",
    "#5E83BA",
    "#C2D2E9",
    "#647B37",
    "#98A468",
    "#F0D0A9",
    "#EEB98E",
    "#9A8BA5",
    "#E3C5D5",
];
function getDefaultColor(index) {
    if (index === void 0) { index = 0; }
    return defaultColors[index];
}
exports.getDefaultColor = getDefaultColor;
function locator(value) {
    if (!value) {
        return function () { return ""; };
    }
    if (typeof value === "string") {
        return function (obj) { return obj[value]; };
    }
    else {
        return value;
    }
}
exports.locator = locator;
function log10(x) {
    return Math.log(x) / Math.LN10;
}
exports.log10 = log10;
function anyArgsMemo(fn) {
    var cached = {};
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var mem = cached;
        for (var i = 0; i < args.length - 1; i++) {
            mem[args[i]] = mem[args[i]] || {};
            mem = mem[args[i]];
        }
        var last = args.length - 1;
        if (mem[last]) {
            return mem[last];
        }
        return (mem[last] = fn.apply(void 0, args));
    };
}
exports.getTextWidth = anyArgsMemo(function (text, font) {
    if (font === void 0) { font = ""; }
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d");
    if (font) {
        ctx.font = font;
    }
    return ctx.measureText(text).width;
});
function memo(fn) {
    var cached = {};
    return function (arg) {
        if (cached[arg]) {
            return cached[arg];
        }
        return (cached[arg] = fn(arg));
    };
}
function getRgbaFromColor(color) {
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d");
    ctx.fillStyle = color;
    ctx.fillRect(0, 0, 2, 2);
    var rgba = ctx.getImageData(1, 1, 1, 1).data;
    return [rgba[0], rgba[1], rgba[2]];
}
var memoizedColorFromRgba = memo(getRgbaFromColor);
function getColorShade(color, light) {
    var _a = memoizedColorFromRgba(color).map(function (value) {
        return Math.floor(value * light + 255 * (1 - light));
    }), r = _a[0], g = _a[1], b = _a[2];
    return "rgb(" + r + "," + g + "," + b + ")";
}
exports.getColorShade = getColorShade;
exports.getFontStyle = memo(function (className) {
    var chart = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    chart.setAttribute("class", "dhx_chart");
    var text = document.createElementNS("http://www.w3.org/2000/svg", "text");
    text.setAttribute("class", className);
    chart.setAttribute("visibility", "hidden");
    text.textContent = "test";
    chart.appendChild(text);
    document.body.appendChild(chart);
    var style = getComputedStyle(text);
    var font = style.fontSize + " " + style.fontFamily;
    document.body.removeChild(chart);
    return font;
});
function linearGradient(grad, id) {
    var stops = grad.stops;
    var colors = stops.map(function (item) {
        return dom_1.sv("stop", {
            offset: item.offset * 100 + "%",
            "stop-color": item.color,
            "stop-opacity": item.opacity || 1,
        });
    });
    var gradient = dom_1.sv("linearGradient", {
        id: id,
        gradientTransform: "rotate(90)",
    }, colors);
    return gradient;
}
exports.linearGradient = linearGradient;
function getRadialGradient(opts, stops, id) {
    var colors = stops.map(function (item) {
        return dom_1.sv("stop", {
            offset: item.offset,
            "stop-color": item.color,
            "stop-opacity": item.opacity || 1,
        });
    });
    var gradient = dom_1.sv("radialGradient", __assign({ id: id, cx: 0, cy: 0, gradientUnits: "userSpaceOnUse" }, opts), colors);
    return gradient;
}
exports.getRadialGradient = getRadialGradient;
function euclideanDistance(x1, y1, x2, y2) {
    return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));
}
exports.euclideanDistance = euclideanDistance;
function verticalCenteredText(text) {
    return dom_1.sv("tspan", {
        dy: "0.5ex",
    }, text);
}
exports.verticalCenteredText = verticalCenteredText;
function verticalTopText(text) {
    return dom_1.sv("tspan", {
        dy: "-0.5ex",
    }, text);
}
exports.verticalTopText = verticalTopText;
function verticalBottomText(text) {
    return dom_1.sv("tspan", {
        dy: "1.5ex",
    }, text);
}
exports.verticalBottomText = verticalBottomText;
function calcPointRef(pointId, serieId) {
    return pointId + "_" + serieId;
}
exports.calcPointRef = calcPointRef;
function getClassesForRotateScale(position, angle) {
    var className = "";
    var classList = [];
    if (position === "left" || position === "top") {
        classList.push("start-text", "end-text");
    }
    else if (position === "right" || position === "bottom") {
        classList.push("end-text", "start-text");
    }
    switch (position) {
        case "left":
        case "right":
            if (angle === 0) {
                className = classList[1];
            }
            else if (angle > 0) {
                if (angle === 180) {
                    className = classList[0];
                }
                else if (angle > 180) {
                    if (angle < 270) {
                        className = classList[0];
                    }
                    else if (angle > 270) {
                        className = classList[1];
                    }
                }
                else if (angle < 180) {
                    if (angle > 90) {
                        className = classList[0];
                    }
                    else if (angle < 90) {
                        className = classList[1];
                    }
                }
            }
            else if (angle < 0) {
                if (angle === -180) {
                    className = classList[0];
                }
                else if (angle < -180) {
                    if (angle > -270) {
                        className = classList[0];
                    }
                    else if (angle < -270) {
                        className = classList[1];
                    }
                }
                else if (angle > -180) {
                    if (angle < -90) {
                        className = classList[0];
                    }
                    else if (angle > -90) {
                        className = classList[1];
                    }
                }
            }
            break;
        case "top":
        case "bottom":
            if (angle > 0) {
                if (angle > 180) {
                    className = classList[0];
                }
                else if (angle < 180) {
                    className = classList[1];
                }
            }
            else if (angle < 0) {
                if (angle > -180) {
                    className = classList[0];
                }
                else if (angle < -180) {
                    className = classList[1];
                }
            }
            break;
    }
    return className;
}
exports.getClassesForRotateScale = getClassesForRotateScale;
function getScales(config) {
    var scales = [];
    for (var scaleName in config) {
        var scale = config[scaleName];
        if (scale.min || scale.max || scale.maxTicks || scale.text || scale.value) {
            scales.push(scaleName);
        }
    }
    return scales;
}
exports.getScales = getScales;


/***/ }),

/***/ "../ts-chart/sources/helpers/spline.ts":
/*!*********************************************!*\
  !*** ../ts-chart/sources/helpers/spline.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function spline(initPoints, link) {
    var len = initPoints.length;
    var points;
    if (len < 3) {
        points = initPoints;
    }
    else {
        var p0 = initPoints[0];
        var p1 = initPoints[0];
        var p2 = initPoints[1];
        var p3 = initPoints[2];
        points = [initPoints[0].slice(0, 2)];
        for (var i = 1; i < len; i++) {
            points.push([
                (-p0[0] + 6 * p1[0] + p2[0]) / 6,
                (-p0[1] + 6 * p1[1] + p2[1]) / 6,
                (p1[0] + 6 * p2[0] - p3[0]) / 6,
                (p1[1] + 6 * p2[1] - p3[1]) / 6,
                p2[0],
                p2[1],
            ]);
            p0 = p1;
            p1 = p2;
            p2 = p3;
            p3 = initPoints[i + 2] || p3;
        }
    }
    var d = "";
    for (var i = 0; i < points.length; i++) {
        var point = points[i];
        var n = point.length;
        if (!i) {
            d += link ? "L" : "M";
            d += n === 5 ? point[0] + " " + point[1] : point[n - 2] + " " + point[n - 1];
        }
        else if (n > 5) {
            d += "C" + point[0] + " " + point[1] + "\n\t\t\t\t" + point[2] + " " + point[3] + "\n\t\t\t\t" + point[4] + " " + point[5];
        }
        else if (n === 5) {
            d += "L" + point[0] + " " + point[1];
        }
        else {
            d += "S" + point[0] + " " + point[1] + "\n\t\t\t\t" + point[2] + " " + point[3];
        }
    }
    return d;
}
exports.default = spline;


/***/ }),

/***/ "../ts-chart/sources/scales/RadialScale.ts":
/*!*************************************************!*\
  !*** ../ts-chart/sources/scales/RadialScale.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var circle_1 = __webpack_require__(/*! ../helpers/circle */ "../ts-chart/sources/helpers/circle.ts");
var Scale_1 = __webpack_require__(/*! ./Scale */ "../ts-chart/sources/scales/Scale.ts");
var RadialScale = /** @class */ (function (_super) {
    __extends(RadialScale, _super);
    function RadialScale(_data, config) {
        return _super.call(this, _data, config, "radial") || this;
    }
    RadialScale.prototype.paint = function (width, height) {
        var _this = this;
        if (this.config.hidden) {
            return null;
        }
        var zebra = this.config.zebra;
        var attribute = this.config.value;
        var realAxis = this.config.showAxis ? this._axis.steps : null;
        var axis = this._axis.steps.map(function (step) { return _this.point(step); });
        var scales = this._data.map(function (item) { return item[attribute]; });
        var config = { scales: scales, axis: axis, realAxis: realAxis, zebra: zebra };
        return circle_1.radarScale(config, width, height);
    };
    RadialScale.prototype.point = function (val) {
        return (val - this._axis.min) / (this._axis.max - this._axis.min);
    };
    return RadialScale;
}(Scale_1.Scale));
exports.RadialScale = RadialScale;


/***/ }),

/***/ "../ts-chart/sources/scales/Scale.ts":
/*!*******************************************!*\
  !*** ../ts-chart/sources/scales/Scale.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var AxisCreator_1 = __webpack_require__(/*! ../AxisCreator */ "../ts-chart/sources/AxisCreator.ts");
var SvgScales_1 = __webpack_require__(/*! ./SvgScales */ "../ts-chart/sources/scales/SvgScales.ts");
var common_1 = __webpack_require__(/*! ../helpers/common */ "../ts-chart/sources/helpers/common.ts");
var renderScale = {
    left: SvgScales_1.left,
    right: SvgScales_1.right,
    bottom: SvgScales_1.bottom,
    top: SvgScales_1.top,
};
var renderGrid = {
    left: SvgScales_1.leftGrid,
    right: SvgScales_1.rightGrid,
    bottom: SvgScales_1.bottomGrid,
    top: SvgScales_1.topGrid,
};
var Scale = /** @class */ (function () {
    function Scale(_data, config, position) {
        this._data = _data;
        this._padding = false;
        this._charts = [];
        this._position = position;
        this._setDefaults(config);
        this._isXDirection = position === "bottom" || position === "top";
        if (position !== "radial") {
            if (position === "left" || position === "right") {
                this.config.size = this.config.size || 40 + (this.config.title ? 40 : 0);
            }
            else {
                this.config.size = this.config.size || 20 + (this.config.title ? 40 : 0);
            }
        }
    }
    Scale.prototype.addPadding = function () {
        this._padding = true;
    };
    Scale.prototype.getSize = function () {
        return this.config.size;
    };
    Scale.prototype.scaleReady = function (sizes) {
        var points = [];
        this._charts.forEach(function (chart) {
            chart.getPoints().forEach(function (item) { return points.push(item[1]); }); // y-value
        });
        this._axis = new AxisCreator_1.AxisCreator(points, this.config).getScale();
        var position = this._position;
        if (position !== "radial") {
            sizes[position] += this.config.size;
        }
    };
    Scale.prototype.point = function (pos) {
        if (this.config.log) {
            return this._logPoint(pos);
        }
        else {
            return this._isXDirection
                ? (pos - this._axis.min) / (this._axis.max - this._axis.min)
                : 1 - (pos - this._axis.min) / (this._axis.max - this._axis.min);
        }
    };
    Scale.prototype.add = function (val) {
        this._charts.push(val);
    };
    Scale.prototype.paint = function (width, height) {
        var _this = this;
        if (this.config.hidden) {
            return null;
        }
        var steps = this._axis.steps;
        var points = steps.map(function (item) { return [
            _this._isXDirection ? _this.point(item) * width : _this.point(item) * height,
            item,
        ]; });
        if (points.length === 0) {
            points = [[0, 0]];
        }
        return renderScale[this._position](points, this.config, width, height);
    };
    Scale.prototype.scaleGrid = function () {
        var _this = this;
        var getPoints = function (width, height) {
            return _this._axis.steps.map(function (item) { return [
                _this._isXDirection ? _this.point(item) * width : _this.point(item) * height,
                item,
            ]; });
        };
        var type = this._position;
        var grid = this.config.grid;
        var dashed = this.config.dashed;
        var hidden = this.config.hidden;
        var getSpecificLevel = function () { return _this._axis.steps.indexOf(_this.config.targetLine); };
        var getSpecificNumber = function () { return _this.point(_this.config.targetValue); };
        return {
            paint: function (width, height) {
                var targetLine = getSpecificLevel();
                var points = getPoints(width, height);
                var targetValue = getSpecificNumber();
                var config = {
                    targetLine: targetLine,
                    dashed: dashed,
                    grid: grid,
                    targetValue: targetValue,
                    hidden: hidden,
                };
                return renderGrid[type](points, width, height, config);
            },
        };
    };
    Scale.prototype._setDefaults = function (config) {
        var defaults = {
            scalePadding: 20,
            textPadding: 11,
            grid: true,
            targetLine: null,
            showText: true,
        };
        if (config.locator) {
            this.locator = common_1.locator(config.locator);
        }
        this.config = __assign(__assign({}, defaults), config);
    };
    Scale.prototype._logPoint = function (pos) {
        var logPos;
        var sign = Math.abs(pos) / pos;
        var steps = this._axis.steps;
        var count = steps.length - 1;
        var index = steps.indexOf(pos);
        if (index !== -1) {
            logPos = index / count;
        }
        else {
            var dx = this._axis.min < 0 ? steps.indexOf(0) : 0;
            var exp = sign * (common_1.log10(Math.abs(pos)) - 1);
            logPos = (dx + exp) / count;
        }
        return this._isXDirection ? logPos : 1 - logPos;
    };
    return Scale;
}());
exports.Scale = Scale;


/***/ }),

/***/ "../ts-chart/sources/scales/SvgScales.ts":
/*!***********************************************!*\
  !*** ../ts-chart/sources/scales/SvgScales.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var common_1 = __webpack_require__(/*! ../helpers/common */ "../ts-chart/sources/helpers/common.ts");
var defaultTextTemplate = function (item) { return item.toString(); };
function bottom(points, config, width, height) {
    var title = config.title, textPadding = config.textPadding, scalePadding = config.scalePadding, textTemplate = config.textTemplate, showText = config.showText, scaleRotate = config.scaleRotate;
    var template = textTemplate || defaultTextTemplate;
    var text = [];
    var extraTittlePadding = 0;
    if (showText) {
        extraTittlePadding = textPadding;
        var canRotate_1 = scaleRotate && !isNaN(scaleRotate);
        var y_1 = height + textPadding;
        text = points.map(function (p) {
            var x = p[0];
            var transform = canRotate_1 ? "rotate(" + scaleRotate + " " + x + " " + y_1 + ")" : "";
            var classList = ["scale-text", "top-text"];
            if (canRotate_1) {
                var angle = scaleRotate % 360;
                classList.push(common_1.getClassesForRotateScale("bottom", angle));
            }
            return dom_1.sv("text", { x: x, y: y_1, class: classList.join(" "), transform: transform }, [
                common_1.verticalCenteredText(template(p[1])),
            ]);
        });
    }
    var id = core_1.uid();
    var svTitle = null;
    var mainLine = dom_1.sv("path", {
        class: "main-scale",
        d: "M0 " + height + " H" + (width - 0.5),
        id: id,
    });
    if (title) {
        svTitle = dom_1.sv("text", { dx: width / 2, dy: scalePadding + extraTittlePadding }, [
            dom_1.sv("textPath", { href: "#" + id, class: "scale-title " }, title),
        ]);
    }
    return dom_1.sv("g", [mainLine, svTitle].concat(text));
}
exports.bottom = bottom;
function bottomGrid(points, width, height, config) {
    var dashed = config.dashed, grid = config.grid, targetLine = config.targetLine, targetValue = config.targetValue;
    var len = points.length;
    var gridLines = [];
    var className = "grid-line " + (dashed ? "dash-line" : "");
    for (var i = 0; i < len; i++) {
        if (i === 0 && points[i][0] === 0 && !config.hidden) {
            continue;
        }
        if (i === targetLine) {
            var d = "M" + points[i][0] + " 0 V " + height;
            var path = dom_1.sv("path", { d: d, class: className + " spec-grid-line" });
            gridLines.push(path);
            continue;
        }
        if (grid) {
            var d = "M" + points[i][0] + " 0 V " + height;
            var path = dom_1.sv("path", { d: d, class: className });
            gridLines.push(path);
            if (i === len - 1 && points[i][0] !== width) {
                var additionD = "M" + width + " 0 V " + height;
                var additionPath = dom_1.sv("path", { d: additionD, class: className });
                gridLines.push(additionPath);
            }
        }
    }
    if (targetValue) {
        var d = "M" + targetValue * width + " 0 V " + height;
        var path = dom_1.sv("path", { d: d, class: className + " spec-grid-line" });
        gridLines.push(path);
    }
    return dom_1.sv("g", gridLines);
}
exports.bottomGrid = bottomGrid;
function top(points, config, width, _height) {
    var title = config.title, textPadding = config.textPadding, scalePadding = config.scalePadding, textTemplate = config.textTemplate, showText = config.showText, scaleRotate = config.scaleRotate;
    var template = textTemplate || defaultTextTemplate;
    var text = [];
    var extraTittlePadding = 0;
    if (showText) {
        extraTittlePadding = textPadding;
        var canRotate_2 = scaleRotate && !isNaN(scaleRotate);
        var y_2 = -textPadding;
        text = points.map(function (p) {
            var classList = ["scale-text"];
            var x = p[0];
            var transform = canRotate_2 ? "rotate(" + scaleRotate + " " + x + " " + y_2 + ")" : "";
            if (canRotate_2) {
                var angle = scaleRotate % 360;
                classList.push(common_1.getClassesForRotateScale("top", angle));
            }
            return dom_1.sv("text", { x: x, y: y_2, class: classList.join(" "), transform: transform }, [
                common_1.verticalCenteredText(template(p[1])),
            ]);
        });
    }
    var id = core_1.uid();
    var mainLine = dom_1.sv("path", { d: "M0 0 H" + width, class: "main-scale", id: id });
    var svTitle = null;
    if (title) {
        svTitle = dom_1.sv("text", { dx: width / 2, dy: -scalePadding - extraTittlePadding }, [
            dom_1.sv("textPath", { href: "#" + id, class: "scale-title" }, title),
        ]);
    }
    return dom_1.sv("g", [mainLine, svTitle].concat(text));
}
exports.top = top;
function topGrid(points, _width, height, config) {
    var dashed = config.dashed, grid = config.grid, targetLine = config.targetLine;
    var len = points.length;
    var gridLines = [];
    var className = "grid-line " + (dashed ? "dash-line" : "");
    for (var i = 0; i < len; i++) {
        if (i === 0 && points[i][0] === 0 && !config.hidden) {
            continue;
        }
        if (i === targetLine) {
            var d = "M" + points[i][0] + " 0 V " + height;
            var path = dom_1.sv("path", { d: d, class: className + " spec-grid-line" });
            gridLines.push(path);
            continue;
        }
        if (grid) {
            var d = "M" + points[i][0] + " 0 V " + height;
            var path = dom_1.sv("path", { d: d, class: className });
            gridLines.push(path);
            if (i === len - 1 && points[i][0] !== 0) {
                var additionD = "M0 0 V " + height;
                var additionPath = dom_1.sv("path", { d: additionD, class: className });
                gridLines.push(additionPath);
            }
        }
    }
    return dom_1.sv("g", gridLines);
}
exports.topGrid = topGrid;
function left(points, config, _width, height) {
    var title = config.title, textPadding = config.textPadding, scalePadding = config.scalePadding, textTemplate = config.textTemplate, showText = config.showText, scaleRotate = config.scaleRotate;
    var template = textTemplate || defaultTextTemplate;
    var text = [];
    var extraTittlePadding = 0;
    if (showText) {
        var style_1 = common_1.getFontStyle("scale-text");
        var maxTextWidth_1 = 0;
        var canRotate_3 = scaleRotate && !isNaN(scaleRotate);
        text = points.map(function (p) {
            var y = p[0];
            var x = -textPadding;
            var transform = canRotate_3 ? "rotate(" + scaleRotate + " " + x + " " + y + ")" : "";
            var classList = ["scale-text"];
            var scaleText = template(p[1]);
            if (title) {
                var textWidth = common_1.getTextWidth(scaleText, style_1);
                if (maxTextWidth_1 < textWidth) {
                    maxTextWidth_1 = textWidth;
                }
            }
            if (canRotate_3) {
                var angle = scaleRotate % 360;
                classList.push(common_1.getClassesForRotateScale("left", angle));
            }
            else {
                classList.push("end-text");
            }
            return dom_1.sv("text", { x: x, y: y, class: classList.join(" "), transform: transform }, [
                common_1.verticalCenteredText(scaleText),
            ]);
        });
        extraTittlePadding = maxTextWidth_1 + textPadding;
    }
    var id = core_1.uid();
    var mainLine = dom_1.sv("path", {
        class: "main-scale",
        d: "M0 " + height + " V 0.5",
        id: id,
    }); // 0.5 instead of 0, coz stroke-linecap: square and dirrent stroke size
    var svTitle = null;
    if (title) {
        svTitle = dom_1.sv("text", { dx: height / 2, dy: -scalePadding - extraTittlePadding }, [
            dom_1.sv("textPath", { href: "#" + id, class: "scale-title" }, title),
        ]);
    }
    return dom_1.sv("g", [mainLine, svTitle].concat(text));
}
exports.left = left;
function leftGrid(points, width, height, config) {
    var dashed = config.dashed, grid = config.grid, targetLine = config.targetLine, targetValue = config.targetValue;
    var len = points.length;
    var gridLines = [];
    var className = "grid-line " + (dashed ? "dash-line" : "");
    for (var i = 0; i < len; i++) {
        if (i === 0 && points[i][0] === height && !config.hidden) {
            continue;
        }
        if (targetLine === i) {
            var d = "M0 " + points[i][0] + " H " + width;
            var path = dom_1.sv("path", { d: d, class: className + " spec-grid-line" });
            gridLines.push(path);
            continue;
        }
        if (grid) {
            var d = "M0 " + points[i][0] + " H " + width;
            var path = dom_1.sv("path", { d: d, class: className });
            gridLines.push(path);
            if (i === len - 1 && points[i][0] !== width) {
                var additionD = "M0 0 H" + width;
                var additionPath = dom_1.sv("path", { d: additionD, class: className });
                gridLines.push(additionPath);
            }
        }
    }
    if (targetValue) {
        var d = "M0 " + targetValue * height + " H " + width;
        var path = dom_1.sv("path", { d: d, class: className + " spec-grid-line" });
        gridLines.push(path);
    }
    return dom_1.sv("g", gridLines);
}
exports.leftGrid = leftGrid;
function right(points, config, width, height) {
    var title = config.title, textPadding = config.textPadding, scalePadding = config.scalePadding, textTemplate = config.textTemplate, showText = config.showText, scaleRotate = config.scaleRotate;
    var template = textTemplate || defaultTextTemplate;
    var text = [];
    var extraTittlePadding = 0;
    if (showText) {
        var style_2 = common_1.getFontStyle("scale-text");
        var maxTextWidth_2 = 0;
        var canRotate_4 = scaleRotate && !isNaN(scaleRotate);
        text = points.map(function (p) {
            var scaleText = template(p[1]);
            var y = p[0];
            var x = width + textPadding;
            var transform = canRotate_4 ? "rotate(" + scaleRotate + " " + x + " " + y + ")" : "";
            var classList = ["scale-text"];
            if (title) {
                var textWidth = common_1.getTextWidth(scaleText, style_2);
                if (maxTextWidth_2 < textWidth) {
                    maxTextWidth_2 = textWidth;
                }
            }
            if (canRotate_4) {
                var angle = scaleRotate % 360;
                classList.push(common_1.getClassesForRotateScale("right", angle));
            }
            else {
                classList.push("start-text");
            }
            return dom_1.sv("text", { x: x, y: y, class: classList.join(" "), transform: transform }, [
                common_1.verticalCenteredText(scaleText),
            ]);
        });
        extraTittlePadding = textPadding + maxTextWidth_2;
    }
    var id = core_1.uid();
    var mainLine = dom_1.sv("path", {
        d: "M" + width + " " + height + " V 0",
        class: "main-scale",
        id: id,
    });
    var svTitle = null;
    if (title) {
        svTitle = dom_1.sv("text", { dx: height / 2, dy: scalePadding + extraTittlePadding }, [
            dom_1.sv("textPath", { href: "#" + id, class: "scale-title" }, title),
        ]);
    }
    return dom_1.sv("g", [mainLine, svTitle].concat(text));
}
exports.right = right;
function rightGrid(points, width, height, config) {
    var dashed = config.dashed, grid = config.grid, targetLine = config.targetLine;
    var len = points.length;
    var gridLines = [];
    var className = "grid-line " + (dashed ? "dash-line" : "");
    for (var i = 0; i < len; i++) {
        if (i === 0 && points[i][0] === height && !config.hidden) {
            continue;
        }
        if (targetLine === i) {
            var d = "M0 " + points[i][0] + " H " + width;
            var path = dom_1.sv("path", { d: d, class: className + " spec-grid-line" });
            gridLines.push(path);
            continue;
        }
        if (grid) {
            var d = "M0 " + points[i][0] + " H " + width;
            var path = dom_1.sv("path", { d: d, class: className });
            gridLines.push(path);
            if (i === len - 1 && points[i][0] !== width) {
                var additionD = "M0 0 H" + width;
                var additionPath = dom_1.sv("path", { d: additionD, class: className });
                gridLines.push(additionPath);
            }
        }
    }
    return dom_1.sv("g", gridLines);
}
exports.rightGrid = rightGrid;


/***/ }),

/***/ "../ts-chart/sources/scales/TextScale.ts":
/*!***********************************************!*\
  !*** ../ts-chart/sources/scales/TextScale.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(/*! ../helpers/common */ "../ts-chart/sources/helpers/common.ts");
var Scale_1 = __webpack_require__(/*! ./Scale */ "../ts-chart/sources/scales/Scale.ts");
var SvgScales_1 = __webpack_require__(/*! ./SvgScales */ "../ts-chart/sources/scales/SvgScales.ts");
var renderScale = {
    left: SvgScales_1.left,
    right: SvgScales_1.right,
    bottom: SvgScales_1.bottom,
    top: SvgScales_1.top,
};
var renderGrid = {
    left: SvgScales_1.leftGrid,
    right: SvgScales_1.rightGrid,
    bottom: SvgScales_1.bottomGrid,
    top: SvgScales_1.topGrid,
};
var TextScale = /** @class */ (function (_super) {
    __extends(TextScale, _super);
    function TextScale() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TextScale.prototype.scaleReady = function (sizes) {
        var max = this._data.getLength() - 1;
        var steps = this._data.map(this.locator);
        this._axis = { max: max, steps: steps };
        sizes[this._position] += this.config.size;
    };
    TextScale.prototype.point = function (value) {
        var pos = this._axis.steps.indexOf(value);
        if (this._padding) {
            var max = this._axis.max + 1;
            var padding = 0.5 / max;
            var point = pos / max;
            return this._isXDirection ? padding + point : 1 - padding - point;
        }
        else {
            return this._isXDirection ? pos / this._axis.max : 1 - pos / this._axis.max;
        }
    };
    TextScale.prototype.paint = function (width, height) {
        var _this = this;
        if (this.config.hidden) {
            return null;
        }
        var points = this._axis.steps.map(function (item, index) { return [
            _this._isXDirection ? _this._getAxisPoint(index) * width : _this.point(item) * height,
            item,
        ]; });
        return renderScale[this._position](points, this.config, width, height);
    };
    TextScale.prototype.scaleGrid = function () {
        var _this = this;
        var getPoints = function (width, height) {
            return _this._axis.steps.map(function (item, index) { return [
                _this._isXDirection ? _this._getAxisPoint(index) * width : _this._getAxisPoint(index) * height,
                item,
            ]; });
        };
        var type = this._position;
        var grid = this.config.grid;
        var dashed = this.config.dashed;
        var hidden = this.config.hidden;
        var getSpecificLevel = function () { return _this._axis.steps.indexOf(_this.config.targetLine); };
        return {
            paint: function (width, height) {
                var targetLine = getSpecificLevel();
                var points = getPoints(width, height);
                var config = { targetLine: targetLine, dashed: dashed, grid: grid, hidden: hidden };
                return renderGrid[type](points, width, height, config);
            },
        };
    };
    TextScale.prototype._setDefaults = function (config) {
        var defaults = {
            scalePadding: 30,
            textPadding: 12,
            grid: true,
            targetLine: null,
            showText: true,
        };
        this.locator = common_1.locator(config.text);
        this.config = __assign(__assign({}, defaults), config);
    };
    TextScale.prototype._getAxisPoint = function (index) {
        var max = this._axis.max;
        if (this._padding) {
            var count = max + 1;
            var padding = 0.5 / count;
            var point = index / count;
            return this._isXDirection ? padding + point : 1 - padding - point;
        }
        else {
            return this._isXDirection ? index / max : 1 - index / max;
        }
    };
    return TextScale;
}(Scale_1.Scale));
exports.TextScale = TextScale;


/***/ }),

/***/ "../ts-chart/sources/scales/index.ts":
/*!*******************************************!*\
  !*** ../ts-chart/sources/scales/index.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RadialScale_1 = __webpack_require__(/*! ./RadialScale */ "../ts-chart/sources/scales/RadialScale.ts");
var Scale_1 = __webpack_require__(/*! ./Scale */ "../ts-chart/sources/scales/Scale.ts");
var TextScale_1 = __webpack_require__(/*! ./TextScale */ "../ts-chart/sources/scales/TextScale.ts");
var scaleTypes = {
    radial: RadialScale_1.RadialScale,
    text: TextScale_1.TextScale,
    numeric: Scale_1.Scale,
};
exports.default = scaleTypes;


/***/ }),

/***/ "../ts-chart/sources/series/Area.ts":
/*!******************************************!*\
  !*** ../ts-chart/sources/series/Area.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var common_1 = __webpack_require__(/*! ../helpers/common */ "../ts-chart/sources/helpers/common.ts");
var ScaleSeria_1 = __webpack_require__(/*! ./ScaleSeria */ "../ts-chart/sources/series/ScaleSeria.ts");
var Area = /** @class */ (function (_super) {
    __extends(Area, _super);
    function Area() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Area.prototype.paint = function (width, height, prev) {
        _super.prototype.paint.call(this, width, height);
        var svg = [];
        this._form(width, height, svg, prev);
        this._markers(svg);
        return dom_1.sv("g", { class: "seria", _key: this.id }, svg);
    };
    Area.prototype.paintformAndMarkers = function (width, height, prev) {
        _super.prototype.paint.call(this, width, height);
        var svg = [];
        var markers = [];
        this._form(width, height, svg, prev);
        this._markers(markers);
        return [
            dom_1.sv("g", { class: "seria", _key: this.id }, svg),
            dom_1.sv("g", { class: "seria_markers", _key: this.id + "_markers" }, markers),
        ];
    };
    Area.prototype._markers = function (svg) {
        var _this = this;
        if (this.config.pointType) {
            var color = this.config.pointColor || this.config.color;
            var point_1 = this._getPointType(this.config.pointType, color, false);
            svg.push.apply(svg, this._points.map(function (p) { return point_1(p[0], p[1], common_1.calcPointRef(p[2], _this.id)); }));
        }
    };
    Area.prototype._form = function (width, height, svg, prev) {
        var css = "chart " + this.config.type + " " + (this.config.css || "") + " " + (this.config.dashed ? "dash-line" : "");
        var _a = this.config, id = _a.id, fill = _a.fill, alpha = _a.alpha, color = _a.color, strokeWidth = _a.strokeWidth;
        var points = this._points;
        var last = points[points.length - 1];
        var d = "";
        if (prev) {
            // bottom line in stacked area
            for (var i = prev.length - 1; i >= 0; i--) {
                var item = prev[i];
                d += i === points.length - 1 ? "M" + item[0] + " " + item[1] + " " : "L" + item[0] + " " + item[1] + " ";
            }
            // top line in stacked area
            d +=
                points.map(function (item, index) { return (!index ? "V " + item[1] : "L " + item[0] + " " + item[1]); }).join(" ") +
                    "Z";
        }
        else {
            d +=
                points
                    .map(function (item, index) {
                    return index ? "L" + item[0] + " " + item[1] : "M0 " + height + " L0 " + item[1] + " L" + item[0] + " " + item[1];
                })
                    .join(" ") + ("L" + width + " " + last[1] + " V " + height);
        }
        if (strokeWidth) {
            var len_1 = points.length - 1;
            var strokePadding_1 = function (index) { return (index === len_1 ? -0.5 : index ? 0 : 0.5); };
            var line = points
                .map(function (item, index) { return (index ? "L" : "M") + (item[0] + strokePadding_1(index) + " " + item[1]); })
                .join(" ");
            var linePath = dom_1.sv("path", {
                d: line,
                "stroke-width": strokeWidth,
                stroke: color,
                fill: "none",
                class: css,
            });
            svg.push(linePath);
        }
        var path = dom_1.sv("path", {
            id: "seria" + id,
            d: d,
            class: css,
            fill: fill,
            "fill-opacity": alpha,
            stroke: "none",
        });
        svg.push(path);
        return svg;
    };
    Area.prototype._setDefaults = function (config) {
        var defaults = {
            alpha: 0.3,
            strokeWidth: 2,
            fill: config.color || "#5E83BA",
            color: "#5E83BA",
            active: true,
            tooltip: true,
            pointType: "empty",
        };
        this.config = __assign(__assign({}, defaults), config);
        var showTooltip = this.config.tooltip;
        var point = this.config.pointType;
        var color = this.config.pointColor || this.config.color;
        if (point) {
            this._drawPointType = this._getPointType(point, color, showTooltip);
        }
    };
    return Area;
}(ScaleSeria_1.default));
exports.default = Area;


/***/ }),

/***/ "../ts-chart/sources/series/Bar.ts":
/*!*****************************************!*\
  !*** ../ts-chart/sources/series/Bar.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var common_1 = __webpack_require__(/*! ../helpers/common */ "../ts-chart/sources/helpers/common.ts");
var ScaleSeria_1 = __webpack_require__(/*! ./ScaleSeria */ "../ts-chart/sources/series/ScaleSeria.ts");
var Bar = /** @class */ (function (_super) {
    __extends(Bar, _super);
    function Bar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._shift = 0;
        return _this;
    }
    Bar.prototype.addScale = function (type, scale) {
        _super.prototype.addScale.call(this, type, scale);
        scale.addPadding();
    };
    Bar.prototype.seriesShift = function (shift) {
        this._shift = shift;
        return this.config.barWidth;
    };
    Bar.prototype.paint = function (width, height, prev) {
        _super.prototype.paint.call(this, width, height);
        if (!this.config.active) {
            return null;
        }
        var svg = [];
        if (this._gradient) {
            svg.push(dom_1.sv("defs", [this._gradient()]));
        }
        var css = "chart " + this.config.type + " " + (this.config.css || "") + " " + (this.config.dashed ? "dash-line" : "");
        var form = this._getForm(this._points, css, width, height, prev);
        svg = svg.concat(form);
        return dom_1.sv("g", { class: "seria", _key: this.id }, svg);
    };
    Bar.prototype.getTooltipType = function (_id, _x, y) {
        if (this.config.baseLine !== undefined && this._baseLinePosition < y) {
            return "bot";
        }
        return "top";
    };
    Bar.prototype._getClosestDist = function (x, y, px, py) {
        if (this.config.stacked && y < py) {
            return Infinity;
        }
        return Math.abs(x - px);
    };
    Bar.prototype._path = function (item, prev) {
        item[0] += this._shift;
        return "\nM " + (item[0] - this.config.barWidth / 2) + " " + prev + "\nV " + item[1] + "\nh " + this.config.barWidth + "\nV " + prev;
    };
    Bar.prototype._base = function (height) {
        var baseLine = this.config.baseLine;
        return (this._baseLinePosition =
            baseLine !== undefined ? this.yScale.point(baseLine) * height : height - 1);
    };
    Bar.prototype._text = function (item, prev, rotate) {
        var x = item[0];
        var y = (prev + item[1]) / 2;
        var canRotate = rotate && !isNaN(rotate);
        return {
            x: x,
            y: y,
            class: "bar-text",
            transform: canRotate ? "rotate(" + rotate + " " + x + " " + y + ")" : "",
        };
    };
    Bar.prototype._getForm = function (points, css, _width, height, prev) {
        var _this = this;
        var _a = this.config, fill = _a.fill, alpha = _a.alpha, showText = _a.showText, showTextTemplate = _a.showTextTemplate, showTextRotate = _a.showTextRotate;
        var svg = [];
        var base = this._base(height);
        var getPrev = function (index) { return (!prev ? base : prev[index][1]); };
        var series = points.map(function (item, index) {
            return dom_1.sv("path", {
                _key: "seria" + _this.config.id + index,
                d: _this._path(item, getPrev(index)),
                class: css,
                fill: fill,
                onclick: [_this._handlers.onclick, item[2], _this.config.value],
                "fill-opacity": alpha,
            });
        });
        svg.push.apply(svg, series);
        if ((showText || showTextTemplate || showTextRotate) && showText !== false) {
            var isWrite_1 = function (item, index) { return Math.abs(getPrev(index) - item[1]) > 16; }; // hide text, where height < 16
            var text = points.map(function (item, index) {
                var value = _this._getText(item);
                return isWrite_1(item, index)
                    ? dom_1.sv("text", _this._text(item, getPrev(index), showTextRotate), [
                        showTextTemplate
                            ? common_1.verticalCenteredText(showTextTemplate(value))
                            : common_1.verticalCenteredText(value),
                    ])
                    : null;
            });
            svg.push.apply(svg, text);
        }
        return svg;
    };
    Bar.prototype._getText = function (item) {
        return item[4].toString();
    };
    Bar.prototype._setDefaults = function (config) {
        var defaults = {
            barWidth: 30,
            alpha: 1,
            active: true,
            tooltip: true,
            pointType: "empty",
        };
        this.config = __assign(__assign({}, defaults), config);
        var showTooltip = this.config.tooltip;
        var point = this.config.pointType;
        var color = this.config.pointColor || this.config.color;
        if (point) {
            this.config.pointType = point;
            this._drawPointType = this._getPointType(point, color, showTooltip);
        }
        if (this.config.gradient) {
            var id_1 = "gradient" + core_1.uid();
            var gradient_1 = this.config.gradient(this.config.fill);
            this._gradient = function () { return common_1.linearGradient(gradient_1, id_1); };
            this.config.fill = "url(#" + id_1 + ")";
        }
    };
    return Bar;
}(ScaleSeria_1.default));
exports.default = Bar;


/***/ }),

/***/ "../ts-chart/sources/series/BarX.ts":
/*!******************************************!*\
  !*** ../ts-chart/sources/series/BarX.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Bar_1 = __webpack_require__(/*! ./Bar */ "../ts-chart/sources/series/Bar.ts");
var BarX = /** @class */ (function (_super) {
    __extends(BarX, _super);
    function BarX() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BarX.prototype.addScale = function (type, scale) {
        var realtype = type === "top" || type === "bottom" ? "left" : "top";
        _super.prototype.addScale.call(this, realtype, scale);
    };
    BarX.prototype.paint = function (width, height, prev) {
        return _super.prototype.paint.call(this, height, width, prev);
    };
    BarX.prototype.getTooltipType = function (id, x, y) {
        if (this.config.baseLine !== undefined && this._baseLinePosition > x) {
            return "left";
        }
        return "right";
    };
    BarX.prototype.getClosest = function (x, y) {
        var res = [Infinity, null, null, null];
        for (var _i = 0, _a = this._points; _i < _a.length; _i++) {
            var point = _a[_i];
            var dist = this._getClosestDist(x, y, point[1], point[0]);
            if (res[0] > dist) {
                res[0] = dist;
                res[1] = point[1];
                res[2] = point[0];
                res[3] = point[2];
            }
        }
        return res;
    };
    BarX.prototype._getText = function (item) {
        return item[4].toString();
    };
    BarX.prototype._getClosestDist = function (x, y, px, py) {
        if (this.config.stacked && x > px) {
            return Infinity;
        }
        return Math.abs(y - py);
    };
    BarX.prototype._path = function (item, prev) {
        item[0] += this._shift;
        return "\nM " + prev + " " + (item[0] - this.config.barWidth / 2) + "\nH " + item[1] + "\nv " + this.config.barWidth + "\nH " + prev;
    };
    BarX.prototype._base = function (height) {
        var baseLine = this.config.baseLine;
        return (this._baseLinePosition = baseLine !== undefined ? this.yScale.point(baseLine) * height : 0);
    };
    BarX.prototype._text = function (item, prev, rotate) {
        var x = (prev + item[1]) / 2;
        var y = item[0];
        var canRotate = rotate && !isNaN(rotate);
        return {
            x: x,
            y: y,
            class: "bar-text",
            transform: canRotate ? "rotate(" + rotate + " " + x + " " + y + ")" : "",
        };
    };
    return BarX;
}(Bar_1.default));
exports.default = BarX;


/***/ }),

/***/ "../ts-chart/sources/series/BaseSeria.ts":
/*!***********************************************!*\
  !*** ../ts-chart/sources/series/BaseSeria.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-chart/sources/types.ts");
var common_1 = __webpack_require__(/*! ../helpers/common */ "../ts-chart/sources/helpers/common.ts");
var line_1 = __webpack_require__(/*! ../shapes/line */ "../ts-chart/sources/shapes/line.ts");
var BaseSeria = /** @class */ (function () {
    function BaseSeria(_data, config, other) {
        var _this = this;
        this._data = _data;
        this._handlers = {
            onclick: function (id, value) { return _this._events.fire(types_1.ChartEvents.serieClick, [id, value]); },
        };
        this.id = config.id = config.id || core_1.uid();
        this._events = other;
        this._points = [];
        this._setDefaults(config);
    }
    BaseSeria.prototype.toggle = function () {
        this.config.active = !this.config.active;
    };
    BaseSeria.prototype.getClosest = function (x, y) {
        var res = [Infinity, null, null, null];
        for (var _i = 0, _a = this._points; _i < _a.length; _i++) {
            var point = _a[_i];
            var dist = this._getClosestDist(x, y, point[0], point[1]);
            if (res[0] > dist) {
                res[0] = dist;
                res[1] = point[0];
                res[2] = point[1];
                res[3] = point[2];
            }
        }
        return res;
    };
    BaseSeria.prototype.getTooltipType = function (_id) {
        return "top";
    };
    BaseSeria.prototype.getTooltipText = function (id) {
        if (!this._data.getItem(id)) {
            return;
        }
        if (this.config.tooltip) {
            var p = this._defaultLocator(this._data.getItem(id));
            if (this.config.tooltipTemplate) {
                return this.config.tooltipTemplate(p);
            }
            return p[0];
        }
    };
    BaseSeria.prototype.dataReady = function (prev) {
        return (this._points = []);
    };
    BaseSeria.prototype.paint = function (width, height) {
        return this._calckFinalPoints(width, height);
    };
    BaseSeria.prototype.getPoints = function () {
        return this._points;
    };
    BaseSeria.prototype.addScale = function (type, scale) {
        // do nothing
    };
    BaseSeria.prototype._getClosestDist = function (x, y, px, py) {
        return common_1.euclideanDistance(x, y, px, py);
    };
    BaseSeria.prototype._calckFinalPoints = function (_width, _height) {
        // do nothing
    };
    BaseSeria.prototype._setDefaults = function (config) {
        this.config = config;
    };
    BaseSeria.prototype._defaultLocator = function (_) {
        return [null, null];
    };
    BaseSeria.prototype._getPointType = function (form, color, showTooltip) {
        if (showTooltip) {
            return line_1.getShadeHelper(form, color, line_1.hoverMode);
        }
        else {
            return line_1.getShadeHelper(form, color, line_1.standarMode);
        }
    };
    return BaseSeria;
}());
exports.default = BaseSeria;


/***/ }),

/***/ "../ts-chart/sources/series/Donut.ts":
/*!*******************************************!*\
  !*** ../ts-chart/sources/series/Donut.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var circle_1 = __webpack_require__(/*! ../helpers/circle */ "../ts-chart/sources/helpers/circle.ts");
var common_1 = __webpack_require__(/*! ../helpers/common */ "../ts-chart/sources/helpers/common.ts");
var NoScaleSeria_1 = __webpack_require__(/*! ./NoScaleSeria */ "../ts-chart/sources/series/NoScaleSeria.ts");
var Donut = /** @class */ (function (_super) {
    __extends(Donut, _super);
    function Donut() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Donut.prototype.paint = function (width, height) {
        var _this = this;
        var radius;
        if (height > width) {
            radius = width / 2;
        }
        else {
            radius = height / 2;
        }
        var currentPercent = -0.25;
        var svg = [];
        var links = [];
        var tooltipData = [];
        this._points.forEach(function (item) {
            var percent = item[0], value = item[1], id = item[2], text = item[3], color = item[4];
            var err = percent === 0 || percent === 1 ? -0.000001 : 0;
            var _a = circle_1.getCoordinates(currentPercent, radius, radius), startX = _a[0], startY = _a[1];
            var avPercent = currentPercent + percent / 2;
            currentPercent += percent + err;
            var _b = circle_1.getCoordinates(currentPercent, radius, radius), endX = _b[0], endY = _b[1];
            var largeArcFlag = percent > 0.5 ? 1 : 0;
            var middleLine = circle_1.getCoordinates(avPercent, radius, radius);
            var isRight = avPercent > -0.25 && avPercent < 0.25;
            var isUp = avPercent > 0.5 || avPercent < 0;
            switch (_this.config.subType) {
                case "basic": {
                    var className = isRight ? "donut-value-title start-text" : "donut-value-title end-text";
                    var textPadding = 10;
                    var dy = isUp ? -textPadding * 2 : textPadding;
                    var linkStart = circle_1.getCoordinates(avPercent, radius + 10, radius + 10);
                    var className2 = isRight ? "donut-value start-text" : "donut-value end-text";
                    var text1 = dom_1.sv("text", { x: linkStart[0], y: linkStart[1] + dy, class: className }, [
                        common_1.verticalCenteredText(text.toString()),
                    ]);
                    var text2 = dom_1.sv("text", { x: linkStart[0], y: linkStart[1] + dy + 16, class: className2 }, [common_1.verticalCenteredText(value.toString())]);
                    links.push(text1);
                    links.push(text2);
                    break;
                }
                case "valueOnly": {
                    var className = isRight ? "donut-value start-text" : "donut-value end-text";
                    var textPadding = 10;
                    var dy = isUp ? -textPadding : textPadding;
                    var linkStart = circle_1.getCoordinates(avPercent, radius + 10, radius + 10);
                    var textSvg = dom_1.sv("text", { x: linkStart[0], y: linkStart[1] + dy, class: className }, [
                        common_1.verticalCenteredText(text.toString()),
                    ]);
                    links.push(textSvg);
                    break;
                }
                case "percentOnly": {
                    var percentText = dom_1.sv("text", {
                        x: (middleLine[0] * 7) / 9,
                        y: (middleLine[1] * 7) / 9,
                        class: "pie-inner-value",
                    }, [common_1.verticalCenteredText(Math.round(percent * 100) + "%")]);
                    links.push(percentText);
                    break;
                }
            }
            var d = "M " + startX + " " + startY + " A " + radius + " " + radius + " 0 " + largeArcFlag + " 1 " + endX + " " + endY + " L 0 0";
            var _c = circle_1.getCoordinates(avPercent, 4, 4), shiftX = _c[0], shiftY = _c[1];
            var currentSector = dom_1.sv("path", {
                d: d,
                _key: id,
                fill: color,
                class: "chart donut",
                onclick: [_this._handlers.onclick, item[1], item[2]],
                // eslint-disable-next-line @typescript-eslint/unbound-method
                onmouseout: [circle_1.pieLikeHandlers.onmouseout],
                // eslint-disable-next-line @typescript-eslint/unbound-method
                onmouseover: [circle_1.pieLikeHandlers.onmouseover, shiftX, shiftY],
            });
            svg.push(currentSector);
            if (_this._points.length === 1) {
                tooltipData.push([width / 2, height / 2]);
            }
            else {
                tooltipData.push([middleLine[0] * 0.8 + width / 2, middleLine[1] * 0.8 + height / 2]);
            }
        });
        this._center = [width / 2, height / 2];
        this._tooltipData = tooltipData;
        svg.push(dom_1.sv("circle", {
            cx: 0,
            cy: 0,
            r: (radius * 5) / 9,
            fill: "#FFFFFF",
        }));
        svg = svg.concat(links);
        return dom_1.sv("g", { transform: "translate(" + width / 2 + ", " + height / 2 + ")" }, svg);
    };
    return Donut;
}(NoScaleSeria_1.default));
exports.default = Donut;


/***/ }),

/***/ "../ts-chart/sources/series/Line.ts":
/*!******************************************!*\
  !*** ../ts-chart/sources/series/Line.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var common_1 = __webpack_require__(/*! ../helpers/common */ "../ts-chart/sources/helpers/common.ts");
var ScaleSeria_1 = __webpack_require__(/*! ./ScaleSeria */ "../ts-chart/sources/series/ScaleSeria.ts");
var Line = /** @class */ (function (_super) {
    __extends(Line, _super);
    function Line() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Line.prototype.paint = function (width, height) {
        var _this = this;
        _super.prototype.paint.call(this, width, height);
        var color = this.config.pointColor || this.config.color;
        var css = "chart " + this.config.type + " " + (this.config.css || "") + " " + (this.config.dashed ? "dash-line" : "");
        var svg = [];
        if (this.config.strokeWidth) {
            svg.push(this._getForm(this._points, this.config, css, width, height));
        }
        if (this.config.pointType) {
            var point_1 = this._getPointType(this.config.pointType, color, false);
            svg = svg.concat(this._points.map(function (p) { return point_1(p[0], p[1], common_1.calcPointRef(p[2], _this.id)); }));
        }
        return dom_1.sv("g", { class: "seria", _key: this.id }, svg);
    };
    Line.prototype._getForm = function (points, config, css, width, height) {
        var d = points.map(function (item, index) { return (index ? "L" : "M") + (item[0] + " " + item[1]); }).join(" ");
        var path = dom_1.sv("path", {
            id: "seria" + config.id,
            d: d,
            stroke: config.color,
            class: css,
            "stroke-width": this.config.strokeWidth,
            fill: "none",
        });
        return path;
    };
    Line.prototype._setDefaults = function (config) {
        var defaults = {
            alpha: 1,
            strokeWidth: 2,
            active: true,
            tooltip: true,
        };
        this.config = __assign(__assign({}, defaults), config);
    };
    return Line;
}(ScaleSeria_1.default));
exports.default = Line;


/***/ }),

/***/ "../ts-chart/sources/series/NoScaleSeria.ts":
/*!**************************************************!*\
  !*** ../ts-chart/sources/series/NoScaleSeria.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(/*! ../helpers/common */ "../ts-chart/sources/helpers/common.ts");
var BaseSeria_1 = __webpack_require__(/*! ./BaseSeria */ "../ts-chart/sources/series/BaseSeria.ts");
var NoScaleSeria = /** @class */ (function (_super) {
    __extends(NoScaleSeria, _super);
    function NoScaleSeria() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._center = [0, 0]; // (x, y)
        _this._tooltipData = []; // (x, y)
        return _this;
    }
    NoScaleSeria.prototype.scaleReady = function (sizes) {
        for (var key in sizes) {
            sizes[key] += this.config.paddings;
        }
        return sizes;
    };
    NoScaleSeria.prototype.dataReady = function () {
        var _this = this;
        var data = this._data;
        this._sum = data.reduce(function (sum, item) { return (item.$hidden ? sum : sum + parseFloat(_this._valueLocator(item))); }, 0);
        this._points = data.reduce(function (items, item, i) {
            if (item.$hidden) {
                return items;
            }
            var t = _this._textLocator(item);
            var v = _this._valueLocator(item);
            var x = v / _this._sum;
            var c = _this._colorLocator ? _this._colorLocator(item) : common_1.getDefaultColor(i);
            items.push([x, v, item.id, t, c]);
            return items;
        }, []);
        return this._points;
    };
    NoScaleSeria.prototype.toggle = function (id) {
        var item = this._data.getItem(id);
        if (!item) {
            return;
        }
        this._data.update(id, { $hidden: !item.$hidden });
    };
    NoScaleSeria.prototype.getClosest = function (x, y) {
        var percent = 1 - (Math.atan2(x - this._center[0], y - this._center[1]) + Math.PI) / Math.PI / 2;
        var points = this._points;
        for (var i = 0; i < points.length; i++) {
            if (points[i][0] >= percent) {
                return [0, this._tooltipData[i][0], this._tooltipData[i][1], points[i][2]];
            }
            percent -= points[i][0];
        }
        return [Infinity, null, null, null];
    };
    NoScaleSeria.prototype.getTooltipText = function (id) {
        if (this.config.tooltip) {
            var p = this._defaultLocator(this._data.getItem(id));
            if (this.config.tooltipTemplate) {
                return this.config.tooltipTemplate(p);
            }
            return p[0];
        }
    };
    NoScaleSeria.prototype.getTooltipType = function (_id) {
        return "simple";
    };
    NoScaleSeria.prototype._setDefaults = function (config) {
        var _this = this;
        var defaults = {
            subType: "basic",
            paddings: 20,
        };
        this.config = __assign(__assign({}, defaults), config);
        this._drawPointType = this._getPointType("empty", "none", this.config.tooltip);
        this._valueLocator = common_1.locator(config.value);
        this._textLocator = common_1.locator(config.text);
        if (config.color) {
            this._colorLocator = common_1.locator(config.color);
        }
        else if (config.monochrome) {
            this._colorLocator = function (item) { return common_1.getColorShade(config.monochrome, _this._getPercent(item) * 2); }; // 2 for more bright
        }
    };
    NoScaleSeria.prototype._defaultLocator = function (v) {
        return [this._valueLocator(v), this._textLocator(v)];
    };
    NoScaleSeria.prototype._getPercent = function (item) {
        return parseFloat(this._valueLocator(item)) / this._sum;
    };
    return NoScaleSeria;
}(BaseSeria_1.default));
exports.default = NoScaleSeria;


/***/ }),

/***/ "../ts-chart/sources/series/Pie.ts":
/*!*****************************************!*\
  !*** ../ts-chart/sources/series/Pie.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var circle_1 = __webpack_require__(/*! ../helpers/circle */ "../ts-chart/sources/helpers/circle.ts");
var common_1 = __webpack_require__(/*! ../helpers/common */ "../ts-chart/sources/helpers/common.ts");
var NoScaleSeria_1 = __webpack_require__(/*! ./NoScaleSeria */ "../ts-chart/sources/series/NoScaleSeria.ts");
var Pie = /** @class */ (function (_super) {
    __extends(Pie, _super);
    function Pie() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // todo move to NoScaleSeria
    Pie.prototype.paint = function (width, height) {
        var _this = this;
        var _a = this.config, stroke = _a.stroke, strokeWidth = _a.strokeWidth, gradient = _a.gradient, useLines = _a.useLines, showText = _a.showText, showTextTemplate = _a.showTextTemplate, subType = _a.subType;
        var radius;
        if (height > width) {
            radius = width / 2;
        }
        else {
            radius = height / 2;
        }
        var currentPercent = -0.25; // 0 percent is (1, 0) point, -.25 is (0, -1) point
        var tooltipData = [];
        var svg = [];
        var defs = [];
        var links = [];
        var pie = [];
        var lines = [];
        this._points.forEach(function (item) {
            var percent = item[0], value = item[1], id = item[2], text = item[3], color = item[4];
            var err = percent === 0 || percent === 1 ? -0.000001 : 0;
            var fill = color;
            if (gradient) {
                var grad = gradient(color);
                var gradientId = "gradient" + core_1.uid();
                var radialGradient = common_1.getRadialGradient(grad.options, grad.stops, gradientId);
                fill = "url(#" + gradientId + ")";
                defs.push(radialGradient);
            }
            var _a = circle_1.getCoordinates(currentPercent, radius, radius), startX = _a[0], startY = _a[1];
            var avPercent = currentPercent + percent / 2;
            var lineLength = avPercent < 0.25 ? 5 : -5; // from 0 to 180 right pointer, 180 to 360 left pointer
            var middleLine = circle_1.getCoordinates(avPercent, radius, radius);
            var _b = [5, 30], startPart = _b[0], endPart = _b[1];
            var _c = [
                circle_1.getCoordinates(avPercent, radius + startPart, radius + startPart),
                circle_1.getCoordinates(avPercent, radius + endPart, radius + endPart),
            ], linkStart = _c[0], linkEnd = _c[1];
            var className = avPercent > -0.25 && avPercent < 0.25 ? "pie-value start-text" : "pie-value end-text";
            if (useLines) {
                links.push(dom_1.sv("path", {
                    d: "M" + linkStart[0] + " " + linkStart[1] + " L" + linkEnd[0] + " " + linkEnd[1] + " h " + lineLength,
                    class: "pie-value-connector",
                }));
                var textSvg = dom_1.sv("text", {
                    x: linkEnd[0],
                    y: linkEnd[1],
                    dx: lineLength / 2 + lineLength > 0 ? 10 : -10,
                    class: className,
                }, [common_1.verticalCenteredText(text.toString())]);
                links.push(textSvg);
            }
            else {
                var textPadding = 5;
                var dy = avPercent > 0.5 || avPercent < 0 ? -textPadding : textPadding;
                var textSvg = dom_1.sv("text", { x: linkStart[0], y: linkStart[1] + dy, class: className }, [
                    common_1.verticalCenteredText(text.toString()),
                ]);
                links.push(textSvg);
            }
            if ((showText || showTextTemplate) && showText !== false) {
                var linkText = dom_1.sv("text", {
                    x: middleLine[0] * 0.7,
                    y: middleLine[1] * 0.7,
                    class: "pie-inner-value",
                }, [
                    showTextTemplate
                        ? common_1.verticalCenteredText(showTextTemplate(value.toString()))
                        : common_1.verticalCenteredText(value.toString()),
                ]);
                links.push(linkText);
            }
            if (subType === "percentOnly") {
                var percentText = dom_1.sv("text", {
                    x: middleLine[0] * 0.5,
                    y: middleLine[1] * 0.5,
                    class: "pie-inner-value",
                }, [common_1.verticalCenteredText(Math.round(percent * 100) + "%")]);
                links.push(percentText);
            }
            currentPercent += percent + err;
            var _d = circle_1.getCoordinates(currentPercent, radius, radius), endX = _d[0], endY = _d[1];
            var largeArcFlag = percent > 0.5 ? 1 : 0;
            var d = "M " + startX + " " + startY + " A " + radius + " " + radius + " 0 " + largeArcFlag + " 1 " + endX + " " + endY + " L 0 0";
            var _e = circle_1.getCoordinates(avPercent, 4, 4), shiftX = _e[0], shiftY = _e[1];
            var currentSector = dom_1.sv("path", {
                d: d,
                class: "chart pie",
                _key: id,
                fill: fill,
                onclick: [_this._handlers.onclick, item[1], item[2]],
                // eslint-disable-next-line @typescript-eslint/unbound-method
                onmouseover: [circle_1.pieLikeHandlers.onmouseover, shiftX, shiftY],
                // eslint-disable-next-line @typescript-eslint/unbound-method
                onmouseout: [circle_1.pieLikeHandlers.onmouseout],
            });
            pie.push(currentSector);
            if (_this._points.length > 1 && stroke) {
                var strokeOpts = {
                    "stroke-width": strokeWidth,
                    stroke: stroke,
                };
                var line = dom_1.sv("path", __assign({ d: "M0 0 L" + endX + " " + endY, fill: "none" }, strokeOpts));
                lines.push(line);
            }
            if (_this._points.length === 1) {
                tooltipData.push([width / 2, height / 2]);
            }
            else {
                tooltipData.push([middleLine[0] * 0.7 + width / 2, middleLine[1] * 0.7 + height / 2]);
            }
        });
        this._center = [width / 2, height / 2];
        this._tooltipData = tooltipData;
        svg.push(dom_1.sv("defs", defs));
        svg = svg.concat(pie);
        svg = svg.concat(lines);
        svg = svg.concat(links);
        return dom_1.sv("g", { transform: "translate(" + width / 2 + ", " + height / 2 + ")" }, svg);
    };
    return Pie;
}(NoScaleSeria_1.default));
exports.default = Pie;


/***/ }),

/***/ "../ts-chart/sources/series/Pie3D.ts":
/*!*******************************************!*\
  !*** ../ts-chart/sources/series/Pie3D.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var circle_1 = __webpack_require__(/*! ../helpers/circle */ "../ts-chart/sources/helpers/circle.ts");
var common_1 = __webpack_require__(/*! ../helpers/common */ "../ts-chart/sources/helpers/common.ts");
var NoScaleSeria_1 = __webpack_require__(/*! ./NoScaleSeria */ "../ts-chart/sources/series/NoScaleSeria.ts");
var Pie = /** @class */ (function (_super) {
    __extends(Pie, _super);
    function Pie() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // todo move to NoScaleSeria
    Pie.prototype.paint = function (width, height) {
        var _this = this;
        var _a = this.config, subType = _a.subType, useLines = _a.useLines, showText = _a.showText, showTextTemplate = _a.showTextTemplate;
        var radiusX;
        if (height > width) {
            radiusX = width / 2;
        }
        else {
            radiusX = height / 2;
        }
        var radiusY = radiusX * 0.5;
        var connector = radiusX / 5;
        var tooltipData = [];
        var currentPercent = -0.25;
        var svg = [];
        var links = [];
        this._points.forEach(function (item) {
            var percent = item[0], value = item[1], id = item[2], text = item[3], color = item[4];
            var err = percent === 0 || percent === 1 ? -0.000001 : 0;
            var _a = circle_1.getCoordinates(currentPercent, radiusX, radiusY), startX = _a[0], startY = _a[1];
            var avPercent = currentPercent + percent / 2;
            var lineLength = avPercent < 0.25 ? 5 : -5;
            var middleLine = circle_1.getCoordinates(avPercent, radiusX, radiusY);
            var delta = 0;
            if (avPercent > 0 && avPercent < 0.5) {
                delta = connector * Math.sin(2 * Math.PI * avPercent);
            }
            var linkStart = circle_1.getCoordinates(avPercent, radiusX + 5 + delta, radiusY + 5 + delta);
            var linkEnd = circle_1.getCoordinates(avPercent, radiusX + 30 + delta, radiusY + 30 + delta);
            var nextPercent = currentPercent + percent + err;
            var _b = circle_1.getCoordinates(nextPercent, radiusX, radiusY), endX = _b[0], endY = _b[1];
            var largeArcFlag = percent > 0.5 ? 1 : 0;
            var className = avPercent > -0.25 && avPercent < 0.25 ? "pie-value start-text" : "pie-value end-text";
            if (useLines) {
                links.push(dom_1.sv("path", {
                    d: "M" + linkStart[0] + " " + linkStart[1] + " L" + linkEnd[0] + " " + linkEnd[1] + " h " + lineLength,
                    class: "pie-value-connector",
                }));
                var textSvg = dom_1.sv("text", {
                    x: linkEnd[0],
                    y: linkEnd[1],
                    dx: lineLength / 2 + lineLength > 0 ? 10 : -10,
                    class: className,
                }, [common_1.verticalCenteredText(text.toString())]);
                links.push(textSvg);
            }
            else {
                var textPadding = 10;
                var dy = avPercent > 0.5 || avPercent < 0 ? -textPadding : textPadding;
                var textSvg = dom_1.sv("text", { x: linkStart[0], y: linkStart[1] + dy, class: className }, [
                    common_1.verticalCenteredText(text.toString()),
                ]);
                links.push(textSvg);
            }
            if ((showText || showTextTemplate) && showText !== false) {
                var textSvg = dom_1.sv("text", {
                    x: middleLine[0] * 0.7,
                    y: middleLine[1] * 0.7,
                    class: "pie-inner-value",
                }, [
                    showTextTemplate
                        ? common_1.verticalCenteredText(showTextTemplate(value))
                        : common_1.verticalCenteredText(value.toString()),
                ]);
                links.push(textSvg);
            }
            if (subType === "percentOnly") {
                var percentText = dom_1.sv("text", {
                    x: middleLine[0] * 0.6,
                    y: middleLine[1] * 0.6,
                    class: "pie-inner-value",
                }, [common_1.verticalCenteredText(Math.round(percent * 100) + "%")]);
                links.push(percentText);
            }
            // 3d block
            var addition = "";
            if (currentPercent <= 0 && nextPercent >= 0.5) {
                addition = "M " + radiusX + " 0 v " + connector + " A " + radiusX + " " + radiusY + " 0 1 1 " + -radiusX + " " + connector + " v " + -connector;
            }
            else if (currentPercent <= 0 && nextPercent < 0.5) {
                addition = "M " + radiusX + " 0 v " + connector + " A " + radiusX + " " + radiusY + " 0 0 1 " + endX + " " + (endY +
                    connector) + " v " + -connector;
            }
            else if (currentPercent > 0 && currentPercent <= 0.5 && nextPercent >= 0.5) {
                addition = "M " + startX + " " + startY + " v " + connector + " A " + radiusX + " " + radiusY + " 0 0 1 " + -radiusX + " " + connector + " v " + -connector;
            }
            else if (currentPercent > 0 && nextPercent < 0.5) {
                addition = "M " + startX + " " + startY + " v " + connector + " A " + radiusX + " " + radiusY + " 0 0 1 " + endX + " " + (endY +
                    connector) + " v " + -connector;
            }
            if (addition) {
                var additionPath = dom_1.sv("path", {
                    _key: id + "__shadow__",
                    d: addition,
                    fill: color,
                    onclick: [_this._handlers.onclick, item[1], item[2]],
                    class: "chart pie3d addition",
                    stroke: "none",
                    filter: "url(#shadow)",
                });
                svg.push(additionPath);
            }
            // end 3d block
            var d = "M " + startX + " " + startY + " A " + radiusX + " " + radiusY + " 0 " + largeArcFlag + " 1 " + endX + " " + endY + " L 0 0";
            svg.push(dom_1.sv("path", {
                d: d,
                _key: id,
                fill: color,
                stroke: "none",
                onclick: [_this._handlers.onclick, item[1], item[2]],
                class: "chart pie3d",
            }));
            if (_this._points.length === 1) {
                tooltipData.push([width / 2, height / 2]);
            }
            else {
                tooltipData.push([middleLine[0] * 0.7 + width / 2, middleLine[1] * 0.7 + height / 2]);
            }
            currentPercent = nextPercent;
        });
        this._center = [width / 2, height / 2];
        this._tooltipData = tooltipData;
        svg = svg.concat(links);
        return dom_1.sv("g", { transform: "translate(" + width / 2 + ", " + height / 2 + ")" }, svg);
    };
    return Pie;
}(NoScaleSeria_1.default));
exports.default = Pie;


/***/ }),

/***/ "../ts-chart/sources/series/Radar.ts":
/*!*******************************************!*\
  !*** ../ts-chart/sources/series/Radar.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var circle_1 = __webpack_require__(/*! ../helpers/circle */ "../ts-chart/sources/helpers/circle.ts");
var common_1 = __webpack_require__(/*! ../helpers/common */ "../ts-chart/sources/helpers/common.ts");
var BaseSeria_1 = __webpack_require__(/*! ./BaseSeria */ "../ts-chart/sources/series/BaseSeria.ts");
var Radar = /** @class */ (function (_super) {
    __extends(Radar, _super);
    function Radar() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Radar.prototype.addScale = function (type, scale) {
        this._scale = scale;
    };
    Radar.prototype.scaleReady = function (sizes) {
        for (var key in sizes) {
            sizes[key] += this.config.paddings;
        }
        return sizes;
    };
    Radar.prototype.dataReady = function (prev) {
        var _this = this;
        if (!this.config.active) {
            return (this._points = []);
        }
        this._points = this._data.map(function (item, index) {
            // raw values
            var value = _this._locator(item);
            var set = [value, value, item.id, value, value];
            if (prev) {
                set[1] += prev[index][1];
            }
            return set;
        });
        return this._points;
    };
    Radar.prototype.getTooltipText = function (id) {
        if (this.config.tooltip) {
            var p = this._defaultLocator(this._data.getItem(id));
            if (this.config.tooltipTemplate) {
                return this.config.tooltipTemplate(p);
            }
            return p;
        }
    };
    Radar.prototype.paint = function (width, height) {
        var _this = this;
        _super.prototype.paint.call(this, width, height);
        if (!this.config.active) {
            return;
        }
        var config = this.config;
        var svg = [];
        var d = this._points.map(function (item, first) { return (first ? "L" : "M") + (item[0] + " " + item[1]); }).join(" ") + "Z";
        svg.push(dom_1.sv("path", {
            d: d,
            stroke: config.color,
            "stroke-width": config.strokeWidth,
            fill: config.fill,
            "fill-opacity": config.alpha,
            class: "chart radar",
        }));
        if (config.pointType) {
            var points = this._points.map(function (p) {
                return _this._drawPointType(p[0], p[1], common_1.calcPointRef(p[2], _this.id));
            });
            svg.push(dom_1.sv("g", points));
        }
        return dom_1.sv("g", { id: "seria" + config.id }, svg);
    };
    Radar.prototype._calckFinalPoints = function (width, height) {
        var _this = this;
        var radius;
        if (height > width) {
            radius = width / 2;
        }
        else {
            radius = height / 2;
        }
        var scalePercent = 1 / this._data.getLength();
        var currentPercent = -0.25 - scalePercent;
        this._points.forEach(function (item, index) {
            currentPercent += scalePercent;
            var value = _this._scale.point(item[0]);
            var real = circle_1.getCoordinates(currentPercent, value * radius, value * radius);
            // scaled values
            item[0] = real[0] + width / 2;
            item[1] = real[1] + height / 2;
        });
    };
    Radar.prototype._defaultLocator = function (v) {
        return this._locator(v);
    };
    Radar.prototype._setDefaults = function (config) {
        var defaults = {
            strokeWidth: 2,
            active: true,
            tooltip: true,
            paddings: 5,
            color: "none",
            fill: "none",
            pointType: "circle",
        };
        this._locator = common_1.locator(config.value);
        config.scales = config.scales || ["radial"];
        this.config = __assign(__assign({}, defaults), config);
        if (this.config.pointType) {
            var color = this.config.pointColor || this.config.color;
            this._drawPointType = this._getPointType(this.config.pointType, color, this.config.tooltip);
        }
    };
    return Radar;
}(BaseSeria_1.default));
exports.default = Radar;


/***/ }),

/***/ "../ts-chart/sources/series/ScaleSeria.ts":
/*!************************************************!*\
  !*** ../ts-chart/sources/series/ScaleSeria.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var common_1 = __webpack_require__(/*! ../helpers/common */ "../ts-chart/sources/helpers/common.ts");
var BaseSeria_1 = __webpack_require__(/*! ./BaseSeria */ "../ts-chart/sources/series/BaseSeria.ts");
var ScaleSeria = /** @class */ (function (_super) {
    __extends(ScaleSeria, _super);
    function ScaleSeria() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ScaleSeria.prototype.addScale = function (type, scale) {
        if (type === "bottom" || type === "top") {
            this.xScale = scale;
            this._xLocator = scale.locator;
        }
        else {
            this.yScale = scale;
            this._yLocator = common_1.locator(this.config.value);
        }
    };
    ScaleSeria.prototype.paint = function (width, height) {
        _super.prototype.paint.call(this, width, height);
    };
    ScaleSeria.prototype.dataReady = function (prev) {
        var _this = this;
        if (!this.config.active) {
            return (this._points = []);
        }
        this._points = this._data.map(function (item, index) {
            // raw values
            var x = _this._xLocator(item);
            var y = _this._yLocator(item);
            var set = [x, y, item.id, x, y];
            if (prev) {
                set[1] += prev[index][1];
            }
            return set;
        });
        return this._points;
    };
    ScaleSeria.prototype._calckFinalPoints = function (width, height) {
        var _this = this;
        this._points.forEach(function (item, index) {
            // scaled values
            item[0] = _this.xScale.point(item[0]) * width || 0;
            item[1] = _this.yScale.point(item[1]) * height || 0;
        });
    };
    ScaleSeria.prototype._defaultLocator = function (v) {
        return [this._yLocator(v), this._xLocator(v)];
    };
    return ScaleSeria;
}(BaseSeria_1.default));
exports.default = ScaleSeria;


/***/ }),

/***/ "../ts-chart/sources/series/Scatter.ts":
/*!*********************************************!*\
  !*** ../ts-chart/sources/series/Scatter.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Line_1 = __webpack_require__(/*! ./Line */ "../ts-chart/sources/series/Line.ts");
var common_1 = __webpack_require__(/*! ../helpers/common */ "../ts-chart/sources/helpers/common.ts");
var Scatter = /** @class */ (function (_super) {
    __extends(Scatter, _super);
    function Scatter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Scatter.prototype.addScale = function (type, scale) {
        if (type === "bottom" || type === "top") {
            this.xScale = scale;
            this._xLocator = common_1.locator(this.config.value);
        }
        else {
            this.yScale = scale;
            this._yLocator = common_1.locator(this.config.valueY);
        }
    };
    Scatter.prototype._setDefaults = function (config) {
        var defaults = {
            active: true,
            tooltip: true,
            pointType: "rect",
        };
        this.config = __assign(__assign({}, defaults), config);
        var showTooltip = this.config.tooltip;
        var point = this.config.pointType;
        var color = this.config.pointColor || this.config.color;
        if (point) {
            this._drawPointType = this._getPointType(point, color, showTooltip);
        }
    };
    return Scatter;
}(Line_1.default));
exports.default = Scatter;


/***/ }),

/***/ "../ts-chart/sources/series/Spline.ts":
/*!********************************************!*\
  !*** ../ts-chart/sources/series/Spline.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var spline_1 = __webpack_require__(/*! ../helpers/spline */ "../ts-chart/sources/helpers/spline.ts");
var Line_1 = __webpack_require__(/*! ./Line */ "../ts-chart/sources/series/Line.ts");
var Spline = /** @class */ (function (_super) {
    __extends(Spline, _super);
    function Spline() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Spline.prototype._getForm = function (points, config, css, width, height) {
        var color = config.color;
        var className = config.css;
        var d = spline_1.default(points);
        return dom_1.sv("path", {
            id: "seria" + config.id,
            d: d,
            class: className,
            stroke: color,
            "stroke-width": 2,
            fill: "none",
        });
    };
    return Spline;
}(Line_1.default));
exports.default = Spline;


/***/ }),

/***/ "../ts-chart/sources/series/SplineArea.ts":
/*!************************************************!*\
  !*** ../ts-chart/sources/series/SplineArea.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var spline_1 = __webpack_require__(/*! ../helpers/spline */ "../ts-chart/sources/helpers/spline.ts");
var Area_1 = __webpack_require__(/*! ./Area */ "../ts-chart/sources/series/Area.ts");
var SplineArea = /** @class */ (function (_super) {
    __extends(SplineArea, _super);
    function SplineArea() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SplineArea.prototype._form = function (width, height, svg, prev) {
        var _a = this.config, fill = _a.fill, alpha = _a.alpha, strokeWidth = _a.strokeWidth, color = _a.color, id = _a.id;
        var className = this.config.css;
        var d = "";
        var first = this._points[0];
        if (prev) {
            d = spline_1.default([].concat(prev).reverse()) + " " + spline_1.default(this._points, true) + " Z";
        }
        else {
            d = "M" + first[0] + " " + height + " V " + first[1] + " " + spline_1.default(this._points) + " V" + height + " H " + first[0];
        }
        if (strokeWidth) {
            var line = spline_1.default(this._points);
            var splinePath = dom_1.sv("path", {
                d: line,
                "stroke-width": strokeWidth,
                stroke: color,
                fill: "none",
                "stroke-linecap": "butt",
                class: className,
            });
            svg.push(splinePath);
        }
        var path = dom_1.sv("path", {
            id: "seria" + id,
            d: d,
            class: className,
            fill: fill,
            "fill-opacity": alpha,
            stroke: "none",
        });
        svg.push(path);
        return svg;
    };
    return SplineArea;
}(Area_1.default));
exports.default = SplineArea;


/***/ }),

/***/ "../ts-chart/sources/series/Stacker.ts":
/*!*********************************************!*\
  !*** ../ts-chart/sources/series/Stacker.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var Stacker = /** @class */ (function () {
    function Stacker() {
        this._series = [];
    }
    Stacker.prototype.add = function (seria) {
        this._series.push(seria);
    };
    Stacker.prototype.dataReady = function (prev) {
        this._toPaint = this._series.filter(function (serie) {
            var next = serie.dataReady(prev);
            if (next.length) {
                prev = next;
                return true;
            }
            return false;
        });
        return prev || [];
    };
    Stacker.prototype.getPoints = function () {
        if (this._toPaint.length) {
            return this._toPaint[0].getPoints().concat(this._toPaint[this._toPaint.length - 1].getPoints());
        }
        return [];
    };
    Stacker.prototype.paint = function (width, height, prev) {
        var svg = [];
        var markers = [];
        this._toPaint.forEach(function (seria) {
            if (seria.paintformAndMarkers) {
                var _a = seria.paintformAndMarkers(width, height, prev), content = _a[0], seriesMarkers = _a[1];
                svg.push(content);
                markers.push(seriesMarkers);
            }
            else {
                var content = seria.paint(width, height, prev);
                svg.push(content);
            }
            prev = seria.getPoints();
        });
        return dom_1.sv("g", svg.concat(markers));
    };
    return Stacker;
}());
exports.default = Stacker;


/***/ }),

/***/ "../ts-chart/sources/series/index.ts":
/*!*******************************************!*\
  !*** ../ts-chart/sources/series/index.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Area_1 = __webpack_require__(/*! ./Area */ "../ts-chart/sources/series/Area.ts");
var Bar_1 = __webpack_require__(/*! ./Bar */ "../ts-chart/sources/series/Bar.ts");
var BarX_1 = __webpack_require__(/*! ./BarX */ "../ts-chart/sources/series/BarX.ts");
var Donut_1 = __webpack_require__(/*! ./Donut */ "../ts-chart/sources/series/Donut.ts");
var Line_1 = __webpack_require__(/*! ./Line */ "../ts-chart/sources/series/Line.ts");
var Pie_1 = __webpack_require__(/*! ./Pie */ "../ts-chart/sources/series/Pie.ts");
var Pie3D_1 = __webpack_require__(/*! ./Pie3D */ "../ts-chart/sources/series/Pie3D.ts");
var Radar_1 = __webpack_require__(/*! ./Radar */ "../ts-chart/sources/series/Radar.ts");
var Scatter_1 = __webpack_require__(/*! ./Scatter */ "../ts-chart/sources/series/Scatter.ts");
var Spline_1 = __webpack_require__(/*! ./Spline */ "../ts-chart/sources/series/Spline.ts");
var SplineArea_1 = __webpack_require__(/*! ./SplineArea */ "../ts-chart/sources/series/SplineArea.ts");
var seriesTypes = {
    line: Line_1.default,
    spline: Spline_1.default,
    area: Area_1.default,
    splineArea: SplineArea_1.default,
    scatter: Scatter_1.default,
    pie: Pie_1.default,
    pie3D: Pie3D_1.default,
    donut: Donut_1.default,
    radar: Radar_1.default,
    bar: Bar_1.default,
    xbar: BarX_1.default,
};
exports.default = seriesTypes;


/***/ }),

/***/ "../ts-chart/sources/shapes/legend.ts":
/*!********************************************!*\
  !*** ../ts-chart/sources/shapes/legend.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var figureWidth = 10;
var forms = {
    circle: function (color, fill, fillOpacity) {
        return dom_1.sv("circle", {
            id: core_1.uid(),
            r: figureWidth / 2,
            fill: fill,
            class: "figure " + (color !== "none" ? "with-stroke" : ""),
            "stroke-width": 2,
            "fill-opacity": fillOpacity,
            stroke: color,
            transform: "translate(0, -1)",
        });
    },
    rect: function (color, fill, fillOpacity) {
        return dom_1.sv("rect", {
            id: core_1.uid(),
            fill: fill,
            "fill-opacity": fillOpacity,
            width: figureWidth,
            "stroke-width": 2,
            height: figureWidth,
            class: "figure " + (color !== "none" ? "with-stroke" : ""),
            stroke: color,
            transform: "translate(" + -figureWidth / 2 + ", " + -figureWidth / 2 + ")",
        });
    },
};
function legendShape(form, item) {
    if (typeof form === "string") {
        form = forms[form];
    }
    return form(item.color || "none", item.fill, item.alpha || 1);
}
exports.legendShape = legendShape;


/***/ }),

/***/ "../ts-chart/sources/shapes/line.ts":
/*!******************************************!*\
  !*** ../ts-chart/sources/shapes/line.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var common_1 = __webpack_require__(/*! ../helpers/common */ "../ts-chart/sources/helpers/common.ts");
function hoverMode(cfg) {
    // cfg.fill = cfg.stroke; ??
    return cfg;
}
exports.hoverMode = hoverMode;
function standarMode(cfg) {
    return cfg;
}
exports.standarMode = standarMode;
var forms = {
    circle: function (color, fill, _alpha, x, y, id, mode) {
        var config = {
            _ref: id,
            cx: x,
            cy: y,
            r: 4,
            class: "figure point-circle",
            fill: fill,
            stroke: color,
            "stroke-width": 2,
        };
        return dom_1.sv("circle", mode(config));
    },
    rect: function (color, fill, _alpha, x, y, id, mode) {
        var config = {
            _ref: id,
            x: x - 4,
            y: y - 4,
            width: 8,
            height: 8,
            class: "figure point-rect",
            fill: fill,
            stroke: color,
            "stroke-width": 2,
        };
        return dom_1.sv("rect", mode(config));
    },
    rhombus: function (color, fill, _alpha, x, y, id, mode) {
        var config = {
            _ref: id,
            points: x - 5 + "," + y + " " + x + "," + (y + 5) + " " + (x + 5) + "," + y + " " + x + "," + (y - 5),
            class: "figure point-rhombus",
            fill: fill,
            stroke: color,
            "stroke-width": 2,
        };
        return dom_1.sv("polygon", mode(config));
    },
    triangle: function (color, fill, _alpha, x, y, id, mode) {
        var config = {
            _ref: id,
            points: x + "," + (y - 5) + " " + (x + 5) + "," + (y + 5) + " " + (x - 5) + "," + (y + 5),
            class: "figure point-triangle",
            fill: fill,
            stroke: color,
            "stroke-width": 2,
        };
        return dom_1.sv("polygon", mode(config));
    },
    simpleCircle: function (color, _fill, _alpha, x, y, id, mode) {
        var config = {
            _ref: id,
            cx: x,
            cy: y,
            r: 3,
            class: "figure point-simple-circle",
            fill: color,
        };
        return dom_1.sv("circle", mode(config));
    },
    simpleRect: function (color, _fill, _alpha, x, y, id, mode) {
        var config = {
            _ref: id,
            x: x - 3,
            y: y - 3,
            width: 6,
            height: 6,
            class: "figure point-simple-rect",
            fill: color,
        };
        return dom_1.sv("rect", mode(config));
    },
    empty: function () {
        return null;
    },
};
function getHelper(type) {
    var helper = forms[type.toString()];
    if (!helper) {
        throw new Error("unknown point type");
    }
    return helper;
}
exports.getHelper = getHelper;
function getShadeHelper(type, color, mode) {
    var helper = getHelper(type);
    color = color || "none";
    var shade = common_1.getColorShade(color, 0.2);
    return function (x, y, id) {
        return helper(color, shade, "", x, y, id, mode);
    };
}
exports.getShadeHelper = getShadeHelper;


/***/ }),

/***/ "../ts-chart/sources/types.ts":
/*!************************************!*\
  !*** ../ts-chart/sources/types.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ChartEvents;
(function (ChartEvents) {
    ChartEvents["toggleSeries"] = "toggleSeries";
    ChartEvents["chartMouseMove"] = "chartMouseMove";
    ChartEvents["chartMouseLeave"] = "chartMouseLeave";
    ChartEvents["resize"] = "resize";
    ChartEvents["serieClick"] = "serieClick";
})(ChartEvents = exports.ChartEvents || (exports.ChartEvents = {}));


/***/ }),

/***/ "../ts-colorpicker/index.ts":
/*!**********************************!*\
  !*** ../ts-colorpicker/index.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Colorpicker */ "../ts-colorpicker/sources/Colorpicker.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-colorpicker/sources/types.ts"));
__export(__webpack_require__(/*! ./sources/helpers/color */ "../ts-colorpicker/sources/helpers/color.ts"));
var en_1 = __webpack_require__(/*! ./sources/locales/en */ "../ts-colorpicker/sources/locales/en.ts");
exports.locale = en_1.default;


/***/ }),

/***/ "../ts-colorpicker/sources/Colorpicker.ts":
/*!************************************************!*\
  !*** ../ts-colorpicker/sources/Colorpicker.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var color_1 = __webpack_require__(/*! ./helpers/color */ "../ts-colorpicker/sources/helpers/color.ts");
var colors_1 = __webpack_require__(/*! ./colors */ "../ts-colorpicker/sources/colors.ts");
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-colorpicker/sources/locales/en.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-colorpicker/sources/types.ts");
// tslint:disable-next-line
var tooltip_1 = __webpack_require__(/*! @dhx/ts-message/sources/tooltip */ "../ts-message/sources/tooltip.ts");
// tslint:disable-next-line
var ts_message_1 = __webpack_require__(/*! @dhx/ts-message/ */ "../ts-message/index.ts");
var picker_1 = __webpack_require__(/*! ./picker */ "../ts-colorpicker/sources/picker.ts");
var calculations_1 = __webpack_require__(/*! ./helpers/calculations */ "../ts-colorpicker/sources/helpers/calculations.ts");
var Colorpicker = /** @class */ (function (_super) {
    __extends(Colorpicker, _super);
    function Colorpicker(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this._setPaletteGrip = function (e) {
            var paletteRect = _this.getRootView().refs.picker_palette.el.getBoundingClientRect();
            var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;
            var clientY = e.targetTouches ? e.targetTouches[0].clientY : e.clientY;
            var top = clientY - paletteRect.top;
            var left = clientX - paletteRect.left;
            var _a = calculations_1.calculatePaletteGrip(paletteRect, top, left), s = _a.s, v = _a.v;
            _this._pickerState.hsv.s = s;
            _this._pickerState.hsv.v = v;
            _this.paint();
        };
        _this._setRangeGrip = function (e) {
            var rangeRect = _this.getRootView().refs.hue_range.el.getBoundingClientRect();
            var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;
            var left = clientX - rangeRect.left;
            var _a = calculations_1.calculateRangeGrip(rangeRect, left), h = _a.h, rangeLeft = _a.rangeLeft;
            _this._pickerState.hsv.h = h;
            _this._pickerState.rangeLeft = rangeLeft;
            _this.paint();
        };
        _this._onColorClick = function (_e, node) {
            _this._selected = node.data.color.toUpperCase();
            _this.events.fire(types_1.ColorpickerEvents.change, [_this._selected]);
            _this.events.fire(types_1.ColorpickerEvents.colorChange, [_this._selected]); // TODO: remove suite_7.0
        };
        _this._container = container;
        _this.config = core_1.extend({
            css: "",
            grayShades: true,
            pickerOnly: false,
            paletteOnly: false,
            customColors: [],
            palette: colors_1.palette,
            width: "238px",
            mode: "palette",
        }, _this.config);
        if (!_this.config.palette) {
            _this.config.palette = colors_1.palette;
        }
        if (_this.config.customColors) {
            _this.config.customColors = _this.config.customColors.map(function (color) { return color.toUpperCase(); });
        }
        _this._pickerState = {
            hsv: { h: 0, s: 1, v: 1 },
            customHex: "",
        };
        _this.events = new events_1.EventSystem(_this);
        _this._setHandlers();
        var view = dom_1.create({ render: function () { return _this._getContent(); } });
        _this.mount(_this._container, view);
        return _this;
    }
    Colorpicker.prototype.destructor = function () {
        this.unmount();
    };
    Colorpicker.prototype.clear = function () {
        this._selected = "";
        this.events.fire(types_1.ColorpickerEvents.change, [this._selected]);
        this.paint();
    };
    Colorpicker.prototype.setValue = function (value) {
        if (this._focusColor(value)) {
            this.paint();
            this.events.fire(types_1.ColorpickerEvents.change, [this._selected]);
            this.events.fire(types_1.ColorpickerEvents.colorChange, [this._selected]); // TODO: remove suite_7.0
        }
    };
    Colorpicker.prototype.setFocus = function (value) {
        if (this._focusColor(value)) {
            this.paint();
        }
    };
    Colorpicker.prototype.getValue = function () {
        return this._selected || "";
    };
    Colorpicker.prototype.getCustomColors = function () {
        return this.config.customColors;
    };
    Colorpicker.prototype.setCustomColors = function (customColors) {
        this.config.customColors = customColors.map(function (color) { return color.toUpperCase(); });
        this.paint();
    };
    Colorpicker.prototype.setCurrentMode = function (mode) {
        if (mode === "palette" || mode === "picker") {
            this.config.mode = mode;
            this.events.fire(types_1.ColorpickerEvents.modeChange, [mode]);
            this.events.fire(types_1.ColorpickerEvents.viewChange, [mode]); // TODO: remove suite_7.0
            this.paint();
        }
    };
    Colorpicker.prototype.getCurrentMode = function () {
        return this.config.mode;
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Colorpicker.prototype.getView = function () {
        return this.getCurrentMode();
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Colorpicker.prototype.setView = function (mode) {
        this.setCurrentMode(mode);
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Colorpicker.prototype.focusValue = function (value) {
        this.setFocus(value);
    };
    Colorpicker.prototype._setHandlers = function () {
        var _this = this;
        this._handlers = {
            click: {
                ".dhx_palette__cell": this._onColorClick,
            },
            mousedown: function (e) {
                _this._pickerMove(e);
            },
            touchstart: function (e) {
                _this._pickerMove(e);
            },
            buttonsClick: function (button) {
                _this.setCurrentMode("palette");
                if (button === "cancel") {
                    _this.events.fire(types_1.ColorpickerEvents.cancelClick, []);
                    return;
                }
                if (button === "apply" && !_this.config.customColors.includes(_this._pickerState.background)) {
                    _this.setValue(_this._pickerState.background);
                    _this.events.fire(types_1.ColorpickerEvents.apply, []);
                    _this.events.fire(types_1.ColorpickerEvents.selectClick, []); // TODO: remove suite_7.0
                }
            },
            customColorClick: function () {
                _this.setView("picker");
            },
            oninput: function (e) {
                if (_this._inputTimeout) {
                    clearTimeout(_this._inputTimeout);
                }
                _this._inputTimeout = setTimeout(function () {
                    var val = e.target.value;
                    if (val.indexOf("#") === -1) {
                        val = "#" + val;
                    }
                    _this._pickerState.customHex = val;
                    if (color_1.isHex(val)) {
                        _this._pickerState.hsv = color_1.HexToHSV(val);
                        _this.paint();
                    }
                }, 100);
            },
            contextmenu: {
                ".dhx_palette__cell": function (e, node) {
                    e.preventDefault();
                    var index = _this.config.customColors.indexOf(node.data.color);
                    if (index !== -1) {
                        _this._removeCustomColor(index);
                    }
                    _this.paint();
                    return;
                },
            },
            mouseover: {
                ".dhx_palette__cell": function (e) {
                    if (e.target) {
                        tooltip_1.tooltip(en_1.default.rightClickToDelete, {
                            node: e.target,
                            position: ts_message_1.Position.bottom,
                        });
                    }
                },
                ".dhx_colorpicker-custom-colors__picker": function (e) {
                    if (e.target) {
                        tooltip_1.tooltip(en_1.default.addNewColor, {
                            node: e.target,
                            position: ts_message_1.Position.bottom,
                        });
                    }
                },
            },
        };
        this.events.on(types_1.ColorpickerEvents.change, function () {
            _this.paint();
        });
        // TODO: remove suite_7.0
        this.events.on(types_1.ColorpickerEvents.colorChange, function () {
            _this.paint();
        });
    };
    Colorpicker.prototype._pickerMove = function (e) {
        var name = html_1.locate(e);
        this._pickerState.customHex = "";
        if (name === "picker_palette") {
            this._setPaletteGrip(e);
        }
        else {
            this._setRangeGrip(e);
        }
        var handler = name === "picker_palette" ? this._setPaletteGrip : this._setRangeGrip;
        var move = e.targetTouches ? "touchmove" : "mousemove";
        var up = e.targetTouches ? "touchend" : "mouseup";
        document.addEventListener(move, handler);
        document.addEventListener(up, function () {
            document.removeEventListener(move, handler);
        });
        this.paint();
    };
    Colorpicker.prototype._focusColor = function (value) {
        if (value === undefined || value.length < 4) {
            return false;
        }
        var hex = value.toUpperCase();
        if (!color_1.isHex(hex)) {
            return false;
        }
        var isInPalette = this.config.palette.reduce(function (state, col) {
            if (state) {
                return state;
            }
            col.forEach(function (color) {
                if (color.toUpperCase() === hex) {
                    state = true;
                    return;
                }
            });
            return state;
        }, false);
        var isInGrayShades = colors_1.grayShades.includes(hex);
        if (!isInPalette && !isInGrayShades) {
            var colors = this.getCustomColors();
            if (!colors.includes(hex.toUpperCase())) {
                colors.push(hex.toUpperCase());
            }
        }
        this._selected = hex || null;
        this._pickerState.hsv = color_1.HexToHSV(hex);
        return true;
    };
    Colorpicker.prototype._removeCustomColor = function (index) {
        this.config.customColors.splice(index, 1);
    };
    Colorpicker.prototype._getCells = function (colors, cellClass) {
        var _this = this;
        if (cellClass === void 0) { cellClass = ""; }
        return colors.reduce(function (cells, color) {
            var selected = (_this._selected || "").toUpperCase() === color.toUpperCase()
                ? "dhx_palette__cell--selected"
                : "";
            cells.push(dom_1.el(".dhx_palette__cell", {
                class: selected + " " + cellClass,
                _data: { color: color },
                style: "background:" + color,
            }));
            return cells;
        }, []);
    };
    Colorpicker.prototype._getGrayShades = function () {
        return dom_1.el(".dhx_palette__row", this._getCells(colors_1.grayShades));
    };
    Colorpicker.prototype._getPalette = function () {
        var _this = this;
        return this.config.palette.reduce(function (total, row) {
            total.push(dom_1.el(".dhx_palette__col", _this._getCells(row)));
            return total;
        }, []);
    };
    Colorpicker.prototype._getContent = function () {
        var view;
        if (this.config.pickerOnly) {
            view = [picker_1.getPicker(this, this._pickerState, this._handlers)];
        }
        else {
            view =
                this.config.mode === "palette"
                    ? __spreadArrays([
                        this.config.grayShades && this._getGrayShades()
                    ], this._getPalette(), [
                        !this.config.paletteOnly &&
                            dom_1.el(".dhx_colorpicker-custom-colors", {
                                onmouseover: this._handlers.mouseover,
                            }, [
                                dom_1.el(".dhx_colorpicker-custom-colors__header", [en_1.default.customColors]),
                                dom_1.el(".dhx_palette--custom.dhx_palette__row", __spreadArrays(this._getCells(this.config.customColors, "dhx_custom-color__cell"), [
                                    dom_1.el(".dhx_colorpicker-custom-colors__picker", {
                                        class: "dxi dxi-plus",
                                        onclick: this._handlers.customColorClick,
                                        onmouseover: this._handlers.mouseover,
                                    }),
                                ])),
                            ]),
                    ]) : [picker_1.getPicker(this, this._pickerState, this._handlers)];
        }
        return dom_1.el(".dhx_widget.dhx_colorpicker", { class: this.config.css, style: { width: this.config.width } }, [
            dom_1.el(".dhx_palette", {
                onclick: this._handlers.click,
                oncontextmenu: this._handlers.contextmenu,
            }, view),
        ]);
    };
    return Colorpicker;
}(view_1.View));
exports.Colorpicker = Colorpicker;


/***/ }),

/***/ "../ts-colorpicker/sources/colors.ts":
/*!*******************************************!*\
  !*** ../ts-colorpicker/sources/colors.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.grayShades = [
    "#000000",
    "#4C4C4C",
    "#666666",
    "#808080",
    "#999999",
    "#B3B3B3",
    "#CCCCCC",
    "#E6E6E6",
    "#F2F2F2",
    "#FFFFFF",
];
exports.palette = [
    ["#D4DAE4", "#B0B8CD", "#949DB1", "#727A8C", "#5E6677", "#3F4757", "#1D2534"],
    ["#FFCDD2", "#FE9998", "#F35C4E", "#E94633", "#D73C2D", "#CA3626", "#BB2B1A"],
    ["#F9E6AD", "#F4D679", "#EDB90F", "#EAA100", "#EA8F00", "#EA7E00", "#EA5D00"],
    ["#BCE4CE", "#90D2AF", "#33B579", "#36955F", "#247346", "#1D5B38", "#17492D"],
    ["#BDF0E9", "#92E7DC", "#02D7C5", "#11B3A5", "#018B80", "#026B60", "#024F43"],
    ["#B3E5FC", "#81D4FA", "#29B6F6", "#039BE5", "#0288D1", "#0277BD", "#01579B"],
    ["#AEC1FF", "#88A3F9", "#5874CD", "#2349AE", "#163FA2", "#083596", "#002381"],
    ["#C5C0DA", "#9F97C1", "#7E6BAD", "#584A8F", "#4F4083", "#473776", "#3A265F"],
    ["#D6BDCC", "#C492AC", "#A9537C", "#963A64", "#81355A", "#6E3051", "#4C2640"],
    ["#D2C5C1", "#B4A09A", "#826358", "#624339", "#5D4037", "#4E342E", "#3E2723"],
];


/***/ }),

/***/ "../ts-colorpicker/sources/helpers/calculations.ts":
/*!*********************************************************!*\
  !*** ../ts-colorpicker/sources/helpers/calculations.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function calculatePaletteGrip(clientRect, top, left) {
    var bottom = clientRect.height;
    var right = clientRect.width;
    top = top < 0 ? 0 : top > bottom ? bottom : top;
    left = left < 0 ? 0 : left > right ? right : left;
    var pLeft = Math.round(left / (right / 100));
    var pTop = 100 - Math.round(top / (bottom / 100));
    return {
        s: pLeft / 100,
        v: pTop / 100,
    };
}
exports.calculatePaletteGrip = calculatePaletteGrip;
function calculateRangeGrip(clientRect, left) {
    var right = clientRect.width;
    left = left < 0 ? 0 : left > right ? right : left;
    return {
        h: Math.round(360 * (left / right)),
        rangeLeft: left,
    };
}
exports.calculateRangeGrip = calculateRangeGrip;


/***/ }),

/***/ "../ts-colorpicker/sources/helpers/color.ts":
/*!**************************************************!*\
  !*** ../ts-colorpicker/sources/helpers/color.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function HSVtoRGB(hsv) {
    var rgb = { r: 0, g: 0, b: 0 };
    var h = hsv.h / 60;
    var s = hsv.s;
    var v = hsv.v;
    var i = Math.floor(h) % 6;
    var f = h - Math.floor(h);
    var p = 255 * v * (1 - s);
    var q = 255 * v * (1 - s * f);
    var t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch (i) {
        case 0:
            rgb.r = v;
            rgb.g = t;
            rgb.b = p;
            break;
        case 1:
            rgb.r = q;
            rgb.g = v;
            rgb.b = p;
            break;
        case 2:
            rgb.r = p;
            rgb.g = v;
            rgb.b = t;
            break;
        case 3:
            rgb.r = p;
            rgb.g = q;
            rgb.b = v;
            break;
        case 4:
            rgb.r = t;
            rgb.g = p;
            rgb.b = v;
            break;
        case 5:
            rgb.r = v;
            rgb.g = p;
            rgb.b = q;
            break;
    }
    for (var key in rgb) {
        rgb[key] = Math.round(rgb[key]);
    }
    return rgb;
}
exports.HSVtoRGB = HSVtoRGB;
function RGBToHex(rgb) {
    return Object.keys(rgb).reduce(function (hex, c) {
        var h = rgb[c].toString(16).toUpperCase();
        h = h.length === 1 ? "0" + h : h;
        return (hex += h);
    }, "#");
}
exports.RGBToHex = RGBToHex;
function HexToRGB(hex) {
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function (_m, r, g, b) { return r + r + g + g + b + b; });
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result
        ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16),
        }
        : null;
}
exports.HexToRGB = HexToRGB;
function RGBToHSV(rgb) {
    var h;
    var s;
    var r = rgb.r / 255;
    var g = rgb.g / 255;
    var b = rgb.b / 255;
    var v = Math.max(r, g, b);
    var diff = v - Math.min(r, g, b);
    var diffc = function (c) {
        return (v - c) / 6 / diff + 1 / 2;
    };
    if (diff === 0) {
        h = s = 0;
    }
    else {
        s = diff / v;
        var rdif = diffc(r);
        var gdif = diffc(g);
        var bdif = diffc(b);
        if (r === v) {
            h = bdif - gdif;
        }
        else if (g === v) {
            h = 1 / 3 + rdif - bdif;
        }
        else if (b === v) {
            h = 2 / 3 + gdif - rdif;
        }
        if (h < 0) {
            h += 1;
        }
        else if (h > 1) {
            h -= 1;
        }
    }
    return {
        h: Math.floor(h * 360),
        s: s,
        v: v,
    };
}
exports.RGBToHSV = RGBToHSV;
function HexToHSV(hex) {
    return RGBToHSV(HexToRGB(hex));
}
exports.HexToHSV = HexToHSV;
function isHex(hex) {
    return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);
}
exports.isHex = isHex;


/***/ }),

/***/ "../ts-colorpicker/sources/locales/en.ts":
/*!***********************************************!*\
  !*** ../ts-colorpicker/sources/locales/en.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var en = {
    cancel: "Cancel",
    select: "Select",
    rightClickToDelete: "Right click to delete",
    customColors: "Custom colors",
    addNewColor: "Add new color",
};
exports.default = en;


/***/ }),

/***/ "../ts-colorpicker/sources/picker.ts":
/*!*******************************************!*\
  !*** ../ts-colorpicker/sources/picker.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = __webpack_require__(/*! ./helpers/color */ "../ts-colorpicker/sources/helpers/color.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-colorpicker/sources/locales/en.ts");
function getPicker(colorpicker, pickerState, handlers) {
    var rgb = color_1.HSVtoRGB(pickerState.hsv);
    pickerState.background = color_1.RGBToHex(rgb);
    var currentBackground = color_1.RGBToHex(color_1.HSVtoRGB({ h: pickerState.hsv.h, s: 1, v: 1 }));
    var root = colorpicker.getRootView();
    var box = root.refs
        ? root.refs.picker_palette.el.getBoundingClientRect()
        : { height: 200, width: 218, x: 0, y: 0 };
    var height = box.height - 2;
    var width = box.width - 2;
    var gripTop = height - pickerState.hsv.v * height - 4;
    var gripLeft = pickerState.hsv.s * width - 4;
    var rangeWidth = box.width - 6;
    var rangeGripLeft = rangeWidth - ((360 - pickerState.hsv.h) / 360) * rangeWidth;
    var inputValue = color_1.isHex(pickerState.customHex)
        ? pickerState.customHex.replace("#", "")
        : pickerState.background.replace("#", "");
    return dom_1.el(".dhx_colorpicker-picker", {}, [
        dom_1.el(".dhx_colorpicker-picker__palette", {
            style: {
                height: 132,
                background: currentBackground,
            },
            onmousedown: handlers.mousedown,
            ontouchstart: handlers.touchstart,
            dhx_id: "picker_palette",
            _ref: "picker_palette",
        }, [
            dom_1.el(".dhx_palette_grip", {
                style: {
                    top: gripTop,
                    left: gripLeft,
                },
            }),
        ]),
        dom_1.el(".dhx_colorpicker-hue-range", {
            style: { height: 16 },
            onmousedown: handlers.mousedown,
            ontouchstart: handlers.touchstart,
            dhx_id: "hue_range",
            _key: "hue_range",
            _ref: "hue_range",
        }, [
            dom_1.el(".dhx_colorpicker-hue-range__grip", {
                style: { left: rangeGripLeft },
            }),
        ]),
        dom_1.el(".dhx_colorpicker-value", [
            dom_1.el(".dhx_colorpicker-value__color", {
                style: { background: pickerState.background },
            }),
            dom_1.el(".dhx_colorpicker-value__input__wrapper", [
                dom_1.el("input", {
                    class: "dhx_colorpicker-value__input",
                    value: inputValue,
                    oninput: handlers.oninput,
                    maxlength: "7",
                    _key: "hex_input",
                }),
            ]),
        ]),
        dom_1.el(".dhx_colorpicker-picker__buttons", [
            !colorpicker.config.pickerOnly &&
                dom_1.el("button", {
                    class: "dhx_button dhx_button--size_medium dhx_button--view_link dhx_button--color_primary",
                    onclick: [handlers.buttonsClick, "cancel"],
                }, en_1.default.cancel),
            dom_1.el("button", {
                class: "dhx_button dhx_button--size_medium dhx_button--view_flat dhx_button--color_primary",
                onclick: [handlers.buttonsClick, "apply"],
            }, en_1.default.select),
        ]),
    ]);
}
exports.getPicker = getPicker;
function calculatePaletteGrip(rootView, top, left) {
    var paletteRect = rootView.refs.picker_palette.el.getBoundingClientRect();
    var bottom = paletteRect.height;
    var right = paletteRect.width;
    top = top < 0 ? 0 : top > bottom ? bottom : top;
    left = left < 0 ? 0 : left > right ? right : left;
    var pLeft = Math.round(left / (right / 100));
    var pTop = 100 - Math.round(top / (bottom / 100));
    this._pickerState.hsv.s = pLeft / 100;
    this._pickerState.hsv.v = pTop / 100;
}
exports.calculatePaletteGrip = calculatePaletteGrip;


/***/ }),

/***/ "../ts-colorpicker/sources/types.ts":
/*!******************************************!*\
  !*** ../ts-colorpicker/sources/types.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ColorpickerEvents;
(function (ColorpickerEvents) {
    ColorpickerEvents["change"] = "change";
    ColorpickerEvents["apply"] = "apply";
    ColorpickerEvents["cancelClick"] = "cancelClick";
    ColorpickerEvents["modeChange"] = "modeChange";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ColorpickerEvents["selectClick"] = "selectClick";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ColorpickerEvents["colorChange"] = "colorChange";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ColorpickerEvents["viewChange"] = "viewChange";
})(ColorpickerEvents = exports.ColorpickerEvents || (exports.ColorpickerEvents = {}));


/***/ }),

/***/ "../ts-combobox/index.ts":
/*!*******************************!*\
  !*** ../ts-combobox/index.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Combobox */ "../ts-combobox/sources/Combobox.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-combobox/sources/types.ts"));


/***/ }),

/***/ "../ts-combobox/sources/Combobox.ts":
/*!******************************************!*\
  !*** ../ts-combobox/sources/Combobox.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var keycodes_1 = __webpack_require__(/*! @dhx/ts-common/keycodes */ "../ts-common/keycodes.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var ts_layout_1 = __webpack_require__(/*! @dhx/ts-layout */ "../ts-layout/index.ts");
var ts_list_1 = __webpack_require__(/*! @dhx/ts-list */ "../ts-list/index.ts");
var ts_popup_1 = __webpack_require__(/*! @dhx/ts-popup */ "../ts-popup/index.ts");
var keyListener_1 = __webpack_require__(/*! ./keyListener */ "../ts-combobox/sources/keyListener.ts");
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-combobox/sources/locales/en.ts");
var types_1 = __webpack_require__(/*! @dhx/ts-common/types */ "../ts-common/types.ts");
var helper_1 = __webpack_require__(/*! ./helper */ "../ts-combobox/sources/helper.ts");
var types_2 = __webpack_require__(/*! ./types */ "../ts-combobox/sources/types.ts");
function itemsCountTemplate(count, templateFN) {
    if (typeof templateFN === "function") {
        return templateFN(count);
    }
    else {
        return count + " " + en_1.default.selectedItems;
    }
}
var template = function (item) {
    if (item.icon) {
        return "<span class=\"" + item.icon + " dhx_combobox-options__icon\"></span> <span class=\"dhx_combobox-options__value\">" + item.value + "</span>";
    }
    if (item.src) {
        return "<img src=\"" + item.src + "\" class=\"dhx_combobox-options__image\"></img> <span class=\"dhx_combobox-options__value\">" + item.value + "</span>";
    }
    return "<span class=\"dhx_combobox-options__value\">" + item.value + "</span>";
};
var Combobox = /** @class */ (function (_super) {
    __extends(Combobox, _super);
    function Combobox(element, config) {
        var _this = _super.call(this, element, core_1.extend({
            // selectAllButton: true
            template: template,
            listHeight: 224,
            itemHeight: 32,
            disabled: false,
        }, config)) || this;
        _this.config.itemsCount = _this.config.itemsCount || _this.config.showItemsCount; // TODO: remove suite_7.0
        _this.config.helpMessage = _this.config.helpMessage || _this.config.help; // TODO: remove suite_7.0
        if (_this.config.cellHeight && _this.config.itemHeight === 32) {
            _this.config.itemHeight = _this.config.cellHeight; // TODO: remove suite_7.0
        }
        if (_this.config.labelInline) {
            _this.config.labelPosition = "left"; // TODO: remove suite_7.0
        }
        if (Array.isArray(_this.config.data)) {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.DataCollection({});
            _this.data.parse(_this.config.data);
        }
        else if (_this.config.data) {
            _this.data = _this.config.data;
            _this.events = new events_1.EventSystem(_this);
            _this.events.context = _this;
        }
        else {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.DataCollection({});
        }
        _this.popup = new ts_popup_1.Popup();
        _this.popup.events.on(ts_popup_1.PopupEvents.afterShow, function () {
            _this.paint();
        });
        _this.popup.events.on(ts_popup_1.PopupEvents.afterHide, function () {
            if (_this.config.multiselection) {
                _this._state.value = "";
            }
            _this.paint();
        });
        _this.popup.events.on(ts_popup_1.PopupEvents.beforeHide, function (fromOuterClick) {
            if (fromOuterClick) {
                if (!_this.events.fire(types_2.ComboboxEvents.beforeClose)) {
                    return;
                }
                _this.events.fire(types_2.ComboboxEvents.afterClose);
                _this.events.fire(types_2.ComboboxEvents.close); // TODO: remove suite_7.0
            }
        });
        if (_this.config.readonly) {
            _this._keyListener = new keyListener_1.KeyListener();
        }
        _this._state = {
            value: "",
            ignoreNext: false,
            canDelete: false,
            unselectActive: false,
            currentState: types_2.ComboState.default,
        };
        _this._initHandlers();
        _this._createLayout();
        if (_this.config.value) {
            _this._setValue(_this.config.value, true);
        }
        _this._initEvents();
        var vnode = dom_1.create({
            render: function () { return _this._draw(); },
            hooks: {
                didRedraw: function () {
                    if (_this.popup.isVisible()) {
                        _this.focus();
                        _this._configurePopup();
                    }
                },
            },
        });
        // const container = toNode(element);
        _this.mount(element, vnode);
        return _this;
    }
    Combobox.prototype.focus = function () {
        if (this.config.disabled) {
            return false;
        }
        var rootView = this.getRootView();
        rootView.refs.input.el.focus();
    };
    Combobox.prototype.enable = function () {
        this.config.disabled = false;
        this.paint();
    };
    Combobox.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    Combobox.prototype.isDisabled = function () {
        return this.config.disabled;
    };
    Combobox.prototype.clear = function () {
        if (this.config.disabled) {
            return false;
        }
        this.list.selection.remove();
        this._state.value = "";
        this._filter();
        this.paint();
    };
    Combobox.prototype.getValue = function (asArray) {
        var ids = this.list.selection.getId();
        if (asArray) {
            return core_1.wrapBox(ids);
        }
        return Array.isArray(ids) ? ids.join(",") : ids;
    };
    Combobox.prototype.setValue = function (ids) {
        return this._setValue(ids);
    };
    Combobox.prototype.destructor = function () {
        this.popup.destructor();
        this.events.clear();
        this.list.destructor();
        this._layout.config = null;
        this._layout.destructor();
        this.unmount();
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Combobox.prototype.setState = function (state) {
        switch (state) {
            case "success":
                this._state.currentState = types_2.ComboState.success;
                break;
            case "error":
                this._state.currentState = types_2.ComboState.error;
                break;
            default:
                this._state.currentState = types_2.ComboState.default;
                break;
        }
        this.paint();
    };
    Combobox.prototype._setValue = function (ids, silent) {
        var _this = this;
        if (silent === void 0) { silent = false; }
        if (this.config.disabled || !this._exsistId(ids)) {
            return false;
        }
        this._filter();
        this.list.selection.remove();
        this._state.value = "";
        if (this.config.multiselection) {
            if (typeof ids === "string") {
                ids = ids.split(",");
            }
            ids.forEach(function (id) {
                _this.list.selection.add(id, false, false, silent);
            });
        }
        else {
            var id = core_1.unwrapBox(ids);
            this.list.selection.add(id, false, false, silent);
            var item = this.data.getItem(id);
            if (item) {
                this._state.value = this._getItemText(item);
            }
        }
        this.paint();
    };
    Combobox.prototype._createLayout = function () {
        var _this = this;
        var list = (this.list = new ts_list_1.List(null, {
            template: this.config.template,
            virtual: this.config.virtual,
            keyNavigation: function () { return _this.popup.isVisible(); },
            multiselection: this.config.multiselection,
            itemHeight: this.config.itemHeight,
            height: this.config.listHeight,
            data: this.data,
        }));
        var layout = (this._layout = new ts_layout_1.Layout(this.popup.getContainer(), {
            css: "dhx_combobox-options dhx_combobox__options",
            rows: [
                {
                    id: "select-unselect-all",
                    hidden: !this.config.multiselection || !this.config.selectAllButton,
                },
                { id: "list", css: "dhx_layout-cell--gravity", height: "content" },
                {
                    id: "not-found",
                    hidden: true,
                },
            ],
            on: {
                click: {
                    ".dhx_combobox__action-select-all": this._handlers.selectAll,
                },
            },
        }));
        layout.getCell("list").attach(list);
        if (this.config.multiselection && this.config.selectAllButton) {
            layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
        }
    };
    Combobox.prototype._initHandlers = function () {
        var _this = this;
        if (this.config.helpMessage) {
            this._helper = new ts_popup_1.Popup({
                css: "dhx_tooltip dhx_tooltip--forced dhx_tooltip--light",
            });
            this._helper.attachHTML(this.config.helpMessage);
        }
        this._handlers = {
            showHelper: function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this._helper.show(e.target);
            },
            selectAll: function () {
                _this.list.selection.remove();
                if (_this._state.unselectActive) {
                    _this.data.filter();
                    _this.list.selection.getId().forEach(function (id) {
                        _this.list.selection.remove(id);
                    });
                    if (_this.config.selectAllButton) {
                        _this._layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
                        _this._state.unselectActive = false;
                    }
                }
                else {
                    _this.data.filter();
                    _this.data.forEach(function (_a) {
                        var id = _a.id;
                        _this.list.selection.add(id);
                    });
                    if (_this.config.selectAllButton) {
                        _this._layout.getCell("select-unselect-all").attach(helper_1.unselectAllView);
                        _this._state.unselectActive = true;
                    }
                }
                _this.paint();
            },
            onkeydown: function (e) {
                if (!_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.DOWN_ARROW) {
                    _this._showOptions();
                }
                if (_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.RIGHT_ARROW) {
                    if (_this.config.readonly && !_this.config.multiselection) {
                        var focused = _this.list.getFocusIndex();
                        if (focused >= 0 && focused <= _this.data.getLength()) {
                            e.preventDefault();
                            _this.list.setFocusIndex(focused + 1);
                        }
                    }
                }
                if (_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.LEFT_ARROW) {
                    if (_this.config.readonly && !_this.config.multiselection) {
                        var focused = _this.list.getFocusIndex();
                        if (focused >= 0 && focused <= _this.data.getLength()) {
                            e.preventDefault();
                            _this.list.setFocusIndex(focused - 1);
                        }
                    }
                }
                if (_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.ESC) {
                    _this._hideOptions();
                }
                if (_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.ENTER) {
                    _this.setValue(_this.list.data.getId(_this.list.getFocusIndex()));
                }
            },
            onkeyup: function (e) {
                if (!_this.config.multiselection || _this.config.itemsCount) {
                    return;
                }
                if (_this._state.ignoreNext) {
                    _this._state.ignoreNext = false;
                    return;
                }
                if (e.which === keycodes_1.KEY_CODES.BACKSPACE &&
                    _this._state.canDelete &&
                    _this.list.selection.getId().length) {
                    var selected = _this.list.selection.getId();
                    var id = selected[selected.length - 1];
                    _this.list.selection.remove(id);
                    _this.paint();
                }
            },
            oninput: function (e) {
                if (_this.config.disabled) {
                    return;
                }
                var input = e.target;
                var value = input.value;
                _this.events.fire(types_2.ComboboxEvents.input, [value]);
                _this._state.value = value;
                _this._filter();
                if (!value.length) {
                    _this._state.ignoreNext = true;
                    _this._state.canDelete = true;
                }
                else {
                    _this._state.canDelete = false;
                }
                if (!_this.config.multiselection) {
                    _this.list.selection.remove();
                    _this.paint();
                }
                if (!_this.popup.isVisible()) {
                    _this._showOptions();
                }
            },
            oninputclick: function (e) {
                if (_this.config.disabled) {
                    return;
                }
                _this.focus();
                if (e.target.classList.contains("dhx_combobox__action-remove")) {
                    var id = html_1.locate(e);
                    if (!id) {
                        return;
                    }
                    _this.list.selection.remove(id);
                    _this.paint();
                    return;
                }
                if (e.target.classList.contains("dhx_combobox__action-clear-all")) {
                    _this.list.selection.getId().forEach(function (id) { return _this.list.selection.remove(id); });
                    if (_this.config.selectAllButton && _this._state.unselectActive) {
                        _this._layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
                        _this._state.unselectActive = false;
                    }
                    _this.paint();
                    return;
                }
                e.preventDefault();
                if (!_this.popup.isVisible()) {
                    _this._showOptions();
                    return;
                }
                _this.focus();
            },
            toggleIcon: function () {
                _this.focus();
                if (_this.popup.isVisible()) {
                    _this._hideOptions();
                }
                else {
                    _this._showOptions();
                }
            },
        };
    };
    Combobox.prototype._initEvents = function () {
        var _this = this;
        this.list.events.on(ts_list_1.ListEvents.click, function () {
            if (!_this.config.multiselection) {
                _this._hideOptions();
            }
        });
        this.data.events.on(ts_data_1.DataEvents.change, function (id, status, item) {
            if (item && item.hasOwnProperty("$selected") && item.$selected === true) {
                _this._updateSelectedItem(id);
            }
        });
        this.list.selection.events.on(types_1.SelectionEvents.afterSelect, function () {
            _this.events.fire(types_2.ComboboxEvents.change, [_this.getValue(_this.config.multiselection)]);
        });
        this.list.selection.events.on(types_1.SelectionEvents.afterUnSelect, function () {
            _this.events.fire(types_2.ComboboxEvents.change, [_this.getValue(_this.config.multiselection)]);
        });
        if (this.config.readonly) {
            this.popup.events.on(ts_popup_1.PopupEvents.afterShow, function () {
                if (_this._state.value) {
                    var id = _this.list.selection.getId();
                    _this.list.setFocus(id);
                }
                else {
                    _this.list.setFocus(_this.data.getId(0));
                }
                _this._keyListener.startNewListen(function (val) { return _this._findBest(val); });
            });
        }
    };
    Combobox.prototype._showOptions = function () {
        if (this._state.value.length) {
            this._state.canDelete = true;
        }
        if (this._state.value) {
            this._filter();
        }
        if (this._configurePopup()) {
            this.events.fire(types_2.ComboboxEvents.open);
        }
    };
    Combobox.prototype._configurePopup = function () {
        var rootView = this.getRootView();
        if (!rootView || !rootView.refs || !rootView.refs.holder) {
            return false;
        }
        if (!this.popup.isVisible()) {
            var holderNode = rootView.refs.holder.el;
            this.popup.getContainer().style.width = holderNode.offsetWidth + "px";
            this.popup.show(holderNode, { mode: "bottom" });
        }
        return true;
    };
    Combobox.prototype._hideOptions = function () {
        if (!this.events.fire(types_2.ComboboxEvents.beforeClose)) {
            return;
        }
        if (this.config.readonly) {
            this._keyListener.endListen();
        }
        this.list.setFocus(this.data.getId(0));
        if (!this.config.multiselection && !this.config.readonly && !this.list.selection.contains()) {
            this._state.value = "";
        }
        this.popup.hide();
        this.paint();
        this.events.fire(types_2.ComboboxEvents.afterClose);
        this.events.fire(types_2.ComboboxEvents.close); // TODO: remove suite_7.0
    };
    Combobox.prototype._filter = function () {
        var _this = this;
        if (this.config.readonly) {
            return;
        }
        this.data.filter(function (item) {
            return _this.config.filter
                ? _this.config.filter(item, _this._state.value)
                : core_1.isEqualString(_this._state.value, _this._getItemText(item));
        });
        if (this.config.multiselection) {
            this.list.setFocus(this.data.getId(0));
        }
        else {
            var index = this.data.getIndex(this.list.selection.getId());
            this.list.setFocus(this.data.getId(index > -1 ? index : 0));
        }
        if (this.data.getLength() === 0) {
            if (this.config.multiselection && this.config.selectAllButton) {
                this._layout.getCell("select-unselect-all").hide();
            }
            this._layout.getCell("list").hide();
            this._layout.getCell("not-found").attach(helper_1.emptyListView);
            this._layout.getCell("not-found").show();
        }
        else {
            if (this.config.multiselection && this.config.selectAllButton) {
                this._layout.getCell("select-unselect-all").show();
            }
            if (this._layout.getCell("not-found").isVisible()) {
                this._layout.getCell("list").show();
                this._layout.getCell("not-found").hide();
            }
        }
    };
    Combobox.prototype._findBest = function (value) {
        var _this = this;
        var best = this.data.find(function (item) { return core_1.isEqualString(value, _this._getItemText(item)); });
        if (!best) {
            return;
        }
        if (this.list.selection.getId() === best.id) {
            return;
        }
        this.list.setFocus(best.id);
        this.list.selection.add(best.id);
        this.paint();
    };
    Combobox.prototype._exsistId = function (id) {
        var _this = this;
        if (id instanceof Array) {
            return id.every(function (i) { return _this.data.exists(i); });
        }
        if (typeof id === "string") {
            return this.data.exists(id);
        }
    };
    Combobox.prototype._draw = function () {
        var _a = this.config, multiselection = _a.multiselection, labelPosition = _a.labelPosition, labelWidth = _a.labelWidth, hiddenLabel = _a.hiddenLabel, required = _a.required, disabled = _a.disabled, css = _a.css, label = _a.label, helpMessage = _a.helpMessage, readonly = _a.readonly, placeholder = _a.placeholder;
        var item = multiselection ? null : this.data.getItem(this.list.selection.getId());
        var showPlaceholder = !this.list.selection.getId() || this.list.selection.getId().length === 0;
        var width = labelPosition === "left" && labelWidth ? labelWidth : "";
        return dom_1.el(".dhx_widget.dhx_combobox" +
            (labelPosition === "left" ? ".dhx_combobox--label-inline" : "") +
            (hiddenLabel ? ".dhx_combobox--sr_only" : "") +
            (required ? ".dhx_combobox--required" : "") +
            (disabled ? ".dhx_combobox--disabled" : "") +
            (css ? "." + css : ""), {
            dhx_widget_id: this._uid,
            onkeydown: this._handlers.onkeydown,
            onkeyup: this._handlers.onkeyup,
        }, [
            label
                ? dom_1.el("label.dhx_label.dhx_combobox__label", {
                    style: { minWidth: width, maxWidth: width },
                    class: helpMessage ? "dhx_label--with-help" : "",
                    onclick: this._handlers.oninputclick,
                }, helpMessage
                    ? [
                        dom_1.el("span.dhx_label__holder", label),
                        dom_1.el("span.dhx_label-help.dxi.dxi-help-circle-outline", {
                            tabindex: "0",
                            role: "button",
                            onclick: this._handlers.showHelper,
                        }),
                    ]
                    : label)
                : null,
            dom_1.el("div.dhx_combobox-input-box" +
                // (this.popup.isVisible() ? ".dhx_combobox-input-box" : "") +
                (disabled ? ".dhx_combobox-input-box--disabled" : "") +
                (readonly ? ".dhx_combobox-input-box--readonly" : "") +
                (this._state.currentState === types_2.ComboState.error
                    ? ".dhx_combobox-input-box--state_error"
                    : "") +
                (this._state.currentState === types_2.ComboState.success
                    ? ".dhx_combobox-input-box--state_success"
                    : ""), {
                _ref: "holder",
            }, [
                dom_1.el("div.dhx_combobox-input__icon", {
                    onclick: this._handlers.toggleIcon,
                }, [
                    dom_1.el("span" +
                        (this.popup.isVisible() ? ".dxi.dxi-menu-up" : ".dxi.dxi-menu-down")),
                ]),
                dom_1.el("div.dhx_combobox-input-list-wrapper", {
                    onclick: this._handlers.oninputclick,
                }, [
                    dom_1.el("ul.dhx_combobox-input-list", __spreadArrays(this._drawSelectedItems(), [
                        dom_1.el("li.dhx_combobox-input-list__item.dhx_combobox-input-list__item--input", [
                            dom_1.el("input.dhx_combobox-input", {
                                oninput: this._handlers.oninput,
                                _ref: "input",
                                _key: this._uid,
                                type: "text",
                                placeHolder: showPlaceholder && placeholder ? placeholder : undefined,
                                value: readonly && item
                                    ? this._getItemText(item)
                                    : this._state.value,
                                readOnly: readonly || disabled,
                                required: required,
                            }),
                        ]),
                    ])),
                ]),
            ]),
        ]);
    };
    Combobox.prototype._drawSelectedItems = function () {
        var _this = this;
        if (!this.config.multiselection) {
            return [];
        }
        if (this.config.itemsCount) {
            var count = this.list.selection.getId().length;
            return count
                ? [
                    dom_1.el("li.dhx_combobox-input-list__item.dhx_combobox-tag", [
                        dom_1.el("span.dhx_combobox-tag__value", itemsCountTemplate(count, this.config.itemsCount)),
                        dom_1.el("button.dhx_button.dhx_combobox-tag__action.dhx_combobox__action-clear-all", [
                            dom_1.el("span.dhx_button__icon.dxi.dxi-close-circle"),
                        ]),
                    ]),
                ]
                : [];
        }
        return this.list.selection.getId().map(function (id) {
            var item = _this.data.getItem(id);
            if (!item) {
                return null;
            }
            return dom_1.el("li.dhx_combobox-input-list__item.dhx_combobox-tag", { dhx_id: id }, [
                _this._drawImageOrIcon(item),
                dom_1.el("span.dhx_combobox-tag__value", _this._getItemText(item)),
                dom_1.el("button.dhx_button.dhx_button--icon.dhx_combobox-tag__action.dhx_combobox__action-remove", {
                    type: "button",
                }, [dom_1.el("span.dhx_button__icon.dxi.dxi-close-circle")]),
            ]);
        });
    };
    Combobox.prototype._drawImageOrIcon = function (item) {
        if (item.src) {
            return dom_1.el("img.dhx_combobox-tag__image", { src: item.src });
        }
        else if (item.icon) {
            return dom_1.el("span.dhx_combobox-tag__icon", { class: item.icon });
        }
        return null;
    };
    Combobox.prototype._getItemText = function (item) {
        if (!item) {
            return null;
        }
        return item.value;
    };
    Combobox.prototype._updateSelectedItem = function (id) {
        if (this.config.multiselection) {
            var selected = this.data.getItem(id).$selected;
            if (selected) {
                if (this.config.selectAllButton &&
                    !this._state.unselectActive &&
                    this.data.getLength() === this.list.selection.getId().length) {
                    this._layout.getCell("select-unselect-all").attach(helper_1.unselectAllView);
                    this._state.unselectActive = true;
                }
            }
            else {
                if (this.config.selectAllButton && this._state.unselectActive) {
                    this._layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
                    this._state.unselectActive = false;
                }
            }
            if (!this._state.value.length) {
                this._state.canDelete = true;
            }
            this.paint();
            return;
        }
        this._state.value = this._getItemText(this.data.getItem(id)) || "";
        this.paint();
    };
    return Combobox;
}(view_1.View));
exports.Combobox = Combobox;


/***/ }),

/***/ "../ts-combobox/sources/helper.ts":
/*!****************************************!*\
  !*** ../ts-combobox/sources/helper.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-combobox/sources/locales/en.ts");
function selectAllView() {
    return dom_1.el(".dhx_list-item.dhx_combobox-options__item.dhx_combobox-options__item--select-all.dhx_combobox__action-select-all", en_1.default.selectAll);
}
exports.selectAllView = selectAllView;
function unselectAllView() {
    return dom_1.el(".dhx_list-item.dhx_combobox-options__item.dhx_combobox-options__item--select-all.dhx_combobox__action-select-all", en_1.default.unselectAll);
}
exports.unselectAllView = unselectAllView;
function emptyListView() {
    return dom_1.el("ul.dhx_list", [dom_1.el("li.dhx_list-item.dhx_combobox-options__item", {}, en_1.default.notFound)]);
}
exports.emptyListView = emptyListView;


/***/ }),

/***/ "../ts-combobox/sources/keyListener.ts":
/*!*********************************************!*\
  !*** ../ts-combobox/sources/keyListener.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CLEAR_TIMEOUT = 2000;
var KeyListener = /** @class */ (function () {
    function KeyListener() {
        var _this = this;
        this._sequence = "";
        document.addEventListener("keydown", function (e) {
            if (!_this._isActive) {
                return;
            }
            var key = e.key;
            if (key === "Backspace" && _this._sequence.length > 0) {
                _this._sequence = _this._sequence.slice(0, _this._sequence.length - 1);
                _this._change();
            }
            if (key.length < 2) {
                // handle only single key value
                _this._sequence += key;
                _this._change();
            }
        });
    }
    KeyListener.prototype.startNewListen = function (action) {
        this._isActive = true;
        this._sequence = "";
        this._currentAction = action;
    };
    KeyListener.prototype.endListen = function () {
        this._currentAction = null;
        this.reset();
        this._isActive = false;
    };
    KeyListener.prototype.reset = function () {
        this._sequence = "";
    };
    KeyListener.prototype._change = function () {
        this._currentAction(this._sequence);
        this._addClearTimeout();
    };
    KeyListener.prototype._addClearTimeout = function () {
        var _this = this;
        if (this._clearTimeout) {
            clearTimeout(this._clearTimeout);
        }
        this._clearTimeout = setTimeout(function () {
            _this.reset();
            _this._clearTimeout = null;
        }, CLEAR_TIMEOUT);
    };
    return KeyListener;
}());
exports.KeyListener = KeyListener;


/***/ }),

/***/ "../ts-combobox/sources/locales/en.ts":
/*!********************************************!*\
  !*** ../ts-combobox/sources/locales/en.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    notFound: "Not Found",
    selectAll: "Select All",
    unselectAll: "Unselect All",
    selectedItems: "selected items",
};


/***/ }),

/***/ "../ts-combobox/sources/types.ts":
/*!***************************************!*\
  !*** ../ts-combobox/sources/types.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ComboboxEvents;
(function (ComboboxEvents) {
    ComboboxEvents["change"] = "change";
    ComboboxEvents["open"] = "open";
    ComboboxEvents["input"] = "input";
    ComboboxEvents["beforeClose"] = "beforeClose";
    ComboboxEvents["afterClose"] = "afterClose";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ComboboxEvents["close"] = "close";
})(ComboboxEvents = exports.ComboboxEvents || (exports.ComboboxEvents = {}));
var ComboState;
(function (ComboState) {
    ComboState[ComboState["default"] = 0] = "default";
    ComboState[ComboState["error"] = 1] = "error";
    ComboState[ComboState["success"] = 2] = "success";
})(ComboState = exports.ComboState || (exports.ComboState = {}));


/***/ }),

/***/ "../ts-common/CssManager.ts":
/*!**********************************!*\
  !*** ../ts-common/CssManager.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! ./core */ "../ts-common/core.ts");
var CssManager = /** @class */ (function () {
    function CssManager() {
        this._classes = {};
        var styles = document.createElement("style");
        styles.id = "dhx_generated_styles";
        this._styleCont = document.head.appendChild(styles);
    }
    CssManager.prototype.update = function () {
        if (this._styleCont.innerHTML !== this._generateCss()) {
            document.head.appendChild(this._styleCont);
            this._styleCont.innerHTML = this._generateCss();
        }
    };
    CssManager.prototype.remove = function (className) {
        delete this._classes[className];
        this.update();
    };
    CssManager.prototype.add = function (cssList, customId, silent) {
        if (silent === void 0) { silent = false; }
        var cssString = this._toCssString(cssList);
        var id = this._findSameClassId(cssString);
        if (id && customId && customId !== id) {
            this._classes[customId] = this._classes[id];
            return customId;
        }
        if (id) {
            return id;
        }
        return this._addNewClass(cssString, customId, silent);
    };
    CssManager.prototype.get = function (className) {
        if (this._classes[className]) {
            var props = {};
            var css = this._classes[className].split(";");
            for (var _i = 0, css_1 = css; _i < css_1.length; _i++) {
                var item = css_1[_i];
                if (item) {
                    var prop = item.split(":");
                    props[prop[0]] = prop[1];
                }
            }
            return props;
        }
        return null;
    };
    CssManager.prototype._findSameClassId = function (cssString) {
        for (var key in this._classes) {
            if (cssString === this._classes[key]) {
                return key;
            }
        }
        return null;
    };
    CssManager.prototype._addNewClass = function (cssString, customId, silent) {
        var id = customId || "dhx_generated_class_" + core_1.uid();
        this._classes[id] = cssString;
        if (!silent) {
            this.update();
        }
        return id;
    };
    CssManager.prototype._toCssString = function (cssList) {
        var cssString = "";
        for (var key in cssList) {
            var prop = cssList[key];
            var name_1 = key.replace(/[A-Z]{1}/g, function (letter) { return "-" + letter.toLowerCase(); });
            cssString += name_1 + ":" + prop + ";";
        }
        return cssString;
    };
    CssManager.prototype._generateCss = function () {
        var result = "";
        for (var key in this._classes) {
            var cssProps = this._classes[key];
            result += "." + key + "{" + cssProps + "}\n";
        }
        return result;
    };
    return CssManager;
}());
exports.CssManager = CssManager;
exports.cssManager = new CssManager();


/***/ }),

/***/ "../ts-common/Keymanager.ts":
/*!**********************************!*\
  !*** ../ts-common/Keymanager.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = __webpack_require__(/*! ./html */ "../ts-common/html.ts");
function getHotKeyCode(code) {
    var matches = code.toLowerCase().match(/\w+/g);
    var comp = 0;
    var key = "";
    for (var i = 0; i < matches.length; i++) {
        var check = matches[i];
        if (check === "ctrl") {
            comp += 4;
        }
        else if (check === "shift") {
            comp += 2;
        }
        else if (check === "alt") {
            comp += 1;
        }
        else {
            key = check;
        }
    }
    return comp + key;
}
var KeyManager = /** @class */ (function () {
    function KeyManager() {
        var _this = this;
        this._keysStorage = {};
        document.addEventListener("keydown", function (e) {
            var comp = (e.ctrlKey || e.metaKey ? 4 : 0) + (e.shiftKey ? 2 : 0) + (e.altKey ? 1 : 0);
            var key;
            if ((e.which >= 48 && e.which <= 57) || (e.which >= 65 && e.which <= 90)) {
                // A-Z 0-9
                key = String.fromCharCode(e.which);
            }
            else {
                // dirty: added space binding
                if (e.which === 32 && !html_1.isIE()) {
                    key = e.code;
                }
                else {
                    key = e.key;
                }
            }
            var code = comp + (key && key.toLowerCase());
            var actions = _this._keysStorage[code];
            if (actions) {
                for (var i = 0; i < actions.length; i++) {
                    actions[i].handler(e);
                }
            }
        });
    }
    KeyManager.prototype.addHotKey = function (key, handler, scope) {
        var code = getHotKeyCode(key);
        if (!this._keysStorage[code]) {
            this._keysStorage[code] = [];
        }
        this._keysStorage[code].push({
            handler: handler,
            scope: scope,
        });
    };
    KeyManager.prototype.removeHotKey = function (key, scope) {
        var keyStorage = this._keysStorage;
        if (key) {
            var code = getHotKeyCode(key);
            delete keyStorage[code];
        }
        if (scope) {
            for (var code in keyStorage) {
                var toDelete = []; // items index to delete
                for (var i = 0; i < keyStorage[code].length; i++) {
                    if (keyStorage[code][i].scope === scope) {
                        toDelete.push(i);
                    }
                }
                if (keyStorage[code].length === toDelete.length) {
                    delete keyStorage[code];
                }
                else {
                    for (var i = toDelete.length - 1; i >= 0; i--) {
                        // begin from last coz splice change other index
                        keyStorage[code].splice(toDelete[i], 1);
                    }
                }
            }
        }
    };
    KeyManager.prototype.exist = function (key) {
        var code = getHotKeyCode(key);
        return !!this._keysStorage[code];
    };
    return KeyManager;
}());
exports.keyManager = new KeyManager();
function addHotkeys(handlers, beforeCall) {
    var context = new Date();
    var wrapHandler = function (handler) { return function (e) {
        if (beforeCall && beforeCall() === false) {
            return;
        }
        handler(e);
    }; };
    for (var key in handlers) {
        exports.keyManager.addHotKey(key, wrapHandler(handlers[key]), context);
    }
    return function () { return exports.keyManager.removeHotKey(undefined, context); };
}
exports.addHotkeys = addHotkeys;


/***/ }),

/***/ "../ts-common/core.ts":
/*!****************************!*\
  !*** ../ts-common/core.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = __webpack_require__(/*! ./html */ "../ts-common/html.ts");
var counter = new Date().valueOf();
function uid() {
    return "u" + counter++;
}
exports.uid = uid;
function extend(target, source, deep) {
    if (deep === void 0) { deep = true; }
    if (source) {
        for (var key in source) {
            var sobj = source[key];
            var tobj = target[key];
            if (sobj === undefined) {
                delete target[key];
            }
            else if (deep &&
                typeof tobj === "object" &&
                !(tobj instanceof Date) &&
                !(tobj instanceof Array)) {
                extend(tobj, sobj);
            }
            else {
                target[key] = sobj;
            }
        }
    }
    return target;
}
exports.extend = extend;
function copy(source, withoutInner) {
    var result = {};
    for (var key in source) {
        if (!withoutInner || !key.startsWith("$")) {
            result[key] = source[key];
        }
    }
    return result;
}
exports.copy = copy;
function naturalSort(arr) {
    return arr.sort(function (a, b) {
        var nn = typeof a === "string" ? a.localeCompare(b) : a - b;
        return nn;
    });
}
exports.naturalSort = naturalSort;
function findIndex(arr, predicate) {
    var len = arr.length;
    for (var i = 0; i < len; i++) {
        if (predicate(arr[i])) {
            return i;
        }
    }
    return -1;
}
exports.findIndex = findIndex;
function isEqualString(from, to) {
    if (from.length > to.length) {
        return false;
    }
    for (var i = 0; i < from.length; i++) {
        if (from[i].toLowerCase() !== to[i].toLowerCase()) {
            return false;
        }
    }
    return true;
}
exports.isEqualString = isEqualString;
function singleOuterClick(fn) {
    var click = function (e) {
        if (fn(e)) {
            document.removeEventListener("click", click);
        }
    };
    document.addEventListener("click", click);
}
exports.singleOuterClick = singleOuterClick;
function detectWidgetClick(widgetId, cb) {
    var click = function (e) { return cb(html_1.locate(e, "dhx_widget_id") === widgetId); };
    document.addEventListener("click", click);
    return function () { return document.removeEventListener("click", click); };
}
exports.detectWidgetClick = detectWidgetClick;
function unwrapBox(box) {
    if (Array.isArray(box)) {
        return box[0];
    }
    return box;
}
exports.unwrapBox = unwrapBox;
function wrapBox(unboxed) {
    if (Array.isArray(unboxed)) {
        return unboxed;
    }
    return [unboxed];
}
exports.wrapBox = wrapBox;
function isDefined(some) {
    return some !== null && some !== undefined;
}
exports.isDefined = isDefined;
function range(from, to) {
    if (from > to) {
        return [];
    }
    var result = [];
    while (from <= to) {
        result.push(from++);
    }
    return result;
}
exports.range = range;
function isNumeric(val) {
    return !isNaN(val - parseFloat(val));
}
exports.isNumeric = isNumeric;
function downloadFile(data, filename, mimeType) {
    if (mimeType === void 0) { mimeType = "text/plain"; }
    var file = new Blob([data], { type: mimeType });
    if (window.navigator.msSaveOrOpenBlob) {
        // IE10+
        window.navigator.msSaveOrOpenBlob(file, filename);
    }
    else {
        var a_1 = document.createElement("a");
        var url_1 = URL.createObjectURL(file);
        a_1.href = url_1;
        a_1.download = filename;
        document.body.appendChild(a_1);
        a_1.click();
        setTimeout(function () {
            document.body.removeChild(a_1);
            window.URL.revokeObjectURL(url_1);
        }, 0);
    }
}
exports.downloadFile = downloadFile;
function debounce(func, wait, immediate) {
    var timeout;
    return function executedFunction() {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var later = function () {
            timeout = null;
            if (!immediate) {
                func.apply(_this, args);
            }
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) {
            func.apply(this, args);
        }
    };
}
exports.debounce = debounce;
function compare(obj1, obj2) {
    for (var p in obj1) {
        if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) {
            return false;
        }
        switch (typeof obj1[p]) {
            case "object":
                if (!compare(obj1[p], obj2[p])) {
                    return false;
                }
                break;
            case "function":
                if (typeof obj2[p] === "undefined" ||
                    (p !== "compare" && obj1[p].toString() !== obj2[p].toString())) {
                    return false;
                }
                break;
            default:
                if (obj1[p] !== obj2[p]) {
                    return false;
                }
        }
    }
    for (var p in obj2) {
        if (typeof obj1[p] === "undefined") {
            return false;
        }
    }
    return true;
}
exports.compare = compare;
exports.isType = function (value) {
    var regex = /^\[object (\S+?)\]$/;
    var matches = Object.prototype.toString.call(value).match(regex) || [];
    return (matches[1] || "undefined").toLowerCase();
};
exports.isEmptyObj = function (obj) {
    for (var key in obj) {
        return false;
    }
    return true;
};
exports.sign = function (x) {
    x = +x;
    if (x === 0 || isNaN(x)) {
        return x;
    }
    return x > 0 ? 1 : -1;
};


/***/ }),

/***/ "../ts-common/dom.ts":
/*!***************************!*\
  !*** ../ts-common/dom.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
var dom = __webpack_require__(/*! domvm/dist/dev/domvm.dev.js */ "../node_modules/domvm/dist/dev/domvm.dev.js");
exports.el = dom.defineElement;
exports.sv = dom.defineSvgElement;
exports.view = dom.defineView;
exports.create = dom.createView;
exports.inject = dom.injectView;
exports.KEYED_LIST = dom.KEYED_LIST;
function disableHelp() {
    dom.DEVMODE.mutations = false;
    dom.DEVMODE.warnings = false;
    dom.DEVMODE.verbose = false;
    dom.DEVMODE.UNKEYED_INPUT = false;
}
exports.disableHelp = disableHelp;
function resizer(handler) {
    var resize = window.ResizeObserver;
    var activeHandler = function (node) {
        var height = node.el.offsetHeight;
        var width = node.el.offsetWidth;
        handler(width, height);
    };
    if (resize) {
        return exports.el("div.dhx-resize-observer", {
            _hooks: {
                didInsert: function (node) {
                    new resize(function () { return activeHandler(node); }).observe(node.el);
                },
            },
        });
    }
    return exports.el("iframe.dhx-resize-observer", {
        _hooks: {
            didInsert: function (node) {
                node.el.contentWindow.onresize = function () { return activeHandler(node); };
                activeHandler(node);
            },
        },
    });
}
exports.resizer = resizer;
function resizeHandler(container, handler) {
    return exports.create({
        render: function () {
            return resizer(handler);
        },
    }).mount(container);
}
exports.resizeHandler = resizeHandler;
function awaitRedraw() {
    return new Promise(function (res) {
        requestAnimationFrame(function () {
            res();
        });
    });
}
exports.awaitRedraw = awaitRedraw;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promiz */ "../node_modules/promiz/promiz.js")))

/***/ }),

/***/ "../ts-common/events.ts":
/*!******************************!*\
  !*** ../ts-common/events.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var EventSystem = /** @class */ (function () {
    function EventSystem(context) {
        this.events = {};
        this.context = context || this;
    }
    EventSystem.prototype.on = function (name, callback, context) {
        var event = name.toLowerCase();
        this.events[event] = this.events[event] || [];
        this.events[event].push({ callback: callback, context: context || this.context });
    };
    EventSystem.prototype.detach = function (name, context) {
        var event = name.toLowerCase();
        var eStack = this.events[event];
        if (context && eStack && eStack.length) {
            for (var i = eStack.length - 1; i >= 0; i--) {
                if (eStack[i].context === context) {
                    eStack.splice(i, 1);
                }
            }
        }
        else {
            this.events[event] = [];
        }
    };
    EventSystem.prototype.fire = function (name, args) {
        if (typeof args === "undefined") {
            args = [];
        }
        var event = name.toLowerCase();
        if (this.events[event]) {
            var res = this.events[event].map(function (e) { return e.callback.apply(e.context, args); });
            return !res.includes(false);
        }
        return true;
    };
    EventSystem.prototype.clear = function () {
        this.events = {};
    };
    return EventSystem;
}());
exports.EventSystem = EventSystem;
function EventsMixin(obj) {
    obj = obj || {};
    var eventSystem = new EventSystem(obj);
    obj.detachEvent = eventSystem.detach.bind(eventSystem);
    obj.attachEvent = eventSystem.on.bind(eventSystem);
    obj.callEvent = eventSystem.fire.bind(eventSystem);
}
exports.EventsMixin = EventsMixin;


/***/ }),

/***/ "../ts-common/html.ts":
/*!****************************!*\
  !*** ../ts-common/html.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
function toNode(node) {
    return typeof node === "string"
        ? document.getElementById(node) || document.querySelector(node) || document.body
        : node || document.body;
}
exports.toNode = toNode;
function eventHandler(prepare, hash) {
    var keys = Object.keys(hash);
    return function (ev) {
        var data = prepare(ev);
        var node = ev.target;
        while (node) {
            var cssstring = node.getAttribute ? node.getAttribute("class") || "" : "";
            if (cssstring.length) {
                var css = cssstring.split(" ");
                for (var j = 0; j < keys.length; j++) {
                    if (css.includes(keys[j])) {
                        return hash[keys[j]](ev, data);
                    }
                }
            }
            node = node.parentNode;
        }
        return true;
    };
}
exports.eventHandler = eventHandler;
function locateNode(target, attr, dir) {
    if (attr === void 0) { attr = "dhx_id"; }
    if (dir === void 0) { dir = "target"; }
    if (target instanceof Event) {
        target = target[dir];
    }
    while (target) {
        if (target.getAttribute && target.getAttribute(attr)) {
            return target;
        }
        target = target.parentNode;
    }
}
exports.locateNode = locateNode;
function locate(target, attr) {
    if (attr === void 0) { attr = "dhx_id"; }
    var node = locateNode(target, attr);
    return node ? node.getAttribute(attr) : "";
}
exports.locate = locate;
function locateNodeByClassName(target, className) {
    if (target instanceof Event) {
        target = target.target;
    }
    while (target) {
        if (className) {
            if (target.classList && target.classList.contains(className)) {
                return target;
            }
        }
        else if (target.getAttribute && target.getAttribute("dhx_id")) {
            return target;
        }
        target = target.parentNode;
    }
}
exports.locateNodeByClassName = locateNodeByClassName;
function getBox(elem) {
    var box = elem.getBoundingClientRect();
    var body = document.body;
    var scrollTop = window.pageYOffset || body.scrollTop;
    var scrollLeft = window.pageXOffset || body.scrollLeft;
    var top = box.top + scrollTop;
    var left = box.left + scrollLeft;
    var right = body.offsetWidth - box.right;
    var bottom = body.offsetHeight - box.bottom;
    var width = box.right - box.left;
    var height = box.bottom - box.top;
    return { top: top, left: left, right: right, bottom: bottom, width: width, height: height };
}
exports.getBox = getBox;
var scrollWidth = -1;
function getScrollbarWidth() {
    if (scrollWidth > -1) {
        return scrollWidth;
    }
    var scrollDiv = document.createElement("div");
    document.body.appendChild(scrollDiv);
    scrollDiv.style.cssText = "position: absolute;left: -99999px;overflow:scroll;width: 100px;height: 100px;";
    scrollWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollWidth;
}
exports.getScrollbarWidth = getScrollbarWidth;
function isIE() {
    var ua = window.navigator.userAgent;
    return ua.includes("MSIE ") || ua.includes("Trident/");
}
exports.isIE = isIE;
function getRealPosition(node) {
    var rects = node.getBoundingClientRect();
    return {
        left: rects.left + window.pageXOffset,
        right: rects.right + window.pageXOffset,
        top: rects.top + window.pageYOffset,
        bottom: rects.bottom + window.pageYOffset,
    };
}
exports.getRealPosition = getRealPosition;
function getWindowBorders() {
    return {
        rightBorder: window.pageXOffset + window.innerWidth,
        bottomBorder: window.pageYOffset + window.innerHeight,
    };
}
function horizontalCentering(pos, width, rightBorder) {
    var nodeWidth = pos.right - pos.left;
    var diff = (width - nodeWidth) / 2;
    var left = pos.left - diff;
    var right = pos.right + diff;
    if (left >= 0 && right <= rightBorder) {
        return left;
    }
    if (left < 0) {
        return 0;
    }
    return rightBorder - width;
}
function verticalCentering(pos, height, bottomBorder) {
    var nodeHeight = pos.bottom - pos.top;
    var diff = (height - nodeHeight) / 2;
    var top = pos.top - diff;
    var bottom = pos.bottom + diff;
    if (top >= 0 && bottom <= bottomBorder) {
        return top;
    }
    if (top < 0) {
        return 0;
    }
    return bottomBorder - height;
}
function placeBottomOrTop(pos, config) {
    var _a = getWindowBorders(), rightBorder = _a.rightBorder, bottomBorder = _a.bottomBorder;
    var left;
    var top;
    var bottomDiff = bottomBorder - pos.bottom - config.height;
    var topDiff = pos.top - config.height;
    if (config.mode === "bottom") {
        if (bottomDiff >= 0) {
            top = pos.bottom;
        }
        else if (topDiff >= 0) {
            top = topDiff;
        }
    }
    else {
        if (topDiff >= 0) {
            top = topDiff;
        }
        else if (bottomDiff >= 0) {
            top = pos.bottom;
        }
    }
    if (bottomDiff < 0 && topDiff < 0) {
        if (config.auto) {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            return placeRightOrLeft(pos, __assign(__assign({}, config), { mode: "right", auto: false }));
        }
        top = bottomDiff > topDiff ? pos.bottom : topDiff;
    }
    if (config.centering) {
        left = horizontalCentering(pos, config.width, rightBorder);
    }
    else {
        var leftDiff = rightBorder - pos.left - config.width;
        var rightDiff = pos.right - config.width;
        if (leftDiff >= 0) {
            left = pos.left;
        }
        else if (rightDiff >= 0) {
            left = rightDiff;
        }
        else {
            left = rightDiff > leftDiff ? pos.left : rightDiff;
        }
    }
    return { left: left, top: top };
}
function placeRightOrLeft(pos, config) {
    var _a = getWindowBorders(), rightBorder = _a.rightBorder, bottomBorder = _a.bottomBorder;
    var left;
    var top;
    var rightDiff = rightBorder - pos.right - config.width;
    var leftDiff = pos.left - config.width;
    if (config.mode === "right") {
        if (rightDiff >= 0) {
            left = pos.right;
        }
        else if (leftDiff >= 0) {
            left = leftDiff;
        }
    }
    else {
        if (leftDiff >= 0) {
            left = leftDiff;
        }
        else if (rightDiff >= 0) {
            left = pos.right;
        }
    }
    if (leftDiff < 0 && rightDiff < 0) {
        if (config.auto) {
            return placeBottomOrTop(pos, __assign(__assign({}, config), { mode: "bottom", auto: false }));
        }
        left = leftDiff > rightDiff ? leftDiff : pos.right;
    }
    if (config.centering) {
        top = verticalCentering(pos, config.height, rightBorder);
    }
    else {
        var bottomDiff = pos.bottom - config.height;
        var topDiff = bottomBorder - pos.top - config.height;
        if (topDiff >= 0) {
            top = pos.top;
        }
        else if (bottomDiff > 0) {
            top = bottomDiff;
        }
        else {
            top = bottomDiff > topDiff ? bottomDiff : pos.top;
        }
    }
    return { left: left, top: top };
}
function calculatePosition(pos, config) {
    var _a = config.mode === "bottom" || config.mode === "top"
        ? placeBottomOrTop(pos, config)
        : placeRightOrLeft(pos, config), left = _a.left, top = _a.top;
    return {
        left: Math.round(left) + "px",
        top: Math.round(top) + "px",
        minWidth: Math.round(config.width) + "px",
        position: "absolute",
    };
}
exports.calculatePosition = calculatePosition;
function fitPosition(node, config) {
    return calculatePosition(getRealPosition(node), config);
}
exports.fitPosition = fitPosition;
function getStrSize(str, textStyle) {
    textStyle = __assign({ fontSize: "14px", fontFamily: "Arial", lineHeight: "14px", fontWeight: "normal", fontStyle: "normal" }, textStyle);
    var span = document.createElement("span");
    var fontSize = textStyle.fontSize, fontFamily = textStyle.fontFamily, lineHeight = textStyle.lineHeight, fontWeight = textStyle.fontWeight, fontStyle = textStyle.fontStyle;
    span.style.fontSize = fontSize;
    span.style.fontFamily = fontFamily;
    span.style.lineHeight = lineHeight;
    span.style.fontWeight = fontWeight;
    span.style.fontStyle = fontStyle;
    span.style.display = "inline-flex";
    span.innerText = str;
    document.body.appendChild(span);
    var offsetWidth = span.offsetWidth, clientHeight = span.clientHeight;
    document.body.removeChild(span);
    return { width: offsetWidth, height: clientHeight };
}
exports.getStrSize = getStrSize;
function getPageCss() {
    var css = [];
    for (var sheeti = 0; sheeti < document.styleSheets.length; sheeti++) {
        var sheet = document.styleSheets[sheeti];
        var rules = "cssRules" in sheet ? sheet.cssRules : sheet.rules;
        for (var rulei = 0; rulei < rules.length; rulei++) {
            var rule = rules[rulei];
            if ("cssText" in rule) {
                css.push(rule.cssText);
            }
            else {
                css.push(rule.selectorText + " {\n" + rule.style.cssText + "\n}\n");
            }
        }
    }
    return css.join("\n");
}
exports.getPageCss = getPageCss;


/***/ }),

/***/ "../ts-common/keycodes.ts":
/*!********************************!*\
  !*** ../ts-common/keycodes.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KEY_CODES = {
    BACKSPACE: 8,
    ENTER: 13,
    ESC: 27,
    DOWN_ARROW: 40,
    LEFT_ARROW: 37,
    RIGHT_ARROW: 39,
};


/***/ }),

/***/ "../ts-common/polyfills/array.ts":
/*!***************************************!*\
  !*** ../ts-common/polyfills/array.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* eslint-disable prefer-rest-params */
/* eslint-disable @typescript-eslint/unbound-method */
// eslint-disable-next-line @typescript-eslint/unbound-method
if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, "includes", {
        value: function (searchElement, fromIndex) {
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }
            // 1. Let O be ? ToObject(this value).
            var o = Object(this);
            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;
            // 3. If len is 0, return false.
            if (len === 0) {
                return false;
            }
            // 4. Let n be ? ToInteger(fromIndex).
            //    (If fromIndex is undefined, this step produces the value 0.)
            var n = fromIndex | 0;
            // 5. If n ≥ 0, then
            //  a. Let k be n.
            // 6. Else n < 0,
            //  a. Let k be len + n.
            //  b. If k < 0, let k be 0.
            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);
            function sameValueZero(x, y) {
                return x === y || (typeof x === "number" && typeof y === "number" && isNaN(x) && isNaN(y));
            }
            // 7. Repeat, while k < len
            while (k < len) {
                // a. Let elementK be the result of ? Get(O, ! ToString(k)).
                // b. If SameValueZero(searchElement, elementK) is true, return true.
                if (sameValueZero(o[k], searchElement)) {
                    return true;
                }
                // c. Increase k by 1.
                k++;
            }
            // 8. Return false
            return false;
        },
        configurable: true,
        writable: true,
    });
}
// https://tc39.github.io/ecma262/#sec-array.prototype.find
if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, "find", {
        value: function (predicate) {
            // 1. Let O be ? ToObject(this value).
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }
            var o = Object(this);
            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;
            // 3. If IsCallable(predicate) is false, throw a TypeError exception.
            if (typeof predicate !== "function") {
                throw new TypeError("predicate must be a function");
            }
            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
            var thisArg = arguments[1];
            // 5. Let k be 0.
            var k = 0;
            // 6. Repeat, while k < len
            while (k < len) {
                // a. Let Pk be ! ToString(k).
                // b. Let kValue be ? Get(O, Pk).
                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                // d. If testResult is true, return kValue.
                var kValue = o[k];
                if (predicate.call(thisArg, kValue, k, o)) {
                    return kValue;
                }
                // e. Increase k by 1.
                k++;
            }
            // 7. Return undefined.
            return undefined;
        },
        configurable: true,
        writable: true,
    });
}
if (!Array.prototype.findIndex) {
    Array.prototype.findIndex = function (predicate) {
        if (this == null) {
            throw new TypeError("Array.prototype.findIndex called on null or undefined");
        }
        if (typeof predicate !== "function") {
            throw new TypeError("predicate must be a function");
        }
        var list = Object(this);
        var length = list.length >>> 0;
        var thisArg = arguments[1];
        var value;
        for (var i = 0; i < length; i++) {
            value = list[i];
            if (predicate.call(thisArg, value, i, list)) {
                return i;
            }
        }
        return -1;
    };
}


/***/ }),

/***/ "../ts-common/polyfills/element.ts":
/*!*****************************************!*\
  !*** ../ts-common/polyfills/element.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* eslint-disable @typescript-eslint/no-this-alias */
/* eslint-disable prefer-rest-params */
/* eslint-disable @typescript-eslint/unbound-method */
if (Element && !Element.prototype.matches) {
    var proto = Element.prototype;
    proto.matches =
        proto.matchesSelector ||
            proto.mozMatchesSelector ||
            proto.msMatchesSelector ||
            proto.oMatchesSelector ||
            proto.webkitMatchesSelector;
}
// Source: https://github.com/naminho/svg-classlist-polyfill/blob/master/polyfill.js
if (!("classList" in SVGElement.prototype)) {
    Object.defineProperty(SVGElement.prototype, "classList", {
        get: function get() {
            var _this = this;
            return {
                contains: function contains(className) {
                    return _this.className.baseVal.split(" ").indexOf(className) !== -1;
                },
                add: function add(className) {
                    return _this.setAttribute("class", _this.getAttribute("class") + " " + className);
                },
                remove: function remove(className) {
                    var removedClass = _this
                        .getAttribute("class")
                        .replace(new RegExp("(\\s|^)".concat(className, "(\\s|$)"), "g"), "$2");
                    if (_this.classList.contains(className)) {
                        _this.setAttribute("class", removedClass);
                    }
                },
                toggle: function toggle(className) {
                    if (this.contains(className)) {
                        this.remove(className);
                    }
                    else {
                        this.add(className);
                    }
                },
            };
        },
        configurable: true,
    });
}


/***/ }),

/***/ "../ts-common/polyfills/object.ts":
/*!****************************************!*\
  !*** ../ts-common/polyfills/object.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

Object.values = Object.values
    ? Object.values
    : function (obj) {
        var allowedTypes = [
            "[object String]",
            "[object Object]",
            "[object Array]",
            "[object Function]",
        ];
        var objType = Object.prototype.toString.call(obj);
        if (obj === null || typeof obj === "undefined") {
            throw new TypeError("Cannot convert undefined or null to object");
        }
        else if (!~allowedTypes.indexOf(objType)) {
            return [];
        }
        else {
            // if ES6 is supported
            if (Object.keys) {
                return Object.keys(obj).map(function (key) {
                    return obj[key];
                });
            }
            var result = [];
            for (var prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    result.push(obj[prop]);
                }
            }
            return result;
        }
    };


/***/ }),

/***/ "../ts-common/polyfills/string.ts":
/*!****************************************!*\
  !*** ../ts-common/polyfills/string.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (!String.prototype.includes) {
    String.prototype.includes = function (search, start) {
        "use strict";
        if (typeof start !== "number") {
            start = 0;
        }
        if (start + search.length > this.length) {
            return false;
        }
        else {
            return this.indexOf(search, start) !== -1;
        }
    };
}
if (!String.prototype.startsWith) {
    Object.defineProperty(String.prototype, "startsWith", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (searchString, position) {
            position = position || 0;
            return this.indexOf(searchString, position) === position;
        },
    });
}
if (!String.prototype.padStart) {
    String.prototype.padStart = function padStart(targetLength, padString) {
        targetLength = targetLength >> 0;
        padString = String(padString || " ");
        if (this.length > targetLength) {
            return String(this);
        }
        else {
            targetLength = targetLength - this.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength / padString.length);
            }
            return padString.slice(0, targetLength) + String(this);
        }
    };
}


/***/ }),

/***/ "../ts-common/scrollView.ts":
/*!**********************************!*\
  !*** ../ts-common/scrollView.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! ./core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! ./dom */ "../ts-common/dom.ts");
var html_1 = __webpack_require__(/*! ./html */ "../ts-common/html.ts");
var ScrollView = /** @class */ (function () {
    function ScrollView(getRootView, config) {
        var _a;
        var _this = this;
        if (config === void 0) { config = {}; }
        this.config = core_1.extend({
            speed: 20,
        }, config);
        this._wheelName = html_1.isIE() ? "onmousewheel" : "onwheel";
        this._getRootView = getRootView;
        this._scrollTop = 0;
        this._runnerTop = 0;
        this._runnerHeight = 0;
        this._visibleArea = 1;
        this._scrollWidth = html_1.getScrollbarWidth();
        this._handlers = (_a = {
                onscroll: function () {
                    _this._update();
                }
            },
            _a[this._wheelName] = function (e) {
                e.preventDefault();
                var sign = (e.deltaY || -e.wheelDelta) > 0 ? 1 : -1;
                var delta = sign * _this.config.speed;
                var area = _this._getRefs().area;
                var maxBottom = area.scrollHeight - _this._runnerHeight;
                var newScrollTop = _this._scrollTop + delta;
                if (newScrollTop < 0) {
                    area.scrollTop = 0;
                }
                else if (newScrollTop > maxBottom) {
                    area.scrollTop = maxBottom;
                }
                else {
                    area.scrollTop = newScrollTop;
                }
                _this._update();
            },
            _a.onmousedownRunner = function (mouseDownEv) {
                mouseDownEv.preventDefault();
                var _a = _this._getRefs(), area = _a.area, runner = _a.runner;
                var rect = area.getBoundingClientRect();
                var top = rect.top + window.pageYOffset;
                var bottom = rect.bottom + window.pageYOffset;
                var maxBottom = area.scrollHeight - _this._runnerHeight;
                var delta = mouseDownEv.pageY - runner.getBoundingClientRect().top - window.pageYOffset;
                var mouseMove = function (e) {
                    var y = e.pageY - delta;
                    if (y <= top) {
                        area.scrollTop = 0;
                    }
                    else if (y > bottom) {
                        area.scrollTop = maxBottom;
                    }
                    else {
                        area.scrollTop = (y - top) / _this._visibleArea;
                    }
                    _this._update();
                };
                var mouseUp = function () {
                    document.removeEventListener("mousemove", mouseMove);
                    document.removeEventListener("mouseup", mouseUp);
                    document.body.classList.remove("dhx-no-select");
                };
                document.body.classList.add("dhx-no-select");
                document.addEventListener("mousemove", mouseMove);
                document.addEventListener("mouseup", mouseUp);
            },
            _a.onmousedownTrack = function (e) {
                if (e.target.classList.contains("scroll-runner")) {
                    return;
                }
                e.preventDefault();
                var area = _this._getRefs().area;
                var top = e.target.getBoundingClientRect().top + window.pageYOffset;
                var maxBottom = area.scrollHeight - _this._runnerHeight;
                var y = e.pageY;
                var updateScroll = function () {
                    var scrollTop;
                    if (y < top + _this._runnerTop) {
                        scrollTop = _this._scrollTop - area.clientHeight;
                        if (scrollTop < 0) {
                            scrollTop = 0;
                        }
                    }
                    else if (y > top + _this._runnerTop + _this._runnerHeight) {
                        scrollTop = _this._scrollTop + area.clientHeight;
                        if (scrollTop > maxBottom) {
                            scrollTop = maxBottom;
                        }
                    }
                    else {
                        return;
                    }
                    area.scrollTop = scrollTop;
                    _this._update();
                };
                updateScroll();
                var mousePressed = setInterval(updateScroll, 100);
                var mouseUp = function () {
                    document.removeEventListener("mouseup", mouseUp);
                    window.clearInterval(mousePressed); // typescript bug
                };
                document.addEventListener("mouseup", mouseUp);
            },
            _a);
    }
    ScrollView.prototype.render = function (element) {
        var _a;
        var _this = this;
        if (this._scrollWidth === 0) {
            return element;
        }
        return dom_1.el(".scroll-view-wrapper", {
            style: {
                width: "100%",
                height: "100%",
                overflow: "hidden",
                position: "relative",
            },
        }, [
            dom_1.el(".scroll-view", {
                onscroll: this._handlers.onscroll,
                _ref: "scroll-view",
                _hooks: {
                    didInsert: function () {
                        _this._update();
                    },
                    didRecycle: function () {
                        _this._update();
                    },
                },
                style: {
                    height: "100%",
                    width: "calc(100% + " + this._scrollWidth + "px)",
                    overflowY: "scroll",
                    "-ms-overflow-style": "scrollbar",
                },
            }, [element]),
            dom_1.el(".y-scroll", (_a = {
                    onmousedown: this._handlers.onmousedownTrack
                },
                _a[this._wheelName] = this._handlers[this._wheelName],
                _a.style = {
                    width: "10px",
                    height: "100%",
                    right: 0,
                    top: 0,
                    position: "absolute",
                },
                _a), [
                dom_1.el(".scroll-runner", {
                    _ref: "scroll-runner",
                    onmousedown: this._handlers.onmousedownRunner,
                    style: {
                        height: this._runnerHeight + "px",
                        right: "2px",
                        top: this._runnerTop,
                        width: "6px",
                        position: "absolute",
                    },
                }),
            ]),
        ]);
    };
    ScrollView.prototype._update = function () {
        var refs = this._getRefs();
        if (!refs) {
            return;
        }
        var area = refs.area, runner = refs.runner;
        this._visibleArea = area.clientHeight / area.scrollHeight;
        this._scrollTop = area.scrollTop;
        this._runnerTop = this._scrollTop * this._visibleArea;
        if (this._visibleArea < 1) {
            this._runnerHeight = area.clientHeight * this._visibleArea;
        }
        else {
            this._runnerHeight = 0;
        }
        // update dom
        runner.style.top = this._runnerTop + "px";
        runner.style.height = this._runnerHeight + "px";
    };
    ScrollView.prototype._getRefs = function () {
        var rootView = this._getRootView();
        if (rootView.refs && rootView.refs["scroll-view"] && rootView.refs["scroll-runner"]) {
            return {
                area: rootView.refs["scroll-view"].el,
                runner: rootView.refs["scroll-runner"].el,
            };
        }
    };
    return ScrollView;
}());
exports.ScrollView = ScrollView;


/***/ }),

/***/ "../ts-common/types.ts":
/*!*****************************!*\
  !*** ../ts-common/types.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SelectionEvents;
(function (SelectionEvents) {
    SelectionEvents["beforeUnSelect"] = "beforeunselect";
    SelectionEvents["afterUnSelect"] = "afterunselect";
    SelectionEvents["beforeSelect"] = "beforeselect";
    SelectionEvents["afterSelect"] = "afterselect";
    SelectionEvents["beforeEnable"] = "beforeEnable";
    SelectionEvents["beforeDisable"] = "beforeDisable";
    SelectionEvents["afterEnable"] = "afterEnable";
    SelectionEvents["afterDisable"] = "afterDisable";
})(SelectionEvents = exports.SelectionEvents || (exports.SelectionEvents = {}));


/***/ }),

/***/ "../ts-common/view.ts":
/*!****************************!*\
  !*** ../ts-common/view.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! ./core */ "../ts-common/core.ts");
var html_1 = __webpack_require__(/*! ./html */ "../ts-common/html.ts");
var View = /** @class */ (function () {
    function View(_container, config) {
        this._uid = core_1.uid();
        this.config = config || {};
    }
    View.prototype.mount = function (container, vnode) {
        if (vnode) {
            this._view = vnode;
        }
        if (container && this._view && this._view.mount) {
            // init view inside of HTML container
            this._container = html_1.toNode(container);
            if (this._container.tagName) {
                this._view.mount(this._container);
            }
            else if (this._container.attach) {
                this._container.attach(this);
            }
        }
    };
    View.prototype.unmount = function () {
        var rootView = this.getRootView();
        if (rootView && rootView.node) {
            rootView.unmount();
            this._view = null;
        }
    };
    View.prototype.getRootView = function () {
        return this._view;
    };
    View.prototype.getRootNode = function () {
        return this._view && this._view.node && this._view.node.el;
    };
    View.prototype.paint = function () {
        if (this._view && // was mounted
            (this._view.node || // already rendered node
                this._container)) {
            // not rendered, but has container
            this._doNotRepaint = false;
            this._view.redraw();
        }
    };
    return View;
}());
exports.View = View;
function toViewLike(view) {
    return {
        getRootView: function () { return view; },
        paint: function () { return view.node && view.redraw(); },
        mount: function (container) { return view.mount(container); },
    };
}
exports.toViewLike = toViewLike;


/***/ }),

/***/ "../ts-data/index.ts":
/*!***************************!*\
  !*** ../ts-data/index.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/types */ "../ts-data/sources/types.ts"));
__export(__webpack_require__(/*! ./sources/datacollection */ "../ts-data/sources/datacollection.ts"));
__export(__webpack_require__(/*! ./sources/treecollection */ "../ts-data/sources/treecollection.ts"));
__export(__webpack_require__(/*! ./sources/DragManager */ "../ts-data/sources/DragManager.ts"));
__export(__webpack_require__(/*! ./sources/dataproxy */ "../ts-data/sources/dataproxy.ts"));
__export(__webpack_require__(/*! ./sources/lazydataproxy */ "../ts-data/sources/lazydataproxy.ts"));
__export(__webpack_require__(/*! ./sources/helpers */ "../ts-data/sources/helpers.ts"));
__export(__webpack_require__(/*! ./sources/drivers/CsvDriver */ "../ts-data/sources/drivers/CsvDriver.ts"));
__export(__webpack_require__(/*! ./sources/drivers/JsonDriver */ "../ts-data/sources/drivers/JsonDriver.ts"));
__export(__webpack_require__(/*! ./sources/selection */ "../ts-data/sources/selection.ts"));
__export(__webpack_require__(/*! ./sources/drivers/drivers */ "../ts-data/sources/drivers/drivers.ts"));
__export(__webpack_require__(/*! ./sources/ajax */ "../ts-data/sources/ajax.ts"));


/***/ }),

/***/ "../ts-data/sources/CollectionStore.ts":
/*!*********************************************!*\
  !*** ../ts-data/sources/CollectionStore.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CollectionStore = /** @class */ (function () {
    function CollectionStore() {
        this._store = {};
    }
    CollectionStore.prototype.setItem = function (id, target) {
        this._store[id] = target;
    };
    CollectionStore.prototype.getItem = function (id) {
        if (!this._store[id]) {
            return null;
        }
        return this._store[id];
    };
    return CollectionStore;
}());
var dhx = (window.dhxHelpers = window.dhxHelpers || {});
dhx.collectionStore = dhx.collectionStore || new CollectionStore();
exports.collectionStore = dhx.collectionStore;


/***/ }),

/***/ "../ts-data/sources/DragManager.ts":
/*!*****************************************!*\
  !*** ../ts-data/sources/DragManager.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var CollectionStore_1 = __webpack_require__(/*! ./CollectionStore */ "../ts-data/sources/CollectionStore.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-data/sources/types.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-data/sources/helpers.ts");
function getPosition(e) {
    var y = e.clientY;
    var element = html_1.locateNode(e);
    if (!element) {
        return null;
    }
    var treeLine = element.childNodes[0];
    var _a = treeLine.getBoundingClientRect(), top = _a.top, height = _a.height;
    return (y - top) / height;
}
function dragEventContent(element, elements, exhaustiveList) {
    if (exhaustiveList === void 0) { exhaustiveList = false; }
    var rect = element.getBoundingClientRect();
    var ghost = document.createElement("div");
    var clone = element.cloneNode(true);
    clone.style.width = rect.width + "px";
    clone.style.height = rect.height + "px";
    clone.style.maxHeight = rect.height + "px";
    clone.style.fontSize = window.getComputedStyle(element.parentElement).fontSize;
    clone.style.opacity = "0.8";
    clone.style.fontSize = window.getComputedStyle(element.parentElement).fontSize;
    if (!exhaustiveList || !elements || !elements.length) {
        ghost.appendChild(clone);
    }
    if (elements && elements.length) {
        elements.forEach(function (node, key) {
            var nodeClone = node.cloneNode(true);
            nodeClone.style.width = rect.width + "px";
            nodeClone.style.height = rect.height + "px";
            nodeClone.style.maxHeight = rect.height + "px";
            nodeClone.style.top = (key + 1) * 12 - rect.height - rect.height * key + "px";
            nodeClone.style.left = (key + 1) * 12 + "px";
            nodeClone.style.opacity = "0.6";
            nodeClone.style.zIndex = "" + (-key - 1);
            ghost.appendChild(nodeClone);
        });
    }
    ghost.className = "dhx_drag-ghost";
    return ghost;
}
var DragManager = /** @class */ (function () {
    function DragManager() {
        var _this = this;
        this._transferData = {};
        this._canMove = true;
        this._isDrag = false;
        this._onMouseMove = function (e) {
            if (!_this._transferData.start) {
                return;
            }
            var pageX = e.targetTouches ? e.targetTouches[0].pageX : e.pageX;
            var pageY = e.targetTouches ? e.targetTouches[0].pageY : e.pageY;
            var _a = _this._transferData, x = _a.x, y = _a.y, start = _a.start, componentId = _a.componentId;
            if (!_this._transferData.ghost) {
                if (Math.abs(x - pageX) < 3 && Math.abs(y - pageY) < 3) {
                    return;
                }
                else {
                    var ghost = _this._onDragStart(start, componentId, e);
                    if (!ghost) {
                        _this._endDrop(e);
                        return;
                    }
                    else {
                        _this._transferData.ghost = ghost;
                        document.body.appendChild(_this._transferData.ghost);
                    }
                }
            }
            _this._moveGhost(pageX, pageY);
            _this._onDrag(e);
        };
        this._onMouseUp = function (e) {
            if (!_this._transferData.x) {
                return;
            }
            if (_this._transferData.ghost) {
                _this._removeGhost();
                _this._onDrop(e);
            }
            else {
                _this._endDrop(e);
            }
            if (!e.targetTouches) {
                document.removeEventListener("mousemove", _this._onMouseMove);
                document.removeEventListener("mouseup", _this._onMouseUp);
            }
            else {
                document.removeEventListener("touchmove", _this._onMouseMove);
                document.removeEventListener("touchend", _this._onMouseUp);
            }
        };
    }
    DragManager.prototype.setItem = function (id, item) {
        CollectionStore_1.collectionStore.setItem(id, item);
    };
    DragManager.prototype.onMouseDown = function (e, source, itemsForGhost) {
        // onmousedown only for target objects
        if (e.which !== 1 && !e.targetTouches) {
            return;
        }
        if (!e.targetTouches) {
            document.addEventListener("mousemove", this._onMouseMove);
            document.addEventListener("mouseup", this._onMouseUp);
        }
        else {
            document.addEventListener("touchmove", this._onMouseMove, false);
            document.addEventListener("touchend", this._onMouseUp, false);
        }
        var item = html_1.locateNode(e, "dhx_id");
        var id = item && item.getAttribute("dhx_id");
        var componentId = html_1.locate(e, "dhx_widget_id");
        if (source && source.includes(id) && source.length > 1) {
            this._transferData.source = source;
            this._itemsForGhost = itemsForGhost;
        }
        else {
            this._transferData.source = [id];
            this._itemsForGhost = null;
        }
        if (id && componentId) {
            var _a = html_1.getBox(item), left = _a.left, top_1 = _a.top;
            var pageX = e.targetTouches ? e.targetTouches[0].pageX : e.pageX;
            var pageY = e.targetTouches ? e.targetTouches[0].pageY : e.pageY;
            this._transferData.initXOffset = pageX - left;
            this._transferData.initYOffset = pageY - top_1;
            this._transferData.x = pageX;
            this._transferData.y = pageY;
            this._transferData.componentId = componentId;
            this._transferData.start = id;
            this._transferData.item = item;
        }
    };
    DragManager.prototype.isDrag = function () {
        return this._isDrag;
    };
    DragManager.prototype._moveGhost = function (x, y) {
        if (this._transferData.ghost) {
            this._transferData.ghost.style.left = x - this._transferData.initXOffset + "px";
            this._transferData.ghost.style.top = y - this._transferData.initYOffset + "px";
        }
    };
    DragManager.prototype._removeGhost = function () {
        document.body.removeChild(this._transferData.ghost);
    };
    DragManager.prototype._onDrop = function (e) {
        if (!this._canMove) {
            this._endDrop(e);
            return;
        }
        var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target, dropComponentId = _a.dropComponentId, dropPosition = _a.dropPosition;
        var data = { start: start, source: source, target: target, dropPosition: dropPosition };
        var component = CollectionStore_1.collectionStore.getItem(dropComponentId);
        var config = component && component.config;
        if (!component || config.dragMode === "source") {
            this._endDrop(e);
            return;
        }
        if (component.events.fire(types_1.DragEvents.beforeDrop, [data, e])) {
            var to = {
                id: target,
                component: component,
            };
            var from = {
                id: start,
                component: this._transferData.component,
            };
            this._move(from, to);
            to.component.events.fire(types_1.DragEvents.afterDrop, [data, e]);
        }
        this._endDrop(e);
    };
    DragManager.prototype._onDragStart = function (id, componentId, e) {
        var component = CollectionStore_1.collectionStore.getItem(componentId);
        var config = component.config;
        var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target;
        var data = {
            start: start,
            source: source,
            target: target,
        };
        if (config.dragMode === "target") {
            return null;
        }
        var ghost = dragEventContent(this._transferData.item, this._itemsForGhost, config.dragItem === "column");
        var ans = component.events.fire(types_1.DragEvents.beforeDrag, [data, e, ghost]);
        if (!ans || !id) {
            return null;
        }
        component.events.fire(types_1.DragEvents.dragStart, [data, e]);
        this._isDrag = true;
        this._toggleTextSelection(true);
        this._transferData.component = component;
        this._transferData.dragConfig = config;
        return ghost;
    };
    DragManager.prototype._onDrag = function (e) {
        var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;
        var clientY = e.targetTouches ? e.targetTouches[0].clientY : e.clientY;
        var element = document.elementFromPoint(clientX, clientY);
        var collectionId = html_1.locate(element, "dhx_widget_id");
        if (!collectionId) {
            if (this._canMove) {
                this._cancelCanDrop(e);
            }
            return;
        }
        var _a = this._transferData, dropComponentId = _a.dropComponentId, start = _a.start, source = _a.source, target = _a.target, componentId = _a.componentId, dropPosition = _a.dropPosition;
        var component = CollectionStore_1.collectionStore.getItem(collectionId);
        var id = html_1.locate(element, "dhx_id");
        if (!id) {
            this._cancelCanDrop(e);
            this._transferData.dropComponentId = collectionId;
            this._transferData.target = null;
            this._canDrop(e);
            return;
        }
        if (component.config.dropBehaviour === "complex") {
            var pos = getPosition(e);
            if (pos <= 0.25) {
                this._transferData.dropPosition = "top";
            }
            else if (pos >= 0.75) {
                this._transferData.dropPosition = "bottom";
            }
            else {
                this._transferData.dropPosition = "in";
            }
        }
        else if (target === id && dropComponentId === collectionId) {
            return;
        }
        var from = {
            id: start,
            component: this._transferData.component,
        };
        if (component.config.dragMode === "source") {
            return;
        }
        from.component.events.fire(types_1.DragEvents.dragOut, [
            {
                start: start,
                source: source,
                target: target,
            },
            e,
        ]);
        if (collectionId !== componentId ||
            !helpers_1.isTreeCollection(from.component.data) ||
            (helpers_1.isTreeCollection(from.component.data) && from.component.data.canCopy(from.id, id))) {
            this._cancelCanDrop(e); // clear last
            this._transferData.target = id;
            this._transferData.dropComponentId = collectionId;
            var canMove = from.component.events.fire(types_1.DragEvents.dragIn, [
                {
                    start: start,
                    source: source,
                    target: target,
                    dropPosition: dropPosition,
                },
                e,
            ]);
            if (canMove) {
                this._canDrop(e);
            }
        }
        else {
            this._cancelCanDrop(e);
        }
    };
    DragManager.prototype._move = function (from, to) {
        var fromData = from.component.data;
        var toData = to.component.data;
        var index = 0;
        var componentId = to.id;
        var behaviour = helpers_1.isTreeCollection(toData) ? to.component.config.dropBehaviour : undefined;
        var gridConfig = from.component.config.columns
            ? from.component.config
            : undefined;
        var isColumnDrag = gridConfig &&
            (gridConfig.dragItem === "complex" || gridConfig.dragItem === "column") &&
            gridConfig.columns.map(function (c) { return c.id; }).filter(function (id) { return id === from.id || id === to.id; }).length;
        if (isColumnDrag && from.component === to.component && from.id !== to.id) {
            var grid = from.component;
            var currentCols = grid.config.columns.map(function (c) { return (__assign({}, c)); });
            var sourceIndex = currentCols.findIndex(function (c) { return c.id === from.id; });
            var componentIndex = currentCols.findIndex(function (c) { return c.id === to.id; });
            currentCols.splice(componentIndex, 0, currentCols.splice(sourceIndex, 1)[0]);
            grid.setColumns(currentCols);
            grid.paint();
            return;
        }
        switch (behaviour) {
            case "child":
                break;
            case "sibling":
                componentId = toData.getParent(componentId);
                index = toData.getIndex(to.id) + 1;
                break;
            case "complex": {
                var dropPosition = this._transferData.dropPosition;
                if (dropPosition === "top") {
                    componentId = toData.getParent(componentId);
                    index = toData.getIndex(to.id);
                }
                else if (dropPosition === "bottom") {
                    componentId = toData.getParent(componentId);
                    index = toData.getIndex(to.id) + 1;
                }
                break;
            }
            default:
                // list move
                if (!to.id) {
                    index = -1;
                }
                else if (from.component === to.component &&
                    toData.getIndex(from.id) < toData.getIndex(to.id)) {
                    index = toData.getIndex(to.id) - 1;
                }
                else {
                    index = toData.getIndex(to.id);
                }
        }
        if (this._transferData.dragConfig.dragCopy) {
            if (this._transferData.source instanceof Array && this._transferData.source.length > 1) {
                this._transferData.source.map(function (selctedId) {
                    fromData.copy(selctedId, index, toData, componentId);
                    if (index > -1) {
                        index++;
                    }
                });
            }
            else {
                fromData.copy(from.id, index, toData, componentId);
            }
        }
        else {
            if (this._transferData.source instanceof Array && this._transferData.source.length > 1) {
                this._transferData.source.map(function (selctedId) {
                    fromData.move(selctedId, index, toData, componentId);
                    if (index > -1) {
                        index++;
                    }
                });
            }
            else {
                fromData.move(from.id, index, toData, componentId); // typescript bug??
            }
        }
    };
    DragManager.prototype._endDrop = function (e) {
        this._toggleTextSelection(false);
        if (this._transferData.component) {
            var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target;
            var data = { start: start, source: source, target: target };
            this._transferData.component.events.fire(types_1.DragEvents.afterDrag, [data, e]);
        }
        this._cancelCanDrop(e);
        this._canMove = true;
        this._transferData = {};
        this._transferData.target = null;
        this._transferData.dropComponentId = null;
    };
    DragManager.prototype._cancelCanDrop = function (e) {
        this._canMove = false;
        this._isDrag = false;
        var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target, dropComponentId = _a.dropComponentId;
        var data = {
            start: start,
            source: source,
            target: target,
        };
        var collection = CollectionStore_1.collectionStore.getItem(dropComponentId);
        if (collection && target) {
            collection.events.fire(types_1.DragEvents.cancelDrop, [data, e]);
        }
        this._transferData.dropComponentId = null;
        this._transferData.target = null;
    };
    DragManager.prototype._canDrop = function (e) {
        this._canMove = true;
        var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target, dropPosition = _a.dropPosition;
        var data = {
            start: start,
            source: source,
            target: target,
            dropPosition: dropPosition,
        };
        var component = CollectionStore_1.collectionStore.getItem(this._transferData.dropComponentId);
        if (component && this._transferData.target) {
            component.events.fire(types_1.DragEvents.canDrop, [data, e]);
        }
    };
    DragManager.prototype._toggleTextSelection = function (add) {
        if (add) {
            document.body.classList.add("dhx_no-select");
        }
        else {
            document.body.classList.remove("dhx_no-select");
        }
    };
    return DragManager;
}());
var dhx = (window.dhxHelpers = window.dhxHelpers || {});
dhx.dragManager = dhx.dragManager || new DragManager();
exports.dragManager = dhx.dragManager;


/***/ }),

/***/ "../ts-data/sources/ajax.ts":
/*!**********************************!*\
  !*** ../ts-data/sources/ajax.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! ./types */ "../ts-data/sources/types.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-data/sources/helpers.ts");
function toQueryString(data) {
    return Object.keys(data)
        .reduce(function (entries, key) {
        var value = typeof data[key] === "object" ? JSON.stringify(data[key]) : data[key];
        entries.push(key + "=" + encodeURIComponent(value));
        return entries;
    }, [])
        .join("&");
}
function inferResponseType(contentType) {
    if (!contentType) {
        return "text";
    }
    if (contentType.includes("json")) {
        return "json";
    }
    if (contentType.includes("xml")) {
        return "xml";
    }
    return "text";
}
function send(url, data, method, headers, responseType) {
    function parseResponse(responseText, genResponseType) {
        switch (genResponseType) {
            case "json": {
                return JSON.parse(responseText);
            }
            case "text": {
                return responseText;
            }
            case "xml": {
                var driver = helpers_1.toDataDriver(types_1.DataDriver.xml);
                if (driver) {
                    return driver.toJsonObject(responseText);
                }
                else {
                    return { parseError: "Incorrect data driver type: 'xml'" };
                }
            }
            default: {
                return responseText;
            }
        }
    }
    var allHeaders = headers || {};
    if (responseType) {
        allHeaders.Accept = "application/" + responseType;
    }
    if (method !== "GET") {
        allHeaders["Content-Type"] = allHeaders["Content-Type"] || "application/json";
    }
    if (method === "GET") {
        var urlData = data && typeof data === "object"
            ? toQueryString(data)
            : data && typeof data === "string"
                ? data
                : "";
        if (urlData) {
            url += !url.includes("?") ? "?" : "&";
            url += urlData;
        }
        data = null;
    }
    if (!window.fetch) {
        return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.onload = function () {
                if (xhr.status >= 200 && xhr.status < 300) {
                    if (responseType === "raw") {
                        resolve({
                            url: xhr.responseURL,
                            headers: xhr
                                .getAllResponseHeaders()
                                .trim()
                                .split(/[\r\n]+/)
                                .reduce(function (acc, cur) {
                                var kv = cur.split(": ");
                                acc[kv[0]] = kv[1];
                                return acc;
                            }, {}),
                            body: xhr.response,
                        });
                    }
                    if (xhr.status === 204) {
                        resolve();
                    }
                    else {
                        resolve(parseResponse(xhr.responseText, responseType || inferResponseType(xhr.getResponseHeader("Content-Type"))));
                    }
                }
                else {
                    reject({
                        status: xhr.status,
                        statusText: xhr.statusText,
                    });
                }
            };
            xhr.onerror = function () {
                reject({
                    status: xhr.status,
                    statusText: xhr.statusText,
                    message: xhr.responseText,
                });
            };
            xhr.open(method, url);
            for (var headerKey in allHeaders) {
                xhr.setRequestHeader(headerKey, allHeaders[headerKey]);
            }
            switch (method) {
                case "POST":
                case "DELETE":
                case "PUT":
                    xhr.send(data !== undefined ? JSON.stringify(data) : "");
                    break;
                case "GET":
                    xhr.send();
                    break;
                default:
                    xhr.send();
                    break;
            }
        });
    }
    else {
        return window
            .fetch(url, {
            method: method,
            body: data ? JSON.stringify(data) : null,
            headers: allHeaders,
        })
            .then(function (response) {
            if (response.ok) {
                var genResponseType = responseType || inferResponseType(response.headers.get("Content-Type"));
                if (genResponseType === "raw") {
                    return {
                        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
                        // @ts-ignore
                        headers: Object.fromEntries(response.headers.entries()),
                        url: response.url,
                        body: response.body,
                    };
                }
                if (response.status !== 204) {
                    switch (genResponseType) {
                        case "json": {
                            return response.json();
                        }
                        case "xml": {
                            var driver_1 = helpers_1.toDataDriver(types_1.DataDriver.xml);
                            if (driver_1) {
                                return response.text().then(function (xmlData) { return driver_1.toJsonObject(xmlData); });
                            }
                            else {
                                return response.text();
                            }
                        }
                        default:
                            return response.text();
                    }
                }
            }
            else {
                return response.text().then(function (message) {
                    return Promise.reject({
                        status: response.status,
                        statusText: response.statusText,
                        message: message,
                    });
                });
            }
        });
    }
}
exports.ajax = {
    get: function (url, data, config) {
        return send(url, data, "GET", config && config.headers, config !== undefined ? config.responseType : undefined);
    },
    post: function (url, data, config) {
        return send(url, data, "POST", config && config.headers, config !== undefined ? config.responseType : undefined);
    },
    put: function (url, data, config) {
        return send(url, data, "PUT", config && config.headers, config !== undefined ? config.responseType : undefined);
    },
    delete: function (url, data, config) {
        return send(url, data, "DELETE", config && config.headers, config !== undefined ? config.responseType : undefined);
    },
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promiz */ "../node_modules/promiz/promiz.js")))

/***/ }),

/***/ "../ts-data/sources/datacollection.ts":
/*!********************************************!*\
  !*** ../ts-data/sources/datacollection.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var loader_1 = __webpack_require__(/*! ./datacollection/loader */ "../ts-data/sources/datacollection/loader.ts");
var sort_1 = __webpack_require__(/*! ./datacollection/sort */ "../ts-data/sources/datacollection/sort.ts");
var dataproxy_1 = __webpack_require__(/*! ./dataproxy */ "../ts-data/sources/dataproxy.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-data/sources/helpers.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-data/sources/types.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var DataCollection = /** @class */ (function () {
    function DataCollection(config, events) {
        this.config = config || {};
        this._order = [];
        this._pull = {};
        this._changes = { order: [] };
        this._initOrder = null;
        this._sort = new sort_1.Sort();
        this._loader = new loader_1.Loader(this, this._changes);
        this.events = events || new events_1.EventSystem(this);
        this.events.on(types_1.DataEvents.loadError, function (response) {
            if (typeof response !== "string") {
                helpers_1.dhxError(response);
            }
            else {
                helpers_1.dhxWarning(response);
            }
        });
    }
    DataCollection.prototype.add = function (obj, index) {
        var _this = this;
        if (!this.events.fire(types_1.DataEvents.beforeAdd, [obj])) {
            return;
        }
        if (Array.isArray(obj)) {
            return obj.map(function (element, key) {
                if (key !== 0) {
                    index = index + 1;
                }
                return _this._add(element, index);
            });
        }
        else {
            return this._add(obj, index);
        }
    };
    DataCollection.prototype.remove = function (id) {
        var _this = this;
        if (id) {
            if (id instanceof Array) {
                id.map(function (elementId) {
                    _this._remove(elementId);
                });
            }
            else {
                this._remove(id);
            }
        }
    };
    DataCollection.prototype.removeAll = function () {
        this._removeAll();
        this.events.fire(types_1.DataEvents.removeAll);
        this.events.fire(types_1.DataEvents.change);
    };
    DataCollection.prototype.exists = function (id) {
        return !!this._pull[id];
    };
    DataCollection.prototype.getNearId = function (id) {
        var item = this._pull[id];
        if (!item) {
            return this._order[0].id || "";
        }
    };
    DataCollection.prototype.getItem = function (id) {
        return this._pull[id];
    };
    DataCollection.prototype.update = function (id, obj, silent) {
        var item = this.getItem(id);
        if (item) {
            if (helpers_1.isEqualObj(obj, item)) {
                return;
            }
            if (obj.id && id !== obj.id) {
                helpers_1.dhxWarning("this method doesn't allow change id");
                if (helpers_1.isDebug()) {
                    // eslint-disable-next-line no-debugger
                    debugger;
                }
            }
            else {
                if (obj.parent && item.parent && obj.parent !== item.parent) {
                    this.move(id, -1, this, obj.parent);
                }
                core_1.extend(this._pull[id], obj, false);
                if (this.config.update) {
                    this.config.update(this._pull[id]);
                }
                if (!silent) {
                    this._onChange("update", id, this._pull[id]);
                }
            }
        }
        else {
            helpers_1.dhxWarning("item not found");
        }
    };
    DataCollection.prototype.getIndex = function (id) {
        if (!id) {
            return -1;
        }
        var res = core_1.findIndex(this._order, function (item) { return item.id.toString() === id.toString(); });
        if (this._pull[id] && res >= 0) {
            return res;
        }
    };
    DataCollection.prototype.getId = function (index) {
        if (!this._order[index]) {
            return;
        }
        return this._order[index].id;
    };
    DataCollection.prototype.getLength = function () {
        return this._order.length;
    };
    DataCollection.prototype.isDataLoaded = function (from, to) {
        if (from === void 0) { from = 0; }
        if (to === void 0) { to = this._order.length; }
        if (core_1.isNumeric(from) && core_1.isNumeric(to)) {
            return this._order.slice(from, to).filter(function (item) { return item.$empty; }).length === 0;
        }
        return !this.find(function (item) { return item.$empty; });
    };
    DataCollection.prototype.filter = function (rule, config) {
        if (!this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        config = core_1.extend({
            add: false,
            multiple: true,
        }, config);
        if (!config.add) {
            this._order = this._initOrder || this._order;
            this._initOrder = null;
        }
        this._filters = this._filters || {};
        if (!config.multiple || !rule) {
            this._filters = {};
        }
        if (rule) {
            if (typeof rule === "function") {
                var f = "_";
                this._filters[f] = {
                    match: f,
                    compare: rule,
                };
            }
            else {
                if (!rule.match) {
                    delete this._filters[rule.by];
                }
                else {
                    rule.compare = rule.compare || (function (val, match) { return val === match; });
                    this._filters[rule.by] = rule;
                }
            }
            this._applyFilters();
        }
        this.events.fire(types_1.DataEvents.change);
    };
    DataCollection.prototype.find = function (conf) {
        for (var key in this._pull) {
            var res = helpers_1.findByConf(this._pull[key], conf);
            if (res) {
                return res;
            }
        }
        return null;
    };
    DataCollection.prototype.findAll = function (conf) {
        var res = [];
        for (var key in this._pull) {
            var item = helpers_1.findByConf(this._pull[key], conf);
            if (item) {
                res.push(item);
            }
        }
        return res;
    };
    DataCollection.prototype.sort = function (by) {
        if (!this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        if (!by) {
            this._order = [];
            for (var key in this._pull) {
                this._order.push(this._pull[key]);
            }
            this._applyFilters();
        }
        else {
            this._sort.sort(this._order, by);
            if (this._initOrder && this._initOrder.length) {
                this._sort.sort(this._initOrder, by);
            }
        }
        this.events.fire(types_1.DataEvents.change);
    };
    DataCollection.prototype.copy = function (id, index, target, targetId) {
        var _this = this;
        if (id instanceof Array) {
            return id.map(function (elementId, key) {
                return _this._copy(elementId, index, target, targetId, key);
            });
        }
        else {
            return this._copy(id, index, target, targetId);
        }
    };
    DataCollection.prototype.move = function (id, index, target, targetId) {
        var _this = this;
        if (id instanceof Array) {
            return id.map(function (elementId, key) {
                return _this._move(elementId, index, target, targetId, key);
            });
        }
        else {
            return this._move(id, index, target, targetId);
        }
    };
    DataCollection.prototype.forEach = function (cb) {
        for (var i = 0; i < this._order.length; i++) {
            cb.call(this, this._order[i], i, this._order);
        }
    };
    DataCollection.prototype.load = function (url, driver) {
        if (typeof url === "string") {
            this.dataProxy = url = new dataproxy_1.DataProxy(url);
        }
        this.dataProxy = url;
        return this._loader.load(url, driver);
    };
    DataCollection.prototype.parse = function (data, driver) {
        this._removeAll();
        return this._loader.parse(data, driver);
    };
    DataCollection.prototype.$parse = function (data) {
        var apx = this.config.approximate;
        if (apx) {
            data = this._approximate(data, apx.value, apx.maxNum);
        }
        this._parse_data(data);
        this.events.fire(types_1.DataEvents.change, ["load"]);
        this.events.fire(types_1.DataEvents.load);
    };
    DataCollection.prototype.save = function (url) {
        this._loader.save(url);
    };
    DataCollection.prototype.changeId = function (id, newId, silent) {
        if (newId === void 0) { newId = core_1.uid(); }
        if (!silent && !this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        var item = this.getItem(id);
        if (!item) {
            helpers_1.dhxWarning("item not found");
        }
        else {
            item.id = newId;
            core_1.extend(this._pull[id], item);
            this._pull[newId] = this._pull[id];
            if (!silent) {
                this._onChange("update", newId, this._pull[newId]);
            }
            delete this._pull[id];
        }
    };
    // todo: loop through the array and check saved statuses
    DataCollection.prototype.isSaved = function () {
        return !this._changes.order.length; // todo: bad solution, errors and holded elments are missed...
    };
    DataCollection.prototype.map = function (cb) {
        var result = [];
        for (var i = 0; i < this._order.length; i++) {
            result.push(cb.call(this, this._order[i], i, this._order));
        }
        return result;
    };
    DataCollection.prototype.mapRange = function (from, to, cb) {
        if (from < 0) {
            from = 0;
        }
        if (to > this._order.length - 1) {
            to = this._order.length - 1;
        }
        var arr = this._order.slice(from, to);
        var result = [];
        for (var i = from; i <= to; i++) {
            result.push(cb.call(this, this._order[i], i, arr));
        }
        return result;
    };
    DataCollection.prototype.reduce = function (cb, acc) {
        for (var i = 0; i < this._order.length; i++) {
            acc = cb.call(this, acc, this._order[i], i);
        }
        return acc;
    };
    DataCollection.prototype.serialize = function (driver) {
        if (driver === void 0) { driver = types_1.DataDriver.json; }
        // remove $ attrs
        var data = this.map(function (item) {
            var newItem = __assign({}, item);
            Object.keys(newItem).forEach(function (key) {
                if (key.startsWith("$")) {
                    delete newItem[key];
                }
            });
            return newItem;
        });
        var dataDriver = helpers_1.toDataDriver(driver);
        if (dataDriver) {
            return dataDriver.serialize(data);
        }
    };
    DataCollection.prototype.getInitialData = function () {
        return this._initOrder;
    };
    DataCollection.prototype._add = function (obj, index) {
        if (!this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        var id = this._addCore(obj, index);
        this._onChange("add", obj.id, obj);
        this.events.fire(types_1.DataEvents.afterAdd, [obj]);
        return id;
    };
    DataCollection.prototype._remove = function (id) {
        if (!this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        var obj = this._pull[id];
        if (obj) {
            if (!this.events.fire(types_1.DataEvents.beforeRemove, [obj])) {
                return;
            }
            this._removeCore(obj.id);
            this._onChange("remove", id, obj);
        }
        this.events.fire(types_1.DataEvents.afterRemove, [obj]);
    };
    DataCollection.prototype._copy = function (id, index, target, targetId, key) {
        if (!this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        if (!this.exists(id)) {
            return null;
        }
        var newid = core_1.uid();
        if (key) {
            index = index === -1 ? -1 : index + key;
        }
        if (target) {
            if (!(target instanceof DataCollection) && targetId) {
                target.add(helpers_1.copyWithoutInner(this.getItem(id)), index);
                return;
            }
            if (target.exists(id)) {
                target.add(__assign(__assign({}, helpers_1.copyWithoutInner(this.getItem(id))), { id: newid }), index);
                return newid;
            }
            else {
                target.add(helpers_1.copyWithoutInner(this.getItem(id)), index);
                return id;
            }
        }
        this.add(__assign(__assign({}, helpers_1.copyWithoutInner(this.getItem(id))), { id: newid }), index);
        return newid;
    };
    DataCollection.prototype._move = function (id, index, target, targetId, key) {
        if (!this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        if (key) {
            index = index === -1 ? -1 : index + key;
        }
        if (target && target !== this && this.exists(id)) {
            var item = core_1.copy(this.getItem(id), true);
            if (target.exists(id)) {
                item.id = core_1.uid();
            }
            if (targetId) {
                item.parent = targetId;
            }
            target.add(item, index);
            // remove data from original collection
            this.remove(id);
            return item.id;
        }
        if (this.getIndex(id) === index) {
            return null;
        }
        // move other elements
        var spliced = this._order.splice(this.getIndex(id), 1)[0];
        if (index === -1) {
            index = this._order.length;
        }
        this._order.splice(index, 0, spliced);
        this.events.fire(types_1.DataEvents.change, [id, "update", this.getItem(id)]);
        return id;
    };
    DataCollection.prototype._removeAll = function () {
        this._pull = {};
        this._order = [];
        this._changes.order = [];
        this._initOrder = null;
    };
    DataCollection.prototype._addCore = function (obj, index) {
        if (this.config.init) {
            obj = this.config.init(obj);
        }
        obj.id = obj.id ? obj.id.toString() : core_1.uid();
        if (this._pull[obj.id]) {
            helpers_1.dhxError("Item already exist");
        }
        // todo: not ideal solution
        if (this._initOrder && this._initOrder.length) {
            this._addToOrder(this._initOrder, obj, index);
        }
        this._addToOrder(this._order, obj, index);
        return obj.id;
    };
    DataCollection.prototype._removeCore = function (id) {
        if (this.getIndex(id) >= 0) {
            this._order = this._order.filter(function (el) { return el.id !== id; });
            delete this._pull[id];
        }
        if (this._initOrder && this._initOrder.length) {
            this._initOrder = this._initOrder.filter(function (el) { return el.id !== id; });
        }
    };
    DataCollection.prototype._parse_data = function (data) {
        var index = this._order.length;
        if (this.config.prep) {
            data = this.config.prep(data);
        }
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var obj = data_1[_i];
            if (this.config.init) {
                obj = this.config.init(obj);
            }
            obj.id = obj.id || obj.id === 0 ? obj.id : core_1.uid();
            this._pull[obj.id] = obj;
            this._order[index++] = obj;
        }
    };
    DataCollection.prototype._approximate = function (data, values, maxNum) {
        var len = data.length;
        var vlen = values.length;
        var rlen = Math.floor(len / maxNum);
        var newData = Array(Math.ceil(len / rlen));
        var index = 0;
        for (var i = 0; i < len; i += rlen) {
            var newItem = core_1.copy(data[i]);
            var end = Math.min(len, i + rlen);
            for (var j = 0; j < vlen; j++) {
                var sum = 0;
                for (var z = i; z < end; z++) {
                    sum += data[z][values[j]];
                }
                newItem[values[j]] = sum / (end - i);
            }
            newData[index++] = newItem;
        }
        return newData;
    };
    DataCollection.prototype._onChange = function (status, id, obj) {
        for (var _i = 0, _a = this._changes.order; _i < _a.length; _i++) {
            var item = _a[_i];
            // update pending item if previous state is "saving" or if item not saved yet
            if (item.id === id && !item.saving) {
                // update item
                if (item.error) {
                    item.error = false;
                }
                item = __assign(__assign({}, item), { obj: obj, status: status });
                this.events.fire(types_1.DataEvents.change, [id, status, obj]);
                return;
            }
        }
        this._changes.order.push({ id: id, status: status, obj: __assign({}, obj), saving: false });
        this.events.fire(types_1.DataEvents.change, [id, status, obj]);
    };
    DataCollection.prototype._addToOrder = function (array, obj, index) {
        if (index >= 0 && array[index]) {
            this._pull[obj.id] = obj;
            array.splice(index, 0, obj);
        }
        else {
            this._pull[obj.id] = obj;
            array.push(obj);
        }
    };
    DataCollection.prototype._applyFilters = function () {
        var _this = this;
        if (this._filters && Object.keys(this._filters).length) {
            var fOrder = this._order.filter(function (item) {
                return Object.keys(_this._filters).every(function (key) {
                    return item[key]
                        ? _this._filters[key].compare(item[key], _this._filters[key].match, item)
                        : _this._filters[key].compare(item);
                });
            });
            if (!this._initOrder) {
                this._initOrder = this._order;
            }
            this._order = fOrder;
        }
    };
    return DataCollection;
}());
exports.DataCollection = DataCollection;


/***/ }),

/***/ "../ts-data/sources/datacollection/loader.ts":
/*!***************************************************!*\
  !*** ../ts-data/sources/datacollection/loader.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var helpers_1 = __webpack_require__(/*! ../helpers */ "../ts-data/sources/helpers.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-data/sources/types.ts");
var Loader = /** @class */ (function () {
    function Loader(parent, changes) {
        this._parent = parent;
        this._changes = changes; // todo: [dirty] mutation
    }
    Loader.prototype.load = function (url, driver) {
        var _this = this;
        // TODO: change way for checking lazyLoad
        if (url.config && !this._parent.events.fire(types_1.DataEvents.beforeLazyLoad, [])) {
            return;
        }
        return (this._parent.loadData = url
            .load()
            .then(function (data) {
            if (data) {
                return _this.parse(data, driver);
            }
            else {
                return [];
            }
        })
            .catch(function (error) {
            _this._parent.events.fire(types_1.DataEvents.loadError, [error]);
        }));
    };
    Loader.prototype.parse = function (data, driver) {
        var _this = this;
        if (driver === void 0) { driver = "json"; }
        if (driver === "json" && !helpers_1.hasJsonOrArrayStructure(data)) {
            this._parent.events.fire(types_1.DataEvents.loadError, ["Uncaught SyntaxError: Unexpected end of input"]);
        }
        driver = helpers_1.toDataDriver(driver);
        data = driver.toJsonArray(data);
        if (!(data instanceof Array)) {
            var totalCount = data.total_count - 1;
            var from_1 = data.from;
            data = data.data;
            if (this._parent.getLength() === 0) {
                var newData = [];
                for (var i = 0, j = 0; i <= totalCount; i++) {
                    if (i >= from_1 && i <= from_1 + data.length - 1) {
                        newData.push(data[j]);
                        j++;
                    }
                    else {
                        newData.push({ $empty: true });
                    }
                }
                data = newData;
            }
            else {
                data.forEach(function (newItem, i) {
                    var index = from_1 + i;
                    var oldId = _this._parent.getId(index);
                    if (oldId) {
                        var emptyItem = _this._parent.getItem(oldId);
                        if (emptyItem && emptyItem.$empty) {
                            _this._parent.changeId(oldId, newItem.id, true);
                            _this._parent.update(newItem.id, __assign(__assign({}, newItem), { $empty: undefined }), true);
                        }
                    }
                    else {
                        helpers_1.dhxWarning("item not found");
                    }
                });
                this._parent.events.fire(types_1.DataEvents.afterLazyLoad, [from_1, data.length]);
                this._parent.events.fire(types_1.DataEvents.change);
                return data;
            }
        }
        if (this._parent.getInitialData()) {
            this._parent.removeAll();
        }
        this._parent.$parse(data);
        return data;
    };
    Loader.prototype.save = function (url) {
        var _this = this;
        var _loop_1 = function (el) {
            if (el.saving || el.pending) {
                helpers_1.dhxWarning("item is saving");
            }
            else {
                var prevEl_1 = this_1._findPrevState(el.id);
                if (prevEl_1 && prevEl_1.saving) {
                    var pending = new Promise(function (res, rej) {
                        prevEl_1.promise
                            .then(function () {
                            el.pending = false;
                            res(_this._setPromise(el, url));
                        })
                            .catch(function (err) {
                            _this._removeFromOrder(prevEl_1);
                            _this._setPromise(el, url);
                            helpers_1.dhxWarning(err);
                            rej(err);
                        });
                    });
                    this_1._addToChain(pending);
                    el.pending = true;
                }
                else {
                    this_1._setPromise(el, url);
                }
            }
        };
        var this_1 = this;
        for (var _i = 0, _a = this._changes.order; _i < _a.length; _i++) {
            var el = _a[_i];
            _loop_1(el);
        }
        this._parent.saveData.then(function () {
            _this._saving = false;
        });
    };
    Loader.prototype._setPromise = function (el, url) {
        var _this = this;
        el.promise = url.save(el.obj, el.status);
        el.promise
            .then(function () {
            _this._removeFromOrder(el);
        })
            .catch(function (err) {
            el.saving = false;
            el.error = true;
            helpers_1.dhxError(err);
        });
        el.saving = true;
        this._saving = true;
        this._addToChain(el.promise);
        return el.promise;
    };
    Loader.prototype._addToChain = function (promise) {
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        if (this._parent.saveData && this._saving) {
            this._parent.saveData = this._parent.saveData.then(function () { return promise; });
        }
        else {
            this._parent.saveData = promise;
        }
    };
    Loader.prototype._findPrevState = function (id) {
        for (var _i = 0, _a = this._changes.order; _i < _a.length; _i++) {
            var el = _a[_i];
            if (el.id === id) {
                return el;
            }
        }
        return null;
    };
    Loader.prototype._removeFromOrder = function (el) {
        this._changes.order = this._changes.order.filter(function (item) { return !helpers_1.isEqualObj(item, el); });
    };
    return Loader;
}());
exports.Loader = Loader;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promiz */ "../node_modules/promiz/promiz.js")))

/***/ }),

/***/ "../ts-data/sources/datacollection/sort.ts":
/*!*************************************************!*\
  !*** ../ts-data/sources/datacollection/sort.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var helpers_1 = __webpack_require__(/*! ./../helpers */ "../ts-data/sources/helpers.ts");
var Sort = /** @class */ (function () {
    function Sort() {
    }
    Sort.prototype.sort = function (array, by) {
        var _this = this;
        if (by.rule && typeof by.rule === "function") {
            this._sort(array, by);
        }
        else if (by.by) {
            by.rule = function (a, b) {
                var aa = _this._checkVal(by.as, a[by.by]);
                var bb = _this._checkVal(by.as, b[by.by]);
                return helpers_1.naturalCompare(aa.toString(), bb.toString());
            };
            this._sort(array, by);
        }
    };
    Sort.prototype._checkVal = function (method, val) {
        return method ? method.call(this, val) : val;
    };
    Sort.prototype._sort = function (arr, conf) {
        var _this = this;
        var dir = {
            asc: 1,
            desc: -1,
        };
        return arr.sort(function (a, b) {
            return conf.rule.call(_this, a, b) * (dir[conf.dir] || dir.asc);
        });
    };
    return Sort;
}());
exports.Sort = Sort;


/***/ }),

/***/ "../ts-data/sources/dataproxy.ts":
/*!***************************************!*\
  !*** ../ts-data/sources/dataproxy.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ajax_1 = __webpack_require__(/*! ./ajax */ "../ts-data/sources/ajax.ts");
var DataProxy = /** @class */ (function () {
    function DataProxy(url, config) {
        this.url = this._url = url;
        this.config = config;
    }
    DataProxy.prototype.updateUrl = function (url, params) {
        if (params === void 0) { params = {}; }
        this._url = this.url = url || this._url;
        this.url += "?";
        for (var param in params) {
            this.config[param] = params[param];
            this.url += param + "=" + encodeURIComponent(params[param]) + "&";
        }
        this.url = this.url.slice(0, -1);
    };
    DataProxy.prototype.load = function () {
        return ajax_1.ajax.get(this.url, null, { responseType: "text" });
    };
    DataProxy.prototype.save = function (data, mode) {
        switch (mode) {
            case "delete":
                return ajax_1.ajax.delete(this.url, data);
            case "update":
            case "insert":
            default:
                return ajax_1.ajax.post(this.url, data);
        }
    };
    return DataProxy;
}());
exports.DataProxy = DataProxy;


/***/ }),

/***/ "../ts-data/sources/drivers/CsvDriver.ts":
/*!***********************************************!*\
  !*** ../ts-data/sources/drivers/CsvDriver.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var CsvDriver = /** @class */ (function () {
    function CsvDriver(config) {
        var initConfig = {
            skipHeader: 0,
            nameByHeader: false,
            rowDelimiter: "\n",
            columnDelimiter: ",",
        };
        this.config = __assign(__assign({}, initConfig), config);
        if (this.config.nameByHeader) {
            this.config.skipHeader = 1;
        }
    }
    CsvDriver.prototype.getFields = function (row, headers) {
        var parts = row.trim().split(this.config.columnDelimiter);
        var obj = {};
        for (var i = 0; i < parts.length; i++) {
            obj[headers ? headers[i] : i + 1] = isNaN(Number(parts[i])) ? parts[i] : parseFloat(parts[i]);
        }
        return obj;
    };
    CsvDriver.prototype.getRows = function (data) {
        return data.trim().split(this.config.rowDelimiter);
    };
    CsvDriver.prototype.toJsonArray = function (data) {
        var _this = this;
        var rows = this.getRows(data);
        var names = this.config.names;
        if (this.config.skipHeader) {
            var top_1 = rows.splice(0, this.config.skipHeader);
            if (this.config.nameByHeader) {
                names = top_1[0].trim().split(this.config.columnDelimiter);
            }
        }
        return rows.map(function (row) { return _this.getFields(row, names); });
    };
    CsvDriver.prototype.serialize = function (data, withoutHeader) {
        var header = data[0]
            ? Object.keys(data[0])
                .filter(function (key) { return !key.startsWith("$"); })
                .join(this.config.columnDelimiter)
            : "";
        var readyData = this._serialize(data);
        if (withoutHeader) {
            return readyData;
        }
        return header + readyData;
    };
    CsvDriver.prototype._serialize = function (data) {
        var _this = this;
        return data.reduce(function (csv, row) {
            var cells = Object.keys(row).reduce(function (total, key, i) {
                if (key.startsWith("$") || key === "items") {
                    return total;
                }
                return "" + total + row[key] + (i === row.length - 1 ? "" : _this.config.columnDelimiter);
            }, "");
            if (row.items) {
                return "" + csv + (csv ? "\n" : "") + cells + _this._serialize(row.items);
            }
            return "" + csv + (csv ? _this.config.rowDelimiter : "") + cells;
        }, "");
    };
    return CsvDriver;
}());
exports.CsvDriver = CsvDriver;


/***/ }),

/***/ "../ts-data/sources/drivers/JsonDriver.ts":
/*!************************************************!*\
  !*** ../ts-data/sources/drivers/JsonDriver.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var JsonDriver = /** @class */ (function () {
    function JsonDriver() {
    }
    JsonDriver.prototype.toJsonArray = function (data) {
        return this.getRows(data);
    };
    JsonDriver.prototype.serialize = function (data) {
        return data;
    };
    JsonDriver.prototype.getFields = function (row) {
        return row;
    };
    JsonDriver.prototype.getRows = function (data) {
        return typeof data === "string" ? JSON.parse(data) : data;
    };
    return JsonDriver;
}());
exports.JsonDriver = JsonDriver;


/***/ }),

/***/ "../ts-data/sources/drivers/XMLDriver.ts":
/*!***********************************************!*\
  !*** ../ts-data/sources/drivers/XMLDriver.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xml_1 = __webpack_require__(/*! ./../serializers/xml */ "../ts-data/sources/serializers/xml.ts");
var ARRAY_NAME = "items";
var ITEM_NAME = "item";
// convert xml tag to js object, all subtags and attributes are mapped to the properties of result object
function tagToObject(tag, initialObj) {
    initialObj = initialObj || {};
    // map attributes
    var a = tag.attributes;
    if (a && a.length) {
        for (var i = 0; i < a.length; i++) {
            initialObj[a[i].name] = a[i].value;
        }
    }
    // map subtags
    var b = tag.childNodes;
    for (var i = 0; i < b.length; i++) {
        if (b[i].nodeType === 1) {
            var name_1 = b[i].tagName;
            if (initialObj[name_1]) {
                if (typeof initialObj[name_1].push !== "function") {
                    initialObj[name_1] = [initialObj[name_1]];
                }
                initialObj[name_1].push(tagToObject(b[i], {}));
            }
            else {
                initialObj[name_1] = tagToObject(b[i], {}); // sub-object for complex subtags
            }
        }
    }
    return initialObj;
}
var XMLDriver = /** @class */ (function () {
    function XMLDriver() {
    }
    XMLDriver.prototype.toJsonArray = function (data) {
        return this.getRows(data);
    };
    XMLDriver.prototype.toJsonObject = function (data) {
        var doc;
        if (typeof data === "string") {
            doc = this._fromString(data);
        }
        return tagToObject(doc);
    };
    XMLDriver.prototype.serialize = function (data) {
        return xml_1.jsonToXML(data);
    };
    XMLDriver.prototype.getFields = function (row) {
        return row;
    };
    XMLDriver.prototype.getRows = function (data) {
        if (typeof data === "string") {
            data = this._fromString(data);
        }
        if (data) {
            var childNodes = data.childNodes && data.childNodes[0] && data.childNodes[0].childNodes;
            if (!childNodes || !childNodes.length) {
                return null;
            }
            return this._getRows(childNodes);
        }
        return [];
    };
    XMLDriver.prototype._getRows = function (nodes) {
        var result = [];
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i].tagName === ITEM_NAME) {
                result.push(this._nodeToJS(nodes[i]));
            }
        }
        return result;
    };
    XMLDriver.prototype._fromString = function (data) {
        try {
            return new DOMParser().parseFromString(data, "text/xml");
        }
        catch (_a) {
            return null;
        }
    };
    XMLDriver.prototype._nodeToJS = function (node) {
        var result = {};
        if (this._haveAttrs(node)) {
            var attrs = node.attributes;
            for (var i = 0; i < attrs.length; i++) {
                var _a = attrs[i], name_2 = _a.name, value = _a.value;
                result[name_2] = this._toType(value);
            }
        }
        if (node.nodeType === 3) {
            result.value = result.value || this._toType(node.textContent);
            return result;
        }
        var childNodes = node.childNodes;
        if (childNodes) {
            for (var i = 0; i < childNodes.length; i++) {
                var subNode = childNodes[i];
                var tag = subNode.tagName;
                if (!tag) {
                    continue;
                }
                if (tag === ARRAY_NAME && subNode.childNodes) {
                    result[tag] = this._getRows(subNode.childNodes);
                }
                else {
                    if (this._haveAttrs(subNode)) {
                        result[tag] = this._nodeToJS(subNode);
                    }
                    else {
                        result[tag] = this._toType(subNode.textContent);
                    }
                }
            }
        }
        return result;
    };
    XMLDriver.prototype._toType = function (val) {
        if (val === "false" || val === "true") {
            return val === "true";
        }
        if (!isNaN(val)) {
            return Number(val);
        }
        return val;
    };
    XMLDriver.prototype._haveAttrs = function (node) {
        return node.attributes && node.attributes.length;
    };
    return XMLDriver;
}());
exports.XMLDriver = XMLDriver;


/***/ }),

/***/ "../ts-data/sources/drivers/drivers.ts":
/*!*********************************************!*\
  !*** ../ts-data/sources/drivers/drivers.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var JsonDriver_1 = __webpack_require__(/*! ./JsonDriver */ "../ts-data/sources/drivers/JsonDriver.ts");
var CsvDriver_1 = __webpack_require__(/*! ./CsvDriver */ "../ts-data/sources/drivers/CsvDriver.ts");
var XMLDriver_1 = __webpack_require__(/*! ./XMLDriver */ "../ts-data/sources/drivers/XMLDriver.ts");
exports.dataDrivers = {
    json: JsonDriver_1.JsonDriver,
    csv: CsvDriver_1.CsvDriver,
};
exports.dataDriversPro = __assign(__assign({}, exports.dataDrivers), { xml: XMLDriver_1.XMLDriver });


/***/ }),

/***/ "../ts-data/sources/helpers.ts":
/*!*************************************!*\
  !*** ../ts-data/sources/helpers.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dataproxy_1 = __webpack_require__(/*! ./dataproxy */ "../ts-data/sources/dataproxy.ts");
var drivers_1 = __webpack_require__(/*! ./drivers/drivers */ "../ts-data/sources/drivers/drivers.ts");
function isEqualObj(a, b) {
    for (var key in a) {
        if (a[key] !== b[key]) {
            return false;
        }
    }
    return true;
}
exports.isEqualObj = isEqualObj;
function naturalCompare(a, b) {
    if (isNaN(a) || isNaN(b)) {
        var ax_1 = [];
        var bx_1 = [];
        a.replace(/(\d+)|(\D+)/g, function (_, $1, $2) {
            ax_1.push([$1 || Infinity, $2 || ""]);
        });
        b.replace(/(\d+)|(\D+)/g, function (_, $1, $2) {
            bx_1.push([$1 || Infinity, $2 || ""]);
        });
        while (ax_1.length && bx_1.length) {
            var an = ax_1.shift();
            var bn = bx_1.shift();
            var nn = an[0] - bn[0] || an[1].localeCompare(bn[1]);
            if (nn) {
                return nn;
            }
        }
        return ax_1.length - bx_1.length;
    }
    return a - b;
}
exports.naturalCompare = naturalCompare;
function findByConf(item, conf) {
    if (typeof conf === "function") {
        if (conf.call(this, item)) {
            return item;
        }
    }
    else if (conf.by && conf.match) {
        if (item[conf.by] === conf.match) {
            return item;
        }
    }
}
exports.findByConf = findByConf;
function isDebug() {
    var dhx = window.dhx;
    if (typeof dhx !== "undefined") {
        return typeof dhx.debug !== "undefined" && dhx.debug;
    }
    // return typeof DHX_DEBUG_MODE !== "undefined" && DHX_DEBUG_MODE;
}
exports.isDebug = isDebug;
function dhxWarning(msg) {
    // tslint:disable-next-line:no-console
    console.warn(msg);
}
exports.dhxWarning = dhxWarning;
function dhxError(msg) {
    throw new Error(msg);
}
exports.dhxError = dhxError;
function toProxy(proxy) {
    var type = typeof proxy;
    if (type === "string") {
        return new dataproxy_1.DataProxy(proxy);
    }
    else if (type === "object") {
        return proxy;
    }
}
exports.toProxy = toProxy;
function toDataDriver(driver) {
    if (typeof driver === "string") {
        var dhx = window.dhx;
        var drivers = (dhx && dhx.dataDrivers) || drivers_1.dataDrivers;
        if (drivers[driver]) {
            return new drivers[driver]();
        }
        else {
            // tslint:disable-next-line:no-console
            console.warn("Incorrect data driver type:", driver);
            // tslint:disable-next-line:no-console
            console.warn("Available types:", JSON.stringify(Object.keys(drivers)));
        }
    }
    else if (typeof driver === "object") {
        return driver;
    }
}
exports.toDataDriver = toDataDriver;
function copyWithoutInner(obj, forbidden) {
    var result = {};
    for (var key in obj) {
        if (!key.startsWith("$") && (!forbidden || !forbidden[key])) {
            result[key] = obj[key];
        }
    }
    return result;
}
exports.copyWithoutInner = copyWithoutInner;
function isTreeCollection(obj) {
    // eslint-disable-next-line @typescript-eslint/unbound-method
    return Boolean(obj.getRoot);
}
exports.isTreeCollection = isTreeCollection;
function hasJsonOrArrayStructure(str) {
    if (typeof str === "object") {
        return true;
    }
    if (typeof str !== "string") {
        return false;
    }
    try {
        var result = JSON.parse(str);
        return Object.prototype.toString.call(result) === "[object Object]" || Array.isArray(result);
    }
    catch (err) {
        return false;
    }
}
exports.hasJsonOrArrayStructure = hasJsonOrArrayStructure;


/***/ }),

/***/ "../ts-data/sources/lazydataproxy.ts":
/*!*******************************************!*\
  !*** ../ts-data/sources/lazydataproxy.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dataproxy_1 = __webpack_require__(/*! ./dataproxy */ "../ts-data/sources/dataproxy.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var ajax_1 = __webpack_require__(/*! ./ajax */ "../ts-data/sources/ajax.ts");
var LazyDataProxy = /** @class */ (function (_super) {
    __extends(LazyDataProxy, _super);
    function LazyDataProxy(url, config) {
        var _this = _super.call(this, url) || this;
        _this.config = core_1.extend({
            from: 0,
            limit: 50,
            delay: 50,
            prepare: 0,
        }, config);
        _this.updateUrl(url, { from: _this.config.from, limit: _this.config.limit });
        return _this;
    }
    LazyDataProxy.prototype.load = function () {
        var _this = this;
        return new Promise(function (resolve) {
            if (!_this._timeout) {
                ajax_1.ajax.get(_this.url, { responseType: "text" }).then(resolve);
                _this._cooling = true;
                _this._timeout = setTimeout(function () {
                    return;
                });
            }
            else {
                clearTimeout(_this._timeout);
                _this._timeout = setTimeout(function () {
                    ajax_1.ajax.get(_this.url, { responseType: "text" }).then(resolve);
                    _this._cooling = true;
                }, _this.config.delay);
                if (_this._cooling) {
                    resolve(null);
                    _this._cooling = false;
                }
            }
        });
    };
    return LazyDataProxy;
}(dataproxy_1.DataProxy));
exports.LazyDataProxy = LazyDataProxy;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promiz */ "../node_modules/promiz/promiz.js")))

/***/ }),

/***/ "../ts-data/sources/selection.ts":
/*!***************************************!*\
  !*** ../ts-data/sources/selection.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var types_1 = __webpack_require__(/*! @dhx/ts-common/types */ "../ts-common/types.ts");
var types_2 = __webpack_require__(/*! ./types */ "../ts-data/sources/types.ts");
var Selection = /** @class */ (function () {
    function Selection(_config, data, events) {
        var _this = this;
        this._disable = false;
        this.events = events || new events_1.EventSystem(this);
        this._data = data;
        this._disable = _config.disable;
        this._data.events.on(types_2.DataEvents.removeAll, function () {
            _this._selected = null;
        });
        this._data.events.on(types_2.DataEvents.change, function () {
            if (_this._selected) {
                var near = _this._data.getNearId(_this._selected);
                if (near !== _this._selected) {
                    _this._selected = null;
                    if (near) {
                        _this.add(near);
                    }
                }
            }
        });
    }
    Selection.prototype.getId = function () {
        return this._selected;
    };
    Selection.prototype.getItem = function () {
        if (this._selected) {
            return this._data.getItem(this._selected);
        }
        return null;
    };
    Selection.prototype.remove = function (id) {
        if (this._disable)
            return;
        id = id || this._selected;
        if (!id) {
            return true;
        }
        if (this.events.fire(types_1.SelectionEvents.beforeUnSelect, [id])) {
            this._data.update(id, { $selected: false }, true);
            this._selected = null;
            this.events.fire(types_1.SelectionEvents.afterUnSelect, [id]);
            return true;
        }
        return false;
    };
    Selection.prototype.add = function (id) {
        if (this._selected === id || this._disable || !this._data.exists(id)) {
            return;
        }
        this.remove();
        if (this.events.fire(types_1.SelectionEvents.beforeSelect, [id])) {
            this._selected = id;
            this._data.update(id, { $selected: true }, true);
            this.events.fire(types_1.SelectionEvents.afterSelect, [id]);
        }
    };
    Selection.prototype.enable = function () {
        if (!this.events.fire(types_1.SelectionEvents.beforeEnable, []))
            return;
        this._disable = false;
        this.events.fire(types_1.SelectionEvents.afterEnable, []);
    };
    Selection.prototype.disable = function () {
        if (!this.events.fire(types_1.SelectionEvents.beforeDisable, []))
            return;
        this.remove();
        this._disable = true;
        this.events.fire(types_1.SelectionEvents.afterDisable, []);
    };
    Selection.prototype.isDisabled = function () {
        return this._disable;
    };
    return Selection;
}());
exports.Selection = Selection;


/***/ }),

/***/ "../ts-data/sources/serializers/xml.ts":
/*!*********************************************!*\
  !*** ../ts-data/sources/serializers/xml.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var INDENT_STEP = 4;
function ws(count) {
    return " ".repeat(count);
}
function itemToXML(item, indent) {
    if (indent === void 0) { indent = INDENT_STEP; }
    var result = ws(indent) + "<item>\n";
    for (var key in item) {
        if (Array.isArray(item[key])) {
            result += ws(indent + INDENT_STEP) + ("<" + key + ">\n");
            result +=
                item[key].map(function (subItem) { return itemToXML(subItem, indent + INDENT_STEP * 2); }).join("\n") +
                    "\n";
            result += ws(indent + INDENT_STEP) + ("</" + key + ">\n");
        }
        else {
            result += ws(indent + INDENT_STEP) + ("<" + key + ">" + item[key] + "</" + key + ">\n");
        }
    }
    result += ws(indent) + "</item>";
    return result;
}
function jsonToXML(data, root) {
    if (root === void 0) { root = "root"; }
    var result = "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<" + root + ">";
    for (var i = 0; i < data.length; i++) {
        result += "\n" + itemToXML(data[i]);
    }
    return result + ("\n</" + root + ">");
}
exports.jsonToXML = jsonToXML;


/***/ }),

/***/ "../ts-data/sources/treecollection.ts":
/*!********************************************!*\
  !*** ../ts-data/sources/treecollection.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var datacollection_1 = __webpack_require__(/*! ./datacollection */ "../ts-data/sources/datacollection.ts");
var dataproxy_1 = __webpack_require__(/*! ./dataproxy */ "../ts-data/sources/dataproxy.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-data/sources/helpers.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-data/sources/types.ts");
function addToOrder(store, obj, parent, index) {
    if (index !== undefined && index !== -1 && store[parent] && store[parent][index]) {
        store[parent].splice(index, 0, obj);
    }
    else {
        if (!store[parent]) {
            store[parent] = [];
        }
        store[parent].push(obj);
    }
}
var TreeCollection = /** @class */ (function (_super) {
    __extends(TreeCollection, _super);
    function TreeCollection(config, events) {
        var _a;
        var _this = _super.call(this, config, events) || this;
        var root = (_this._root = "_ROOT_" + core_1.uid());
        _this._childs = (_a = {}, _a[root] = [], _a);
        _this._initChilds = null;
        return _this;
    }
    TreeCollection.prototype.add = function (obj, index, parent) {
        var _this = this;
        if (index === void 0) { index = -1; }
        if (parent === void 0) { parent = this._root; }
        if (typeof obj !== "object") {
            obj = {
                value: obj,
            };
        }
        if (Array.isArray(obj)) {
            return obj.map(function (element, key) {
                return _this._add(element, index, parent, key);
            });
        }
        else {
            return this._add(obj, index, parent);
        }
    };
    TreeCollection.prototype.getRoot = function () {
        return this._root;
    };
    TreeCollection.prototype.getParent = function (id, asObj) {
        if (asObj === void 0) { asObj = false; }
        if (!this._pull[id]) {
            return null;
        }
        var parent = this._pull[id].parent;
        return asObj ? this._pull[parent] : parent;
    };
    TreeCollection.prototype.getItems = function (id) {
        if (this._childs && this._childs[id]) {
            return this._childs[id];
        }
        return [];
    };
    TreeCollection.prototype.getLength = function (id) {
        if (id === void 0) { id = this._root; }
        if (!this._childs[id]) {
            return null;
        }
        return this._childs[id].length;
    };
    TreeCollection.prototype.removeAll = function (id) {
        var _a;
        if (!id) {
            _super.prototype.removeAll.call(this);
            var root = this._root;
            this._initChilds = null;
            this._childs = (_a = {}, _a[root] = [], _a);
        }
        else if (this._childs[id]) {
            var childs = __spreadArrays(this._childs[id]);
            for (var _i = 0, childs_1 = childs; _i < childs_1.length; _i++) {
                var child = childs_1[_i];
                this.remove(child.id);
            }
        }
    };
    TreeCollection.prototype.getIndex = function (id) {
        var parent = this.getParent(id);
        if (!parent || !this._childs[parent]) {
            return -1;
        }
        return core_1.findIndex(this._childs[parent], function (item) { return item.id === id; });
    };
    TreeCollection.prototype.sort = function (by) {
        var _this = this;
        if (!by) {
            this._childs = {};
            // [dirty]
            this._parse_data(Object.keys(this._pull).map(function (key) { return _this._pull[key]; }));
            if (this._filters) {
                for (var key in this._filters) {
                    var filter = this._filters[key];
                    this.filter(filter.rule, filter.config);
                }
            }
        }
        else {
            for (var key in this._childs) {
                this._sort.sort(this._childs[key], by);
            }
            if (this._initChilds && Object.keys(this._initChilds).length) {
                for (var key in this._initChilds) {
                    this._sort.sort(this._initChilds[key], by);
                }
            }
        }
        this.events.fire(types_1.DataEvents.change);
    };
    TreeCollection.prototype.filter = function (rule, config) {
        var _this = this;
        if (config === void 0) { config = {}; }
        if (!rule) {
            this.restoreOrder();
            return;
        }
        if (!this._initChilds) {
            this._initChilds = this._childs;
        }
        config.type = config.type || types_1.TreeFilterType.all;
        // [todo] we can store multiple filter rules, like in datacollection
        this._filters = {};
        this._filters._ = {
            rule: rule,
            config: config,
        };
        var newChilds = {};
        this._recursiveFilter(rule, config, this._root, 0, newChilds);
        Object.keys(newChilds).forEach(function (key) {
            var parentId = _this.getParent(key);
            var current = _this.getItem(key);
            while (parentId) {
                if (!newChilds[parentId]) {
                    newChilds[parentId] = [];
                }
                if (current && !newChilds[parentId].find(function (x) { return x.id === current.id; })) {
                    newChilds[parentId].push(current);
                }
                current = _this.getItem(parentId);
                parentId = _this.getParent(parentId);
            }
        });
        this._childs = newChilds;
        this.events.fire(types_1.DataEvents.change);
    };
    TreeCollection.prototype.restoreOrder = function () {
        if (this._initChilds) {
            this._childs = this._initChilds;
            this._initChilds = null;
        }
        this.events.fire(types_1.DataEvents.change);
    };
    TreeCollection.prototype.copy = function (id, index, target, targetId) {
        var _this = this;
        if (target === void 0) { target = this; }
        if (targetId === void 0) { targetId = this._root; }
        if (id instanceof Array) {
            return id.map(function (elementId, key) {
                return _this._copy(elementId, index, target, targetId, key);
            });
        }
        else {
            return this._copy(id, index, target, targetId);
        }
    };
    TreeCollection.prototype.move = function (id, index, target, targetId) {
        var _this = this;
        if (target === void 0) { target = this; }
        if (targetId === void 0) { targetId = this._root; }
        if (id instanceof Array) {
            return id.map(function (elementId, key) {
                return _this._move(elementId, index, target, targetId, key);
            });
        }
        else {
            return this._move(id, index, target, targetId);
        }
    };
    TreeCollection.prototype.forEach = function (cb, parent, level) {
        if (parent === void 0) { parent = this._root; }
        if (level === void 0) { level = Infinity; }
        if (!this.haveItems(parent) || level < 1) {
            return;
        }
        var array = this._childs[parent];
        for (var i = 0; i < array.length; i++) {
            cb.call(this, array[i], i, array);
            if (this.haveItems(array[i].id)) {
                this.forEach(cb, array[i].id, --level);
            }
        }
    };
    TreeCollection.prototype.eachChild = function (id, cb, direct, checkItem) {
        if (direct === void 0) { direct = true; }
        if (checkItem === void 0) { checkItem = function () { return true; }; }
        if (!this.haveItems(id)) {
            return;
        }
        for (var i = 0; i < this._childs[id].length; i++) {
            cb.call(this, this._childs[id][i], i);
            if (direct && checkItem(this._childs[id][i])) {
                this.eachChild(this._childs[id][i].id, cb, direct, checkItem);
            }
        }
    };
    TreeCollection.prototype.getNearId = function (id) {
        return id; // for selection
    };
    TreeCollection.prototype.loadItems = function (id, driver) {
        var _this = this;
        if (driver === void 0) { driver = "json"; }
        var url = this.config.autoload + "?id=" + id;
        var proxy = new dataproxy_1.DataProxy(url);
        proxy.load().then(function (data) {
            driver = helpers_1.toDataDriver(driver);
            data = driver.toJsonArray(data);
            _this._parse_data(data, id);
            _this.events.fire(types_1.DataEvents.change);
        });
    };
    TreeCollection.prototype.refreshItems = function (id, driver) {
        if (driver === void 0) { driver = "json"; }
        this.removeAll(id);
        this.loadItems(id, driver);
    };
    TreeCollection.prototype.eachParent = function (id, cb, self) {
        if (self === void 0) { self = false; }
        var item = this.getItem(id);
        if (!item) {
            return;
        }
        if (self) {
            cb.call(this, item);
        }
        if (item.parent === this._root) {
            return;
        }
        var parent = this.getItem(item.parent);
        cb.call(this, parent);
        this.eachParent(item.parent, cb);
    };
    TreeCollection.prototype.haveItems = function (id) {
        return id in this._childs;
    };
    TreeCollection.prototype.canCopy = function (id, target) {
        if (id === target) {
            return false;
        }
        var canCopy = true;
        this.eachParent(target, function (item) { return (item.id === id ? (canCopy = false) : null); }); // locate return string
        return canCopy;
    };
    TreeCollection.prototype.serialize = function (driver, checkItem) {
        if (driver === void 0) { driver = types_1.DataDriver.json; }
        var data = this._serialize(this._root, checkItem);
        var dataDriver = helpers_1.toDataDriver(driver);
        if (dataDriver) {
            return dataDriver.serialize(data);
        }
    };
    TreeCollection.prototype.getId = function (index, parent) {
        if (parent === void 0) { parent = this._root; }
        if (!this._childs[parent] || !this._childs[parent][index]) {
            return;
        }
        return this._childs[parent][index].id;
    };
    // Non public API from suite_6.4
    TreeCollection.prototype.map = function (cb, parent, direct) {
        if (parent === void 0) { parent = this._root; }
        if (direct === void 0) { direct = true; }
        var result = [];
        if (!this.haveItems(parent)) {
            return result;
        }
        for (var i = 0; i < this._childs[parent].length; i++) {
            result.push(cb.call(this, this._childs[parent][i], i, this._childs));
            if (direct) {
                var childResult = this.map(cb, this._childs[parent][i].id, direct);
                result = result.concat(childResult);
            }
        }
        return result;
    };
    TreeCollection.prototype._add = function (obj, index, parent, key) {
        if (index === void 0) { index = -1; }
        if (parent === void 0) { parent = this._root; }
        obj.parent = obj.parent ? obj.parent.toString() : parent;
        if (key > 0 && index !== -1) {
            index = index + 1;
        }
        var id = _super.prototype._add.call(this, obj, index);
        if (Array.isArray(obj.items)) {
            for (var _i = 0, _a = obj.items; _i < _a.length; _i++) {
                var item = _a[_i];
                this.add(item, -1, obj.id);
            }
        }
        return id;
    };
    TreeCollection.prototype._copy = function (id, index, target, targetId, key) {
        if (target === void 0) { target = this; }
        if (targetId === void 0) { targetId = this._root; }
        if (!this.exists(id)) {
            return null;
        }
        var currentChilds = this._childs[id];
        if (key) {
            index = index === -1 ? -1 : index + key;
        }
        if (target === this && !this.canCopy(id, targetId)) {
            return null;
        }
        var itemCopy = helpers_1.copyWithoutInner(this.getItem(id), { items: true });
        if (target.exists(id)) {
            itemCopy.id = core_1.uid();
        }
        if (!helpers_1.isTreeCollection(target)) {
            target.add(itemCopy, index);
            return;
        }
        if (this.exists(id)) {
            itemCopy.parent = targetId;
            if (target !== this && targetId === this._root) {
                itemCopy.parent = target.getRoot();
            }
            target.add(itemCopy, index);
            id = itemCopy.id;
        }
        if (currentChilds) {
            for (var _i = 0, currentChilds_1 = currentChilds; _i < currentChilds_1.length; _i++) {
                var child = currentChilds_1[_i];
                var childId = child.id;
                var childIndex = this.getIndex(childId);
                if (typeof id === "string") {
                    this.copy(childId, childIndex, target, id);
                }
            }
        }
        return id;
    };
    TreeCollection.prototype._move = function (id, index, target, targetId, key) {
        if (target === void 0) { target = this; }
        if (targetId === void 0) { targetId = this._root; }
        if (!this.exists(id)) {
            return null;
        }
        if (key) {
            index = index === -1 ? -1 : index + key;
        }
        if (target !== this) {
            if (!helpers_1.isTreeCollection(target)) {
                // move to datacollection
                target.add(helpers_1.copyWithoutInner(this.getItem(id)), index);
                this.remove(id);
                return;
            }
            var returnId = this.copy(id, index, target, targetId);
            this.remove(id);
            return returnId;
        }
        // move inside
        if (!this.canCopy(id, targetId)) {
            return null;
        }
        var parent = this.getParent(id);
        var parentIndex = this.getIndex(id);
        // get item from parent array and move to target array
        var spliced = this._childs[parent].splice(parentIndex, 1)[0];
        spliced.parent = targetId; // need for next moving, ... not best solution, may be full method for get item
        if (!this._childs[parent].length) {
            delete this._childs[parent];
        }
        if (!this.haveItems(targetId)) {
            this._childs[targetId] = [];
        }
        if (index === -1) {
            index = this._childs[targetId].push(spliced);
        }
        else {
            this._childs[targetId].splice(index, 0, spliced);
        }
        this.events.fire(types_1.DataEvents.change, [id, "update", this.getItem(id)]);
        return id;
    };
    TreeCollection.prototype._removeAll = function (id) {
        var _a;
        if (id) {
            var childs = __spreadArrays(this._childs[id]);
            for (var _i = 0, childs_2 = childs; _i < childs_2.length; _i++) {
                var child = childs_2[_i];
                this.remove(child.id);
            }
        }
        else {
            _super.prototype._removeAll.call(this);
            var root = this._root;
            this._initChilds = null;
            this._childs = (_a = {}, _a[root] = [], _a);
        }
    };
    TreeCollection.prototype._removeCore = function (id) {
        if (this._pull[id]) {
            var parent_1 = this.getParent(id);
            this._childs[parent_1] = this._childs[parent_1].filter(function (item) { return item.id !== id; });
            if (parent_1 !== this._root && !this._childs[parent_1].length) {
                delete this._childs[parent_1];
            }
            if (this._initChilds && this._initChilds[parent_1]) {
                this._initChilds[parent_1] = this._initChilds[parent_1].filter(function (item) { return item.id !== id; });
                if (parent_1 !== this._root && !this._initChilds[parent_1].length) {
                    delete this._initChilds[parent_1];
                }
            }
            this._fastDeleteChilds(this._childs, id);
            if (this._initChilds) {
                this._fastDeleteChilds(this._initChilds, id);
            }
        }
    };
    TreeCollection.prototype._addToOrder = function (_order, obj, index) {
        var childs = this._childs;
        var initChilds = this._initChilds;
        var parent = obj.parent;
        this._pull[obj.id] = obj;
        addToOrder(childs, obj, parent, index);
        if (initChilds) {
            addToOrder(initChilds, obj, parent, index);
        }
    };
    TreeCollection.prototype._parse_data = function (data, parent) {
        if (parent === void 0) { parent = this._root; }
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var obj = data_1[_i];
            if (this.config.init) {
                obj = this.config.init(obj);
            }
            if (typeof obj !== "object") {
                obj = {
                    value: obj,
                };
            }
            obj.id = obj.id ? obj.id.toString() : core_1.uid();
            obj.parent = obj.parent ? obj.parent.toString() : parent;
            this._pull[obj.id] = obj;
            if (!this._childs[obj.parent]) {
                this._childs[obj.parent] = [];
            }
            this._childs[obj.parent].push(obj);
            if (obj.items && obj.items instanceof Object) {
                this._parse_data(obj.items, obj.id);
            }
        }
    };
    TreeCollection.prototype._fastDeleteChilds = function (target, id) {
        if (this._pull[id]) {
            delete this._pull[id];
        }
        if (!target[id]) {
            return;
        }
        for (var i = 0; i < target[id].length; i++) {
            this._fastDeleteChilds(target, target[id][i].id);
        }
        delete target[id];
    };
    TreeCollection.prototype._recursiveFilter = function (rule, config, current, level, newChilds) {
        var _this = this;
        var childs = this._childs[current];
        if (!childs) {
            return;
        }
        var condition = function (item) {
            switch (config.type) {
                case types_1.TreeFilterType.all: {
                    return true;
                }
                case types_1.TreeFilterType.level: {
                    return level === config.level;
                }
                case types_1.TreeFilterType.leafs: {
                    return !_this.haveItems(item.id);
                }
            }
        };
        if (typeof rule === "function") {
            var customRule = function (item) { return condition(item) && rule(item); };
            var filtered = childs.filter(customRule);
            if (filtered.length) {
                newChilds[current] = filtered;
            }
        }
        else if (rule.by && rule.match) {
            var customRule = function (item) {
                return condition(item) &&
                    item[rule.by] &&
                    item[rule.by]
                        .toString()
                        .toLowerCase()
                        .indexOf(rule.match.toString().toLowerCase()) !== -1;
            };
            var filtered = childs.filter(customRule);
            if (filtered.length) {
                newChilds[current] = filtered;
            }
        }
        for (var _i = 0, childs_3 = childs; _i < childs_3.length; _i++) {
            var child = childs_3[_i];
            this._recursiveFilter(rule, config, child.id, level + 1, newChilds);
        }
    };
    TreeCollection.prototype._serialize = function (parent, fn) {
        var _this = this;
        if (parent === void 0) { parent = this._root; }
        return this.map(function (item) {
            var itemCopy = {};
            for (var key in item) {
                if (key === "parent" || key === "items") {
                    continue;
                }
                itemCopy[key] = item[key];
            }
            if (fn) {
                itemCopy = fn(itemCopy);
            }
            if (_this.haveItems(item.id)) {
                itemCopy.items = _this._serialize(item.id, fn);
            }
            return itemCopy;
        }, parent, false);
    };
    return TreeCollection;
}(datacollection_1.DataCollection));
exports.TreeCollection = TreeCollection;


/***/ }),

/***/ "../ts-data/sources/types.ts":
/*!***********************************!*\
  !*** ../ts-data/sources/types.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TreeFilterType;
(function (TreeFilterType) {
    TreeFilterType["all"] = "all";
    TreeFilterType["level"] = "level";
    TreeFilterType["leafs"] = "leafs";
})(TreeFilterType = exports.TreeFilterType || (exports.TreeFilterType = {}));
var DataEvents;
(function (DataEvents) {
    DataEvents["afterAdd"] = "afteradd";
    DataEvents["beforeAdd"] = "beforeadd";
    DataEvents["removeAll"] = "removeall";
    DataEvents["beforeRemove"] = "beforeremove";
    DataEvents["afterRemove"] = "afterremove";
    DataEvents["change"] = "change";
    DataEvents["load"] = "load";
    DataEvents["loadError"] = "loaderror";
    DataEvents["beforeLazyLoad"] = "beforelazyload";
    DataEvents["afterLazyLoad"] = "afterlazyload";
})(DataEvents = exports.DataEvents || (exports.DataEvents = {}));
var DragEvents;
(function (DragEvents) {
    DragEvents["beforeDrag"] = "beforeDrag";
    DragEvents["dragStart"] = "dragStart";
    DragEvents["dragOut"] = "dragOut";
    DragEvents["dragIn"] = "dragIn";
    DragEvents["canDrop"] = "canDrop";
    DragEvents["cancelDrop"] = "cancelDrop";
    DragEvents["beforeDrop"] = "beforeDrop";
    DragEvents["afterDrop"] = "afterDrop";
    DragEvents["afterDrag"] = "afterDrag";
})(DragEvents = exports.DragEvents || (exports.DragEvents = {}));
var DataDriver;
(function (DataDriver) {
    DataDriver["json"] = "json";
    DataDriver["csv"] = "csv";
    DataDriver["xml"] = "xml";
})(DataDriver = exports.DataDriver || (exports.DataDriver = {}));


/***/ }),

/***/ "../ts-dataview/index.ts":
/*!*******************************!*\
  !*** ../ts-dataview/index.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/DataView */ "../ts-dataview/sources/DataView.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-dataview/sources/types.ts"));


/***/ }),

/***/ "../ts-dataview/sources/DataView.ts":
/*!******************************************!*\
  !*** ../ts-dataview/sources/DataView.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var Keymanager_1 = __webpack_require__(/*! @dhx/ts-common/Keymanager */ "../ts-common/Keymanager.ts");
var ts_list_1 = __webpack_require__(/*! @dhx/ts-list */ "../ts-list/index.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-dataview/sources/types.ts");
var editors_1 = __webpack_require__(/*! ./editors/editors */ "../ts-dataview/sources/editors/editors.ts");
var DataView = /** @class */ (function (_super) {
    __extends(DataView, _super);
    function DataView(node, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, node, core_1.extend({
            keyNavigation: true,
            itemsInRow: 1,
            selection: true,
            multiselectionMode: config.multiselectionMode ? config.multiselectionMode : "click",
            gap: "0px",
            editable: false,
        }, config)) || this;
        _this._events = {};
        _this._touch = {
            duration: 350,
            dblDuration: 300,
            timer: null,
            start: false,
            timeStamp: null,
        };
        if (_this.config.multiselectionMode === "ctrlClick") {
            _this.config.multiselection = "ctrlClick"; // TODO: remove suite_7.0
        }
        _this.config.editable = _this.config.editable || _this.config.editing; // TODO: remove suite_7.0
        if (Array.isArray(_this.config.data)) {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.DataCollection({}, _this.events);
            _this.data.parse(_this.config.data);
        }
        else if (_this.config.data && _this.config.data.events) {
            _this.data = _this.config.data;
            _this.events = _this.data.events;
            _this.events.context = _this;
        }
        else {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.DataCollection({}, _this.events);
        }
        _this.selection = new ts_list_1.Selection({
            multiselection: _this.config.multiselection,
            disable: !_this.config.selection,
        }, _this.data);
        _this._focusIndex = !_this.config.selection && _this.config.keyNavigation ? 0 : undefined;
        _this._getHotkeys();
        var updater = function (updateObj) { return function (_a) {
            var source = _a.source, target = _a.target, start = _a.start;
            if (source && source instanceof Array && source.length > 1) {
                source.map(function (selectedId) { return _this.data.exists(selectedId) && _this.data.update(selectedId, updateObj); });
                return;
            }
            if (_this.data.exists(target)) {
                _this.data.update(target, updateObj);
            }
            if (_this.data.exists(start)) {
                _this.data.update(start, updateObj);
            }
        }; };
        _this.events.on(ts_data_1.DataEvents.beforeRemove, function (obj) {
            var delIndex = _this.data.getIndex(obj.id);
            if (delIndex < _this._focusIndex) {
                _this._focusIndex--;
            }
        });
        _this.events.on(ts_data_1.DataEvents.afterRemove, function () {
            var id = _this.selection.getId();
            if (!id && !_this._focusIndex) {
                return;
            }
            if (!id && _this._focusIndex) {
                id = _this.data.getId(_this._focusIndex);
                _this.setFocus(id);
                return;
            }
            _this.setFocus(id[id.length - 1]);
        });
        _this.events.on(ts_data_1.DataEvents.change, function () {
            _this.paint();
        });
        _this.events.on(ts_data_1.DragEvents.canDrop, updater({ $drophere: true }));
        _this.events.on(ts_data_1.DragEvents.cancelDrop, updater({ $drophere: undefined }));
        _this.events.on(ts_data_1.DragEvents.dragStart, updater({ $dragtarget: true }));
        _this.events.on(ts_data_1.DragEvents.afterDrag, updater({ $dragtarget: undefined }));
        _this.events.on(types_1.DataViewEvents.afterEditEnd, function (value, id) {
            var item = _this.data.getItem(id);
            _this.data.update(id, __assign(__assign({}, item), { value: value }));
            _this._edited = null;
            _this._getHotkeys();
            _this.paint();
        });
        _this._handlers = {
            onmousedown: function (e) {
                _this._dragStart(e);
            },
            ontouchstart: function (e) {
                _this._touch.timer = setTimeout(function () {
                    _this._dragStart(e);
                }, _this._touch.duration);
                if (!_this._touch.timeStamp) {
                    _this._touch.timeStamp = +e.timeStamp.toFixed();
                }
                else {
                    var dblTap = _this._touch.dblDuration >= _this._touch.timeStamp - +e.timeStamp.toFixed();
                    if (dblTap) {
                        e.preventDefault();
                        _this._dblClick(e);
                    }
                    _this._touch.timeStamp = null;
                }
                setTimeout(function () {
                    _this._touch.timeStamp = null;
                }, _this._touch.dblDuration);
            },
            ontouchmove: function (e) {
                _this._touch.start && e.preventDefault();
                _this._clearTouchTimer();
            },
            ontouchend: function () {
                _this._touch.start = false;
                _this._clearTouchTimer();
            },
            ondragstart: function () { return (_this.config.dragMode && !_this._edited ? false : null); },
            oncontextmenu: function (e) {
                var id = !!html_1.locate(e) && _this.data.getItem(html_1.locate(e)).id;
                if (!id) {
                    return;
                }
                _this.events.fire(types_1.DataViewEvents.itemRightClick, [id, e]);
                _this.events.fire(types_1.DataViewEvents.contextmenu, [id, e]); // TODO: remove suite_7.0
            },
            ondblclick: function (e) {
                _this._dblClick(e);
            },
            onclick: function (e) {
                var id = !!html_1.locate(e) && _this.data.getItem(html_1.locate(e)).id;
                if (!id) {
                    return;
                }
                _this.setFocus(id);
                _this.selection.add(id, e.ctrlKey || e.metaKey, e.shiftKey);
                _this.events.fire(types_1.DataViewEvents.click, [id, e]);
            },
            onmouseover: function (e) {
                var id = !!html_1.locate(e) && _this.data.getItem(html_1.locate(e)).id;
                var element = html_1.locateNode(e, "dhx_id", "relatedTarget");
                if (!element && id) {
                    _this.events.fire(types_1.DataViewEvents.itemMouseOver, [id, e]);
                    return;
                }
                else if (!element) {
                    return;
                }
                var attr = element.getAttribute("dhx_id") ? element.getAttribute("dhx_id") : null;
                var prevId = attr ? attr : "";
                if (!id || id === prevId) {
                    return;
                }
                _this.events.fire(types_1.DataViewEvents.itemMouseOver, [id, e]);
            },
        };
        if (_this.config.dragMode) {
            ts_data_1.dragManager.setItem(_this._uid, _this);
        }
        if (_this.config.eventHandlers) {
            for (var key in _this.config.eventHandlers) {
                if (_this.config.eventHandlers.hasOwnProperty(key)) {
                    var events = _this.config.eventHandlers[key];
                    _this._events[key] = html_1.eventHandler(function (e) { return html_1.locate(e, "dhx_id"); }, __assign({}, events));
                }
            }
        }
        var view = dom_1.create({
            render: function () { return _this._draw(); },
            hooks: {
                didRedraw: function (vm) {
                    var rootEl = vm.node.el;
                    var hasScroll = rootEl.scrollHeight > rootEl.offsetHeight;
                    var classAttr = vm.node.attrs.class.replace(" dhx_dataview--has-scroll", "");
                    var newClassName = hasScroll ? classAttr + " dhx_dataview--has-scroll" : classAttr;
                    vm.node.patch({ class: newClassName });
                },
            },
        });
        _this.mount(node, view);
        return _this;
    }
    DataView.prototype.editItem = function (id) {
        this._edited = id;
        if (!this.data.getItem(this._edited) || !this.events.fire(types_1.DataViewEvents.beforeEditStart, [id])) {
            this._edited = null;
            return;
        }
        this._getHotkeys();
        this.paint();
        this.events.fire(types_1.DataViewEvents.afterEditStart, [id]);
    };
    DataView.prototype.getFocusItem = function () {
        return this.data.getItem(this.data.getId(this._focusIndex));
    };
    DataView.prototype.setItemInRow = function (amount) {
        this.config.itemsInRow = amount;
        this.paint();
    };
    DataView.prototype.setFocus = function (id) {
        var index = this.data.getIndex(id);
        this._setFocusIndex(index);
    };
    DataView.prototype.getFocus = function () {
        var item = this.data.getItem(this.data.getId(this._focusIndex));
        if (item) {
            return item.id;
        }
    };
    DataView.prototype.destructor = function () {
        this.events.clear();
        if (this._navigationDestructor) {
            this._navigationDestructor();
        }
        if (this._documentClickDestuctor) {
            this._documentClickDestuctor();
        }
        this.unmount();
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    DataView.prototype.getFocusIndex = function () {
        return this._focusIndex;
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    DataView.prototype.setFocusIndex = function (index) {
        this._setFocusIndex(index);
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    DataView.prototype.edit = function (id) {
        this.editItem(id);
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    DataView.prototype.disableSelection = function () {
        this.selection.disable();
        this.paint();
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    DataView.prototype.enableSelection = function () {
        this.selection.enable();
        this.paint();
    };
    DataView.prototype._dblClick = function (e) {
        var id = html_1.locate(e);
        if (!id) {
            return;
        }
        if (this.config.editable) {
            this.editItem(id);
        }
        this.events.fire(types_1.DataViewEvents.doubleClick, [id, e]);
    };
    DataView.prototype._clearTouchTimer = function () {
        if (this._touch.timer) {
            clearTimeout(this._touch.timer);
            this._touch.timer = null;
        }
    };
    DataView.prototype._dragStart = function (e) {
        var _this = this;
        this._touch.start = true;
        var itemsForGhost = [];
        var item = html_1.locateNode(e, "dhx_id");
        var itemId = item && item.getAttribute("dhx_id");
        var selectionIds = this.selection.getId();
        if (this.config.multiselection && selectionIds instanceof Array) {
            selectionIds.map(function (id) {
                if (id !== itemId && _this.getRootView().refs[id]) {
                    itemsForGhost.push(_this.getRootView().refs[id].el);
                }
            });
        }
        return this.config.dragMode && !this._edited
            ? ts_data_1.dragManager.onMouseDown(e, this.selection.getId() || itemId, itemsForGhost)
            : null;
    };
    DataView.prototype._setFocusIndex = function (index) {
        if (index < 0 || index > this.data.getLength() - 1) {
            return;
        }
        this._focusIndex = index;
        var node = this.getRootNode();
        if (!node || !node.parentNode) {
            return;
        }
        var itemRow = node.children[Math.floor(this._focusIndex / this.config.itemsInRow)];
        if (itemRow) {
            var item = itemRow.children[this._focusIndex % this.config.itemsInRow];
            var gap = parseInt(this.config.gap.toString().replace("px", ""), null);
            if (item.offsetTop >= node.clientHeight + node.scrollTop - item.clientHeight) {
                node.scrollTop = item.offsetTop - node.clientHeight + item.clientHeight + gap;
            }
            else if (item.offsetTop < node.scrollTop - gap) {
                node.scrollTop = item.offsetTop - gap;
            }
        }
        this.events.fire(types_1.DataViewEvents.focusChange, [this._focusIndex, this.data.getId(this._focusIndex)]);
        this.paint();
        return;
    };
    DataView.prototype._renderItem = function (item, focus, isLastItemInRow) {
        var _a = this.config, itemsInRow = _a.itemsInRow, gap = _a.gap, template = _a.template, itemHeight = _a.itemHeight;
        var html = template ? template(item) : item.htmlContent;
        var gapWithPx = function (gapSize) { return parseFloat(gapSize); };
        var id = item.id.toString();
        if (id === this._edited) {
            var editor = editors_1.getEditor(item, this);
            return editor.toHTML(isLastItemInRow);
        }
        return dom_1.el("div", __assign(__assign({}, this._events), { class: "dhx_dataview-item" +
                (item.$selected ? " dhx_dataview-item--selected" : "") +
                (focus ? " dhx_dataview-item--focus" : "") +
                (item.$drophere && !this._edited ? " dhx_dataview-item--drophere" : "") +
                (item.$dragtarget && !this._edited ? " dhx_dataview-item--dragtarget" : "") +
                (this.config.dragMode && !this._edited ? " dhx_dataview-item--drag" : "") +
                (gapWithPx(gap) ? " dhx_dataview-item--with-gap" : "") +
                ((item.css && item.$selected) || (item.css && focus)
                    ? ""
                    : item.css
                        ? " " + item.css
                        : "") +
                (isLastItemInRow ? " dhx_dataview-item--last-item-in-row" : ""), style: {
                width: "calc(" + 100 / itemsInRow + "% - " + gapWithPx(gap) + " * " + (itemsInRow - 1) /
                    itemsInRow + "px)",
                "margin-right": isLastItemInRow ? "" : gap,
                height: template ? null : itemHeight,
            }, _key: id, dhx_id: id, _ref: id }), html
            ? [
                dom_1.el(".dhx_dataview-item__inner-html", {
                    ".innerHTML": html,
                }),
            ]
            : item.value || item.text || item.value);
    };
    DataView.prototype._draw = function () {
        var _this = this;
        var _a = this.config, itemsInRow = _a.itemsInRow, css = _a.css, gap = _a.gap;
        var currentCounter = 0;
        var rows = this.data.reduce(function (items, obj, index) {
            if (currentCounter === 0) {
                items.push([]);
            }
            items[items.length - 1].push(_this._renderItem(obj, index === _this._focusIndex, currentCounter === itemsInRow - 1));
            currentCounter = (currentCounter + 1) % itemsInRow;
            return items;
        }, []);
        return dom_1.el("", __assign(__assign({}, this._handlers), { dhx_widget_id: this._uid, class: (css ? css : "") +
                " dhx_widget dhx_dataview" +
                (this.config.multiselection && this.selection.getItem() ? " dhx_no-select--pointer" : ""), style: {
                height: this.config.height,
            } }), rows.map(function (row) {
            return dom_1.el(".dhx_dataview-row", {
                style: { margin: gap },
            }, row);
        }));
    };
    DataView.prototype._getHotkeys = function () {
        var _this = this;
        if (this.config.keyNavigation) {
            if (this._edited) {
                if (this._navigationDestructor) {
                    this._navigationDestructor();
                }
            }
            else {
                var keyNavigation = this.config.keyNavigation;
                if (typeof this.config.keyNavigation !== "function") {
                    this._widgetInFocus = false;
                    keyNavigation = function () { return _this._widgetInFocus; };
                    this._documentClickDestuctor = core_1.detectWidgetClick(this._uid, function (isInnerClick) { return (_this._widgetInFocus = isInnerClick); });
                }
                var preventEvent = function (fn) { return function (e) {
                    e.preventDefault();
                    fn();
                }; };
                var handlers = {
                    arrowDown: preventEvent(function () {
                        return _this.setFocusIndex(_this._focusIndex + _this.config.itemsInRow);
                    }),
                    arrowUp: preventEvent(function () {
                        return _this.setFocusIndex(_this._focusIndex - _this.config.itemsInRow);
                    }),
                    arrowLeft: preventEvent(function () { return _this.setFocusIndex(_this._focusIndex - 1); }),
                    arrowRight: preventEvent(function () { return _this.setFocusIndex(_this._focusIndex + 1); }),
                    enter: function (e) {
                        var id = _this.data.getId(_this._focusIndex);
                        _this.selection.add(id);
                        _this.events.fire(types_1.DataViewEvents.click, [id, e]);
                    },
                    "enter+shift": function (e) {
                        var id = _this.data.getId(_this._focusIndex);
                        _this.selection.add(id, false, true);
                        _this.events.fire(types_1.DataViewEvents.click, [id, e]);
                    },
                    "enter+ctrl": function (e) {
                        var id = _this.data.getId(_this._focusIndex);
                        _this.selection.add(id, true, false);
                        _this.events.fire(types_1.DataViewEvents.click, [id, e]);
                    },
                    "ctrl+a": function (e) {
                        if (_this.config.multiselection) {
                            e.preventDefault();
                            _this.selection.remove();
                            var ids = _this.data.map(function (i) { return i.id; });
                            ids.forEach(function (id) {
                                if (_this.config.multiselection === "ctrlClick") {
                                    _this.selection.add(id, true);
                                }
                                else {
                                    _this.selection.add(id);
                                }
                            });
                        }
                    },
                };
                if (html_1.isIE()) {
                    handlers = __assign({ up: handlers.arrowUp, down: handlers.arrowDown, right: handlers.arrowRight, left: handlers.arrowLeft }, handlers);
                    delete handlers.arrowUp;
                    delete handlers.arrowDown;
                    delete handlers.arrowRight;
                    delete handlers.arrowLeft;
                }
                this._navigationDestructor = Keymanager_1.addHotkeys(handlers, keyNavigation);
            }
        }
    };
    return DataView;
}(view_1.View));
exports.DataView = DataView;


/***/ }),

/***/ "../ts-dataview/sources/editors/InputEditor.ts":
/*!*****************************************************!*\
  !*** ../ts-dataview/sources/editors/InputEditor.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-dataview/sources/types.ts");
var InputEditor = /** @class */ (function () {
    function InputEditor(item, dataView) {
        var _this = this;
        this._dataView = dataView;
        this._config = dataView.config;
        this._item = item;
        this._dataView.events.on(types_1.DataViewEvents.focusChange, function (index, id) {
            if (_this._mode && id !== _this._item.id) {
                _this.endEdit();
            }
        });
        this._initHandlers();
    }
    InputEditor.prototype.endEdit = function () {
        if (this._input) {
            var value = this._input.value;
            if (this._dataView.events.fire(types_1.DataViewEvents.beforeEditEnd, [value, this._item.id])) {
                this._input.removeEventListener("blur", this._handlers.onBlur);
                this._input.removeEventListener("change", this._handlers.onChange);
                this._handlers = {};
                this._mode = false;
                this._dataView.events.fire(types_1.DataViewEvents.afterEditEnd, [value, this._item.id]);
            }
            else {
                this._input.focus();
            }
        }
    };
    InputEditor.prototype.toHTML = function (isLastItemInRow) {
        this._mode = true;
        var _a = this._config, itemsInRow = _a.itemsInRow, gap = _a.gap;
        var gapWithPx = function (gapSize) { return parseFloat(gapSize); };
        return dom_1.el(".dhx_input__wrapper", {
            style: {
                width: "calc(" + 100 / itemsInRow + "% - " + gapWithPx(gap) + " * " + (itemsInRow - 1) /
                    itemsInRow + "px)",
                maxWidth: "calc(" + 100 / itemsInRow + "% - " + gapWithPx(gap) + " * " + (itemsInRow - 1) /
                    itemsInRow + "px)",
                marginRight: isLastItemInRow ? "" : gap,
            },
        }, [
            dom_1.el("div.dhx_input__container", {
                style: {
                    height: "100%",
                },
            }, [
                dom_1.el("input.dhx_input", {
                    class: (this._item.css ? " " + this._item.css : "") +
                        (isLastItemInRow ? " dhx_dataview-item--last-item-in-row" : ""),
                    style: {
                        padding: "8px, 12px",
                        width: "100%",
                        height: "100%",
                    },
                    _hooks: {
                        didInsert: this._handlers.didInsert,
                    },
                    _key: this._item.id,
                    dhx_id: this._item.id,
                }),
            ]),
        ]);
    };
    InputEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onBlur: function () {
                _this.endEdit();
            },
            onChange: function () {
                _this.endEdit();
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                input.focus();
                input.value = _this._item.value;
                input.setSelectionRange(0, input.value.length);
                input.addEventListener("change", _this._handlers.onChange);
                input.addEventListener("blur", _this._handlers.onBlur);
            },
        };
    };
    return InputEditor;
}());
exports.InputEditor = InputEditor;


/***/ }),

/***/ "../ts-dataview/sources/editors/editors.ts":
/*!*************************************************!*\
  !*** ../ts-dataview/sources/editors/editors.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var InputEditor_1 = __webpack_require__(/*! ./InputEditor */ "../ts-dataview/sources/editors/InputEditor.ts");
function getEditor(item, dataView) {
    return new InputEditor_1.InputEditor(item, dataView);
}
exports.getEditor = getEditor;


/***/ }),

/***/ "../ts-dataview/sources/types.ts":
/*!***************************************!*\
  !*** ../ts-dataview/sources/types.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var DataViewEvents;
(function (DataViewEvents) {
    DataViewEvents["click"] = "click";
    DataViewEvents["doubleClick"] = "doubleclick";
    DataViewEvents["focusChange"] = "focuschange";
    DataViewEvents["beforeEditStart"] = "beforeEditStart";
    DataViewEvents["afterEditStart"] = "afterEditStart";
    DataViewEvents["beforeEditEnd"] = "beforeEditEnd";
    DataViewEvents["afterEditEnd"] = "afterEditEnd";
    DataViewEvents["itemRightClick"] = "itemRightClick";
    DataViewEvents["itemMouseOver"] = "itemMouseOver";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    DataViewEvents["contextmenu"] = "contextmenu";
})(DataViewEvents = exports.DataViewEvents || (exports.DataViewEvents = {}));


/***/ }),

/***/ "../ts-form/index.ts":
/*!***************************!*\
  !*** ../ts-form/index.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Form */ "../ts-form/sources/Form.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-form/sources/types.ts"));
var types_1 = __webpack_require__(/*! ./sources/types */ "../ts-form/sources/types.ts");
exports.FormEvents = types_1.FormEvents;


/***/ }),

/***/ "../ts-form/sources/Form.ts":
/*!**********************************!*\
  !*** ../ts-form/sources/Form.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_layout_1 = __webpack_require__(/*! @dhx/ts-layout */ "../ts-layout/index.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dateinput_1 = __webpack_require__(/*! ./elements/dateinput */ "../ts-form/sources/elements/dateinput.ts");
var button_1 = __webpack_require__(/*! ./elements/button */ "../ts-form/sources/elements/button.ts");
var checkbox_1 = __webpack_require__(/*! ./elements/checkbox */ "../ts-form/sources/elements/checkbox.ts");
var checkboxGroup_1 = __webpack_require__(/*! ./elements/checkboxGroup */ "../ts-form/sources/elements/checkboxGroup.ts");
var input_1 = __webpack_require__(/*! ./elements/input */ "../ts-form/sources/elements/input.ts");
var radioGroup_1 = __webpack_require__(/*! ./elements/radioGroup */ "../ts-form/sources/elements/radioGroup.ts");
var select_1 = __webpack_require__(/*! ./elements/select */ "../ts-form/sources/elements/select.ts");
var textarea_1 = __webpack_require__(/*! ./elements/textarea */ "../ts-form/sources/elements/textarea.ts");
var textinput_1 = __webpack_require__(/*! ./elements/textinput */ "../ts-form/sources/elements/textinput.ts");
var combo_1 = __webpack_require__(/*! ./elements/combo */ "../ts-form/sources/elements/combo.ts");
var sliderform_1 = __webpack_require__(/*! ./elements/sliderform */ "../ts-form/sources/elements/sliderform.ts");
var helper_1 = __webpack_require__(/*! ./helper */ "../ts-form/sources/helper.ts");
var simplevault_1 = __webpack_require__(/*! ./elements/simplevault */ "../ts-form/sources/elements/simplevault.ts");
var timeinput_1 = __webpack_require__(/*! ./elements/timeinput */ "../ts-form/sources/elements/timeinput.ts");
var colorpicker_1 = __webpack_require__(/*! ./elements/colorpicker */ "../ts-form/sources/elements/colorpicker.ts");
var spacer_1 = __webpack_require__(/*! ./elements/spacer */ "../ts-form/sources/elements/spacer.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-form/sources/types.ts");
var Form = /** @class */ (function (_super) {
    __extends(Form, _super);
    function Form(container, config) {
        var _this = _super.call(this, null, core_1.extend({
            disabled: false,
            hidden: false,
        }, config)) || this;
        _this._state = {};
        _this._isValid = true;
        _this.events = new events_1.EventSystem(_this);
        _this.container = container;
        _this._initUI(container);
        _this.config.hidden && _this.hide(true);
        _this.config.disabled && _this.disable();
        _this.events.on(types_1.FormEvents.afterShow, function () {
            _this._formContainerShow();
        });
        _this.events.on(types_1.FormEvents.afterHide, function () {
            if (!Object.values(_this._attachments).some(function (item) { return !item.config.hidden; })) {
                _this._formContainerHide();
            }
        });
        return _this;
    }
    Form.prototype.send = function (url, method, asFormData) {
        var _this = this;
        if (method === void 0) { method = "POST"; }
        if (this.events.fire(types_1.FormEvents.beforeSend)) {
            return new Promise(function (resolve, reject) {
                var xhr = new XMLHttpRequest();
                xhr.onload = function () {
                    if (xhr.status === 200) {
                        resolve(xhr.response || xhr.responseText);
                    }
                    else {
                        reject({
                            status: xhr.status,
                            statusText: xhr.statusText,
                        });
                    }
                };
                xhr.onloadend = function () {
                    if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
                        _this.events.fire(types_1.FormEvents.afterSend);
                    }
                };
                xhr.onerror = function () {
                    reject({
                        status: xhr.status,
                        statusText: xhr.statusText,
                    });
                };
                if (method === "GET") {
                    url += "?" + encodeURIComponent(JSON.stringify(_this.getValue()));
                }
                xhr.open(method, url);
                if (!asFormData) {
                    xhr.setRequestHeader("Content-Type", "application/json");
                }
                switch (method) {
                    case "POST":
                        _this._send();
                        xhr.send(asFormData ? _this.getValue(true) : JSON.stringify(_this.getValue()));
                        break;
                    case "DELETE":
                    case "PUT":
                        xhr.send(asFormData ? _this.getValue(true) : JSON.stringify(_this.getValue()));
                        break;
                    case "GET":
                        xhr.send();
                        break;
                    default:
                        xhr.send();
                        break;
                }
            });
        }
    };
    Form.prototype.clear = function (method) {
        switch (method) {
            case types_1.ClearMethod.value:
                this._clear();
                break;
            case types_1.ClearMethod.validation:
                this._clearValidate();
                break;
            default:
                this._clear();
                this._clearValidate();
                break;
        }
        this.paint();
    };
    Form.prototype.setValue = function (obj) {
        for (var item in obj) {
            for (var key in this._attachments) {
                if (typeof this._attachments[key].setValue === "function" &&
                    this._attachments[key].config.name === item) {
                    this._attachments[key].setValue(obj[item]);
                }
            }
        }
    };
    Form.prototype.getValue = function (asFormData) {
        if (asFormData) {
            var formData = new FormData();
            for (var key in this._state) {
                if (Array.isArray(this._state[key])) {
                    for (var _i = 0, _a = this._state[key]; _i < _a.length; _i++) {
                        var value = _a[_i];
                        formData.append(key + "[]", value);
                    }
                }
                else {
                    formData.append(key, this._state[key]);
                }
            }
            return formData;
        }
        return __assign({}, this._state);
    };
    Form.prototype.getItem = function (name) {
        for (var item in this._attachments) {
            if (item === name) {
                return this._attachments[item];
            }
        }
    };
    Form.prototype.validate = function () {
        this._isValid = true;
        for (var key in this._attachments) {
            if (typeof this._attachments[key].validate === "function") {
                if (helper_1.isVerify(this._attachments[key].config) && !this._attachments[key].validate()) {
                    this._isValid = false;
                }
            }
        }
        return this._isValid;
    };
    Form.prototype.setProperties = function (arg, props) {
        if (typeof arg === "string" && props && !core_1.isEmptyObj(props)) {
            for (var key in this._attachments) {
                if (typeof this._attachments[key].setProperties === "function" && key === arg) {
                    this._attachments[key].setProperties(props);
                }
            }
        }
        if (typeof arg === "object" && !core_1.isEmptyObj(arg)) {
            for (var key in this._attachments) {
                if (typeof this._attachments[key].setProperties === "function" && !core_1.isEmptyObj(arg[key])) {
                    this._attachments[key].setProperties(arg[key]);
                }
            }
        }
    };
    Form.prototype.getProperties = function (name) {
        if (name) {
            for (var key in this._attachments) {
                if (typeof this._attachments[key].getProperties === "function" && key === name) {
                    return this._attachments[key].getProperties();
                }
            }
        }
        var obj = {};
        for (var key in this._attachments) {
            if (typeof this._attachments[key].getProperties === "function") {
                obj[key] = this._attachments[key].getProperties();
            }
        }
        return obj;
    };
    Form.prototype.show = function () {
        if (!this.config.hidden && !Object.values(this._attachments).some(function (item) { return !item.config.hidden; })) {
            return;
        }
        this._formContainerShow();
        for (var key in this._attachments) {
            if (typeof this._attachments[key].show === "function") {
                this._attachments[key].show();
            }
        }
    };
    Form.prototype.hide = function (init) {
        if (this.config.hidden && !init) {
            return;
        }
        this._formContainerHide();
        for (var key in this._attachments) {
            if (typeof this._attachments[key].hide === "function") {
                this._attachments[key].hide(init);
            }
        }
    };
    Form.prototype.setFocus = function (name) {
        for (var item in this._attachments) {
            var control = this._attachments[item];
            if (control.config.type === "radiogroup" || control.config.type === "checkboxgroup") {
                control.focus(name);
            }
            if (control.config.name === name) {
                control.focus();
            }
        }
    };
    Form.prototype.isVisible = function (name) {
        if (!name) {
            return !this.config.hidden;
        }
        for (var key in this._attachments) {
            if (key === name) {
                return !this._attachments[key].config.hidden;
            }
        }
    };
    Form.prototype.disable = function () {
        this.config.disabled = true;
        for (var key in this._attachments) {
            if (typeof this._attachments[key].disable === "function") {
                this._attachments[key].disable();
            }
        }
    };
    Form.prototype.enable = function () {
        this.config.disabled = false;
        for (var key in this._attachments) {
            if (typeof this._attachments[key].enable === "function") {
                this._attachments[key].enable();
            }
        }
    };
    Form.prototype.isDisabled = function (name) {
        if (!name) {
            return this.config.disabled;
        }
        for (var key in this._attachments) {
            if (key === name) {
                return this._attachments[key].config.disabled;
            }
        }
    };
    Form.prototype.forEach = function (callback) {
        var items = Object.values(this._attachments);
        for (var index = 0; index < items.length; index++) {
            callback.call(this, items[index], index, items);
        }
    };
    Form.prototype.destructor = function () {
        this.events.clear();
        this.unmount();
    };
    Form.prototype.getRootView = function () {
        return this.layout.getRootView();
    };
    Form.prototype._addLayoutItem = function (item) {
        var _this = this;
        var id = (item.id = item.id || core_1.uid());
        var name = (item.name = item.name || id);
        item.type = item.type && item.type.toLowerCase();
        var width = item.width, height = item.height;
        var css = item.css, padding = item.padding, config = __rest(item, ["css", "padding"]);
        var classList = css ? css + " dhx_form-element" : "dhx_form-element";
        var autoSize = !(item.type === "spacer" || item.type === undefined);
        if (autoSize && !width) {
            width = "content";
        }
        if (autoSize && !height) {
            height = "content";
        }
        var cell = {
            id: name,
            width: width,
            height: height,
            padding: padding,
            css: classList,
        };
        if ("gravity" in item) {
            cell.gravity = item.gravity;
        }
        switch (config.type) {
            case "button":
                {
                    var button_2 = (this._attachments[name] = new button_1.Button(null, config));
                    button_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                        return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                    });
                    button_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                        _this._changeProps(name, props);
                        _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                    });
                    button_2.events.on(types_1.ItemEvent.click, function (e) {
                        e.preventDefault();
                        if (button_2.config.submit && _this.validate()) {
                            button_2.config.url && _this.send(button_2.config.url);
                        }
                        _this.events.fire(types_1.FormEvents.click, [name, e]);
                        _this.events.fire(types_1.FormEvents.buttonClick, [name, e]);
                    });
                    button_2.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                        if (!init) {
                            return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                        }
                    });
                    button_2.events.on(types_1.ItemEvent.beforeShow, function (value) {
                        return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                    });
                    button_2.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                        _this.layout.getCell(name).hide();
                        !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                    });
                    button_2.events.on(types_1.ItemEvent.afterShow, function (value) {
                        _this.layout.getCell(name).show();
                        _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                    });
                }
                break;
            case "datepicker": {
                var datePicker_1 = (this._attachments[name] = new dateinput_1.DatePicker(null, config));
                this._state[name] = datePicker_1.getValue();
                datePicker_1.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                datePicker_1.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props);
                    _this._state[name] = datePicker_1.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                });
                datePicker_1.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                datePicker_1.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                datePicker_1.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                datePicker_1.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                datePicker_1.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                datePicker_1.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                datePicker_1.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                break;
            }
            case "checkbox": {
                var checkbox_2 = (this._attachments[name] = new checkbox_1.Checkbox(null, config));
                this._state[name] = checkbox_2.getValue();
                checkbox_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                checkbox_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props);
                    _this._state[name] = checkbox_2.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                });
                checkbox_2.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                checkbox_2.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                checkbox_2.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                checkbox_2.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                checkbox_2.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                checkbox_2.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                checkbox_2.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                break;
            }
            case "checkboxgroup": {
                var checkboxGroup_2 = (this._attachments[name] = new checkboxGroup_1.CheckboxGroup(null, config));
                this._state[name] = checkboxGroup_2.getValue();
                checkboxGroup_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props);
                    _this._state[name] = checkboxGroup_2.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                checkboxGroup_2.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                break;
            }
            case "combo": {
                var combo_2 = (this._attachments[name] = new combo_1.Combo(null, config));
                this._state[name] = combo_2.getValue();
                combo_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                combo_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props);
                    _this._state[name] = combo_2.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                });
                combo_2.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                combo_2.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                combo_2.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                combo_2.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                combo_2.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                combo_2.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                combo_2.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                break;
            }
            case "input": {
                var input_2 = (this._attachments[name] = new input_1.Input(null, config));
                this._state[name] = input_2.getValue();
                input_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                input_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props);
                    _this._state[name] = input_2.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                });
                input_2.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                input_2.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                input_2.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                input_2.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                input_2.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                input_2.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                input_2.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                break;
            }
            case "radiogroup": {
                var radioGroup_2 = (this._attachments[name] = new radioGroup_1.RadioGroup(null, config));
                this._state[name] = radioGroup_2.getValue();
                radioGroup_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                radioGroup_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props);
                    _this._state[name] = radioGroup_2.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                });
                radioGroup_2.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                radioGroup_2.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                radioGroup_2.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                radioGroup_2.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                radioGroup_2.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                radioGroup_2.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                radioGroup_2.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                break;
            }
            case "select": {
                var select_2 = (this._attachments[name] = new select_1.Select(null, config));
                this._state[name] = select_2.getValue();
                select_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                select_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props);
                    _this._state[name] = select_2.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                });
                select_2.events.on(types_1.ItemEvent.changeOptions, function (options) {
                    _this.layout.getCell(name).config.options = __spreadArrays(options);
                });
                select_2.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                select_2.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                select_2.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                select_2.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                select_2.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                select_2.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                select_2.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                break;
            }
            case "simplevault": {
                config.$vaultHeight = height;
                var simpleVault_1 = (this._attachments[name] = new simplevault_1.SimpleVault(null, config));
                this._state[name] = simpleVault_1.getValue();
                simpleVault_1.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                simpleVault_1.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props);
                    _this._state[name] = simpleVault_1.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                });
                simpleVault_1.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                simpleVault_1.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                simpleVault_1.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                simpleVault_1.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                simpleVault_1.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                simpleVault_1.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                simpleVault_1.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                break;
            }
            case "slider": {
                var sliderForm = (this._attachments[name] = new sliderform_1.SliderForm(null, config));
                this._state[name] = sliderForm.getValue();
                sliderForm.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                sliderForm.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                sliderForm.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                sliderForm.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                sliderForm.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                break;
            }
            case "textarea": {
                var textarea_2 = (this._attachments[name] = new textarea_1.Textarea(null, config));
                this._state[name] = textarea_2.getValue();
                textarea_2.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                textarea_2.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props);
                    _this._state[name] = textarea_2.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                });
                textarea_2.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                textarea_2.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                textarea_2.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                textarea_2.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                textarea_2.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                textarea_2.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                textarea_2.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                break;
            }
            case "text": {
                var text_1 = (this._attachments[name] = new textinput_1.Text(null, config));
                this._state[name] = text_1.getValue();
                text_1.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                text_1.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props);
                    _this._state[name] = text_1.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                });
                text_1.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                text_1.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                text_1.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                text_1.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                text_1.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                text_1.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                text_1.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                break;
            }
            case "timepicker": {
                var timePicker_1 = (this._attachments[name] = new timeinput_1.TimePicker(null, config));
                this._state[name] = timePicker_1.getValue();
                timePicker_1.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                timePicker_1.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props);
                    _this._state[name] = timePicker_1.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                });
                timePicker_1.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                timePicker_1.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                timePicker_1.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                timePicker_1.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                timePicker_1.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                timePicker_1.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                timePicker_1.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                break;
            }
            case "colorpicker": {
                var colorPicker_1 = (this._attachments[name] = new colorpicker_1.ColorPicker(null, config));
                this._state[name] = colorPicker_1.getValue();
                colorPicker_1.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                colorPicker_1.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props);
                    _this._state[name] = colorPicker_1.getValue();
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                });
                colorPicker_1.events.on(types_1.ItemEvent.change, function (value) {
                    _this._state[name] = value;
                    _this.events.fire(types_1.FormEvents.change, [name, value]);
                });
                colorPicker_1.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                colorPicker_1.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                colorPicker_1.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                colorPicker_1.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
                colorPicker_1.events.on(types_1.ItemEvent.beforeValidate, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeValidate, [name, value]);
                });
                colorPicker_1.events.on(types_1.ItemEvent.afterValidate, function (value, isValid) {
                    _this.events.fire(types_1.FormEvents.afterValidate, [name, value, isValid]);
                });
                break;
            }
            case "spacer":
            default: {
                var spacer = (this._attachments[name] = new spacer_1.Spacer(null, config));
                spacer.events.on(types_1.ItemEvent.beforeChangeProperties, function (props) {
                    return _this.events.fire(types_1.FormEvents.beforeChangeProperties, [name, props]);
                });
                spacer.events.on(types_1.ItemEvent.afterChangeProperties, function (props) {
                    _this._changeProps(name, props);
                    _this.events.fire(types_1.FormEvents.afterChangeProperties, [name, props]);
                });
                spacer.events.on(types_1.ItemEvent.beforeHide, function (value, init) {
                    if (!init) {
                        return _this.events.fire(types_1.FormEvents.beforeHide, [name, value]);
                    }
                });
                spacer.events.on(types_1.ItemEvent.beforeShow, function (value) {
                    return _this.events.fire(types_1.FormEvents.beforeShow, [name, value]);
                });
                spacer.events.on(types_1.ItemEvent.afterHide, function (value, init) {
                    _this.layout.getCell(name).hide();
                    !init && _this.events.fire(types_1.FormEvents.afterHide, [name, value]);
                });
                spacer.events.on(types_1.ItemEvent.afterShow, function (value) {
                    _this.layout.getCell(name).show();
                    _this.events.fire(types_1.FormEvents.afterShow, [name, value]);
                });
            }
        }
        return cell;
    };
    Form.prototype._changeProps = function (name, props) {
        var properties = ["width", "height", "css", "padding"];
        for (var key in props) {
            if (properties.includes(key)) {
                this.layout.getCell(name).config[key] = props[key];
            }
        }
    };
    Form.prototype._addLayoutItems = function (items) {
        var _this = this;
        return items.map(function (item) {
            if (helper_1.isBlock(item)) {
                var layoutConfig = { width: "content", height: "content" };
                _this._createLayoutConfig(item, layoutConfig);
                return layoutConfig;
            }
            return _this._addLayoutItem(item);
        });
    };
    Form.prototype._checkLayoutConfig = function (config, layoutConfig) {
        if (core_1.isDefined(config.css)) {
            layoutConfig.css = config.css;
        }
        if (core_1.isDefined(config.title)) {
            layoutConfig.header = config.title;
        }
        if (core_1.isDefined(config.padding)) {
            layoutConfig.padding = config.padding;
        }
        if (core_1.isDefined(config.gravity)) {
            layoutConfig.gravity = config.gravity;
        }
        if (core_1.isDefined(config.width)) {
            layoutConfig.width = config.width;
        }
        if (core_1.isDefined(config.height)) {
            layoutConfig.height = config.height;
        }
        if (core_1.isDefined(config.align)) {
            layoutConfig.align = config.align;
        }
        return layoutConfig;
    };
    Form.prototype._createLayoutConfig = function (config, layoutConfig) {
        layoutConfig = this._checkLayoutConfig(config, layoutConfig);
        if (core_1.isDefined(config.rows)) {
            layoutConfig.rows = this._addLayoutItems(config.rows);
        }
        else if (core_1.isDefined(config.cols)) {
            layoutConfig.cols = this._addLayoutItems(config.cols);
        }
    };
    Form.prototype._initUI = function (container) {
        var attachments = (this._attachments = {});
        var layoutConfig = {
            padding: "8px",
        };
        this.config.css += " dhx_form";
        this._createLayoutConfig(this.config, layoutConfig);
        var layout = (this.layout = new ts_layout_1.Layout(container, layoutConfig));
        for (var name_1 in attachments) {
            layout.getCell(name_1).attach(attachments[name_1]);
        }
    };
    Form.prototype._clear = function () {
        this._state = {};
        for (var key in this._attachments) {
            var name_2 = this._attachments[key].config.name;
            if (typeof this._attachments[key].clear === "function") {
                this._attachments[key].clear();
                name_2
                    ? (this._state[name_2] = this._attachments[key].getValue())
                    : (this._state[key] = this._attachments[key].getValue());
            }
        }
    };
    Form.prototype._clearValidate = function () {
        for (var key in this._attachments) {
            if (typeof this._attachments[key].clearValidate === "function") {
                this._attachments[key].clearValidate();
            }
        }
    };
    Form.prototype._formContainerShow = function () {
        this.config.hidden = false;
        var root = this.getRootView().node.el;
        root.style.display = "flex";
    };
    Form.prototype._formContainerHide = function () {
        this.config.hidden = true;
        var root = this.getRootView().node.el;
        root.style.display = "none";
    };
    Form.prototype._send = function () {
        for (var key in this._attachments) {
            if (typeof this._attachments[key].send === "function") {
                this._attachments[key].send();
            }
        }
    };
    return Form;
}(view_1.View));
exports.Form = Form;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promiz */ "../node_modules/promiz/promiz.js")))

/***/ }),

/***/ "../ts-form/sources/elements/button.ts":
/*!*********************************************!*\
  !*** ../ts-form/sources/elements/button.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-form/sources/types.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var helper_1 = __webpack_require__(/*! ../helper */ "../ts-form/sources/helper.ts");
var Button = /** @class */ (function (_super) {
    __extends(Button, _super);
    function Button(container, config) {
        var _this = _super.call(this, container, __assign({ disabled: false, hidden: false }, config)) || this;
        _this._propsItem = [
            "submit",
            "url",
            "text",
            "icon",
            "view",
            "size",
            "color",
            "full",
            "circle",
            "loading",
        ];
        _this._props = __spreadArrays(helper_1.baseProps, _this._propsItem);
        _this.config.text = _this.config.text || _this.config.value;
        _this.events = new events_1.EventSystem();
        _this._handlers = {
            onclick: function (e) { return _this.events.fire(types_1.ItemEvent.click, [e]); },
        };
        if (_this.config.hidden) {
            dom_1.awaitRedraw().then(function () {
                _this.hide(true);
            });
        }
        var render = function () { return _this._draw(); };
        _this.mount(container, dom_1.create({ render: render }));
        return _this;
    }
    Button.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            core_1.isEmptyObj(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        this.config.text = this.config.text || this.config.value;
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    Button.prototype.getProperties = function () {
        var obj = {};
        for (var key in this.config) {
            if (this._props.includes(key)) {
                obj[key] = this.config[key];
            }
        }
        return obj;
    };
    Button.prototype.show = function () {
        var _a = this.config, text = _a.text, hidden = _a.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [text])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [text]);
    };
    Button.prototype.hide = function (init) {
        var _a = this.config, text = _a.text, hidden = _a.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [text, init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [text, init]);
    };
    Button.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    Button.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    Button.prototype.enable = function () {
        this.config.disabled = false;
        this.paint();
    };
    Button.prototype.isDisabled = function () {
        return this.config.disabled;
    };
    Button.prototype._draw = function () {
        var _a = this.config, color = _a.color, size = _a.size, view = _a.view, full = _a.full, loading = _a.loading, circle = _a.circle, icon = _a.icon, text = _a.text, disabled = _a.disabled, submit = _a.submit, id = _a.id;
        var colorsCss = {
            danger: " dhx_button--color_danger",
            secondary: " dhx_button--color_secondary",
            primary: " dhx_button--color_primary",
            success: " dhx_button--color_success",
        }[color] || " dhx_button--color_primary";
        var sizeCss = {
            small: " dhx_button--size_small",
            medium: " dhx_button--size_medium",
        }[size] || " dhx_button--size_medium";
        var viewCss = {
            flat: " dhx_button--view_flat",
            link: " dhx_button--view_link",
        }[view] || " dhx_button--view_flat";
        var fullCss = full ? " dhx_button--width_full" : "";
        var circleCss = circle ? " dhx_button--circle" : "";
        var loadingCss = loading ? " dhx_button--loading" : "";
        var iconViewCss = icon && !text ? " dhx_button--icon" : "";
        return dom_1.el("button", {
            disabled: disabled,
            id: id,
            onclick: this._handlers.onclick,
            type: submit ? "submit" : "button",
            class: "dhx_button" +
                colorsCss +
                sizeCss +
                viewCss +
                fullCss +
                circleCss +
                loadingCss +
                iconViewCss,
        }, [
            icon &&
                dom_1.el("span.dhx_button__icon", {
                    class: icon,
                }),
            text && dom_1.el("span.dhx_button__text", text),
            loading &&
                dom_1.el("span.dhx_button__loading", [dom_1.el("span.dhx_button__loading-icon.dxi.dxi-loading")]),
        ]);
    };
    return Button;
}(view_1.View));
exports.Button = Button;


/***/ }),

/***/ "../ts-form/sources/elements/checkbox.ts":
/*!***********************************************!*\
  !*** ../ts-form/sources/elements/checkbox.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var helper_1 = __webpack_require__(/*! ../helper */ "../ts-form/sources/helper.ts");
var ts_popup_1 = __webpack_require__(/*! @dhx/ts-popup */ "../ts-popup/index.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-form/sources/types.ts");
var label_1 = __webpack_require__(/*! ./helper/label */ "../ts-form/sources/elements/helper/label.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var Checkbox = /** @class */ (function (_super) {
    __extends(Checkbox, _super);
    function Checkbox(container, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, container, config) || this;
        _this.events = new events_1.EventSystem();
        _this._isValid = true;
        _this._propsItem = [
            "required",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
            "readonly",
            "text",
        ];
        _this._props = __spreadArrays(helper_1.baseProps, _this._propsItem);
        _this._initView();
        _this._initHandlers();
        var render = function () { return _this._draw(); };
        _this.mount(container, dom_1.create({ render: render }));
        return _this;
    }
    Checkbox.prototype.setProperties = function (propertyConfig, silent) {
        if (silent === void 0) { silent = false; }
        if (!propertyConfig ||
            core_1.isEmptyObj(propertyConfig) ||
            (!silent && !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()])))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        !silent && this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    Checkbox.prototype.getProperties = function () {
        var obj = {};
        for (var key in this.config) {
            if (this._props.includes(key)) {
                obj[key] = this.config[key];
            }
        }
        return obj;
    };
    Checkbox.prototype.show = function () {
        var hidden = this.config.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [this.getValue()])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [this.getValue()]);
    };
    Checkbox.prototype.hide = function (init) {
        var hidden = this.config.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [this.getValue(), init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [this.getValue(), init]);
    };
    Checkbox.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    Checkbox.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    Checkbox.prototype.enable = function () {
        this.config.disabled = false;
        this.paint();
    };
    Checkbox.prototype.isDisabled = function () {
        return this.config.disabled;
    };
    Checkbox.prototype.validate = function () {
        if (!this.events.fire(types_1.ItemEvent.beforeValidate, [this.getValue()]))
            return;
        this._isValid = this.config.required ? this.config.required && !!this.config.checked : true;
        this.config.$validationStatus = this._isValid ? types_1.ValidationStatus.success : types_1.ValidationStatus.error;
        this.events.fire(types_1.ItemEvent.afterValidate, [this.getValue(), this._isValid]);
        return this._isValid;
    };
    Checkbox.prototype.clearValidate = function () {
        this.config.$validationStatus = types_1.ValidationStatus.pre;
        this.paint();
    };
    Checkbox.prototype.setValue = function (checked, silent) {
        if (silent === void 0) { silent = false; }
        if (typeof checked === "undefined" || checked === this.config.checked)
            return;
        this.config.checked = !!checked;
        if (!silent) {
            this.events.fire(types_1.ItemEvent.change, [this.getValue()]);
            helper_1.isVerify(this.config) && this.validate();
        }
    };
    Checkbox.prototype.getValue = function () {
        var _a = this.config, value = _a.value, checked = _a.checked;
        return value ? (checked ? value : "") : !!checked;
    };
    Checkbox.prototype.clear = function (silent) {
        if (!this.config.checked)
            return;
        this.config.checked = false;
        if (!silent) {
            this.events.fire(types_1.ItemEvent.change, [this.getValue()]);
        }
    };
    Checkbox.prototype.destructor = function () {
        this.events.clear();
        this.unmount();
    };
    Checkbox.prototype.focus = function () {
        var _this = this;
        dom_1.awaitRedraw().then(function () {
            _this.getRootView().refs.input.el.focus();
        });
    };
    Checkbox.prototype.isChecked = function () {
        return !!this.config.checked;
    };
    Checkbox.prototype._initView = function () {
        var _this = this;
        this._inGroup = this.config.$group;
        if (!this._inGroup) {
            if (this.config.helpMessage) {
                this._helper = new ts_popup_1.Popup({
                    css: "dhx_tooltip dhx_tooltip--forced dhx_tooltip--light",
                });
                this._helper.attachHTML(this.config.helpMessage);
            }
            this._handlers = {
                showHelper: function (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    _this._helper.show(e.target);
                },
                cancelUnusefulClick: function (e) {
                    e.preventDefault();
                },
                onchange: function (e) {
                    _this.config.checked = e.target.checked;
                    _this.events.fire(types_1.ItemEvent.change, [_this.getValue()]);
                    helper_1.isVerify(_this.config) && _this.validate();
                },
            };
        }
        else {
            this._handlers = {
                onchange: function (e) {
                    _this.config.checked = e.target.checked;
                    _this.events.fire(types_1.ItemEvent.change, [_this.getValue()]);
                    helper_1.isVerify(_this.config) && _this.validate();
                },
            };
        }
        if (this.config.hidden) {
            dom_1.awaitRedraw().then(function () {
                _this.hide(true);
            });
        }
    };
    Checkbox.prototype._initHandlers = function () {
        var _this = this;
        this.events.on(types_1.ItemEvent.change, function () { return _this.paint(); });
        this.events.on(types_1.ItemEvent.afterValidate, function () {
            _this.config.$validationStatus = _this._isValid ? types_1.ValidationStatus.success : types_1.ValidationStatus.error;
            _this.paint();
        });
    };
    Checkbox.prototype._draw = function () {
        var _a = this.config, id = _a.id, value = _a.value, checked = _a.checked, disabled = _a.disabled, name = _a.name, required = _a.required, text = _a.text, label = _a.label, labelWidth = _a.labelWidth, helpMessage = _a.helpMessage;
        return dom_1.el("label.dhx_checkbox.dhx_form-group.dhx_form-group--checkbox", {
            class: helper_1.getFormItemCss(this.config, !!required),
        }, !this._inGroup
            ? [
                label || labelWidth || helpMessage || required ? this._drawLabel() : null,
                dom_1.el(".dhx_checkbox__container", [
                    dom_1.el(".dhx_checkbox__holder", [
                        dom_1.el("input.dhx_checkbox__input", {
                            type: "checkbox",
                            id: id,
                            value: value,
                            name: name,
                            disabled: disabled,
                            checked: checked,
                            onchange: this._handlers.onchange,
                            required: required,
                            _ref: "input",
                        }),
                        dom_1.el("span.dhx_checkbox__visual-input"),
                        dom_1.el("span.dhx_text", [text]),
                    ]),
                    required &&
                        helper_1.getValidationMessage(this.config) &&
                        dom_1.el("span.dhx_input__caption", helper_1.getValidationMessage(this.config)),
                ]),
            ]
            : [
                dom_1.el(".dhx_checkbox__holder", [
                    dom_1.el("input.dhx_checkbox__input", {
                        type: "checkbox",
                        id: id,
                        value: value || "",
                        name: name || "",
                        disabled: disabled,
                        checked: checked,
                        onchange: this._handlers.onchange,
                        required: required,
                        _ref: "input",
                    }),
                    dom_1.el("span.dhx_checkbox__visual-input"),
                    dom_1.el("span.dhx_text", [text]),
                ]),
            ]);
    };
    return Checkbox;
}(label_1.Label));
exports.Checkbox = Checkbox;


/***/ }),

/***/ "../ts-form/sources/elements/checkboxGroup.ts":
/*!****************************************************!*\
  !*** ../ts-form/sources/elements/checkboxGroup.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var ts_layout_1 = __webpack_require__(/*! @dhx/ts-layout */ "../ts-layout/index.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var checkbox_1 = __webpack_require__(/*! ./checkbox */ "../ts-form/sources/elements/checkbox.ts");
var label_1 = __webpack_require__(/*! ./helper/label */ "../ts-form/sources/elements/helper/label.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-form/sources/types.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var helper_1 = __webpack_require__(/*! ../helper */ "../ts-form/sources/helper.ts");
var ts_popup_1 = __webpack_require__(/*! @dhx/ts-popup */ "../ts-popup/index.ts");
var CheckboxGroup = /** @class */ (function (_super) {
    __extends(CheckboxGroup, _super);
    function CheckboxGroup(container, config) {
        var _this = _super.call(this, null, config) || this;
        _this.events = new events_1.EventSystem();
        _this._buttons = [];
        _this._isValid = true;
        _this._propsItem = [
            "required",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
            "options",
        ];
        _this._props = __spreadArrays(helper_1.baseProps, _this._propsItem);
        _this._initView(config);
        _this._initHandlers();
        var render = function () { return _this._draw(); };
        _this.mount(container, dom_1.create({ render: render }));
        return _this;
    }
    CheckboxGroup.prototype.destructor = function () {
        this._buttons.forEach(function (i) { return i.destructor(); });
        this.events.clear();
        this.unmount();
    };
    CheckboxGroup.prototype.setProperties = function (arg, props) {
        if (typeof arg === "undefined" ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        if (typeof arg === "object" && !core_1.isEmptyObj(arg)) {
            for (var key in arg) {
                if (this._props.includes(key)) {
                    this.config[key] = arg[key];
                }
            }
            if (arg.hasOwnProperty("options")) {
                this._initView(this.config);
                this._initHandlers();
            }
        }
        if (typeof arg === "string" && props && !core_1.isEmptyObj(props)) {
            var checkbox = this._buttons.find(function (item) { return item.config.id === arg; });
            checkbox && checkbox.setProperties(props, true);
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    CheckboxGroup.prototype.getProperties = function (id) {
        if (typeof id === "undefined") {
            var obj = {};
            for (var key in this.config) {
                if (this._props.includes(key)) {
                    obj[key] = this.config[key];
                }
            }
            return obj;
        }
        var checkbox = this._buttons.find(function (item) { return item.config.id === id; });
        return checkbox.getProperties();
    };
    CheckboxGroup.prototype.getValue = function (id) {
        if (typeof id === "undefined") {
            var valueList_1 = {};
            this._buttons.forEach(function (item) {
                valueList_1[item.config.id] = item.getValue();
            });
            return valueList_1;
        }
        var checkbox = this._buttons.find(function (item) { return item.config.id === id; });
        if (id && checkbox) {
            return checkbox.getValue();
        }
    };
    CheckboxGroup.prototype.setValue = function (newValue) {
        if (typeof newValue === "undefined" || core_1.isEmptyObj(newValue))
            return;
        var isSet = false;
        var _loop_1 = function (id, value) {
            var checkbox = this_1._buttons.find(function (item) { return item.config.id === id; });
            if (checkbox) {
                checkbox.setValue(!!value, true);
                isSet = true;
            }
        };
        var this_1 = this;
        for (var _i = 0, _a = Object.entries(newValue); _i < _a.length; _i++) {
            var _b = _a[_i], id = _b[0], value = _b[1];
            _loop_1(id, value);
        }
        if (isSet) {
            this.events.fire(types_1.ItemEvent.change, [this.getValue()]);
            helper_1.isVerify(this.config) && this.validate();
        }
    };
    CheckboxGroup.prototype.isChecked = function (id) {
        if (typeof id === "undefined") {
            var checkedList_1 = {};
            this._buttons.forEach(function (item) {
                checkedList_1[item.config.id] = item.isChecked();
            });
            return checkedList_1;
        }
        var checkbox = this._buttons.find(function (item) { return item.config.id === id; });
        if (id && checkbox) {
            return checkbox.isChecked();
        }
    };
    CheckboxGroup.prototype.focus = function (id) {
        var _this = this;
        dom_1.awaitRedraw().then(function () {
            if (!_this._buttons.length) {
                return;
            }
            if (!id) {
                return _this._buttons[0].focus();
            }
            var checkbox = _this._buttons.find(function (item) { return item.config.id === id; });
            checkbox && checkbox.focus();
        });
    };
    CheckboxGroup.prototype.show = function () {
        var hidden = this.config.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [this.getValue()])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [this.getValue()]);
    };
    CheckboxGroup.prototype.hide = function (init) {
        var hidden = this.config.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [this.getValue(), init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [this.getValue(), init]);
    };
    CheckboxGroup.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    CheckboxGroup.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    CheckboxGroup.prototype.enable = function () {
        this.config.disabled = false;
        this.paint();
    };
    CheckboxGroup.prototype.isDisabled = function () {
        return this.config.disabled;
    };
    CheckboxGroup.prototype.clear = function () {
        if (this._buttons.some(function (item) { return item.isChecked(); })) {
            this._buttons.forEach(function (element) {
                element.clear(true);
            });
            this.events.fire(types_1.ItemEvent.change, [this.getValue()]);
        }
    };
    CheckboxGroup.prototype.validate = function () {
        var _this = this;
        if (!this.events.fire(types_1.ItemEvent.beforeValidate, [this.getValue()]))
            return;
        if (this.config.required) {
            this._isValid = this._buttons.some(function (element) { return element.config.required && !!element.config.checked; });
        }
        this._buttons.forEach(function (element) {
            element.config.$validationStatus = _this._isValid
                ? types_1.ValidationStatus.success
                : types_1.ValidationStatus.error;
        });
        this.config.$validationStatus = this._isValid ? types_1.ValidationStatus.success : types_1.ValidationStatus.error;
        this.events.fire(types_1.ItemEvent.afterValidate, [this.getValue(), this._isValid]);
        return this._isValid;
    };
    CheckboxGroup.prototype.clearValidate = function () {
        this.config.$validationStatus = types_1.ValidationStatus.pre;
        this._buttons.forEach(function (element) {
            element.clearValidate();
        });
        this.paint();
    };
    CheckboxGroup.prototype._initView = function (config) {
        var _this = this;
        if (core_1.isEmptyObj(config) || core_1.isEmptyObj(config.options)) {
            return;
        }
        if (this.layout) {
            this.layout.destructor();
        }
        if (this._buttons.length) {
            this._buttons.forEach(function (button) {
                button.destructor();
            });
            this._buttons = [];
        }
        this.config = {
            type: config.type,
            id: config.id,
            name: config.name,
            disabled: false,
            hidden: false,
            options: {},
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
            }
        }
        if (this.config.helpMessage) {
            this._helper = new ts_popup_1.Popup({
                css: "dhx_tooltip dhx_tooltip--forced dhx_tooltip--light",
            });
            this._helper.attachHTML(this.config.helpMessage);
        }
        this._handlers = {
            showHelper: function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this._helper.show(e.target);
            },
            cancelUnusefulClick: function (e) {
                e.preventDefault();
            },
        };
        var checkboxesConfig = this.config.options.rows || this.config.options.cols;
        checkboxesConfig.forEach(function (option) {
            option.id = option.id || core_1.uid();
            option.$group = true;
        });
        this.layout = new ts_layout_1.Layout(null, this.config.options);
        checkboxesConfig.forEach(function (option) {
            var checkbox = new checkbox_1.Checkbox(null, __assign(__assign({}, option), { disabled: config.disabled, name: config.name, required: config.required, css: config.css }));
            _this._buttons.push(checkbox);
            _this.layout.getCell(option.id).attach(checkbox);
            checkbox.events.on(types_1.ItemEvent.change, function () {
                _this.events.fire(types_1.ItemEvent.change, [_this.getValue()]);
                helper_1.isVerify(_this.config) && _this.validate();
            });
        });
        this.config.value && this.setValue(this.config.value);
        this.clearValidate();
        if (this.config.hidden) {
            dom_1.awaitRedraw().then(function () {
                _this.hide(true);
            });
        }
    };
    CheckboxGroup.prototype._initHandlers = function () {
        var _this = this;
        this.events.on(types_1.ItemEvent.change, function () {
            _this.config.value = _this.getValue();
            _this.paint();
        });
        this.events.on(types_1.ItemEvent.afterValidate, function () {
            _this.config.$validationStatus = _this._isValid ? types_1.ValidationStatus.success : types_1.ValidationStatus.error;
            _this.paint();
        });
    };
    CheckboxGroup.prototype._draw = function () {
        var visibility = this.config.hidden ? " dhx_form-group--hidden" : "";
        var _a = this.config, label = _a.label, labelWidth = _a.labelWidth, helpMessage = _a.helpMessage, required = _a.required;
        return dom_1.el("div.dhx_form-group.dhx_form-group--checkbox-group", {
            class: helper_1.getFormItemCss(this.config, !!this.config.required) + visibility,
        }, [
            label || labelWidth || helpMessage || required ? this._drawLabel() : null,
            dom_1.el("div.dhx_checkbox-group--container", {}, [
                dom_1.inject(this.layout.getRootView()),
                required &&
                    helper_1.getValidationMessage(this.config) &&
                    dom_1.el("span.dhx_input__caption", helper_1.getValidationMessage(this.config)),
            ]),
        ]);
    };
    return CheckboxGroup;
}(label_1.Label));
exports.CheckboxGroup = CheckboxGroup;


/***/ }),

/***/ "../ts-form/sources/elements/colorpicker.ts":
/*!**************************************************!*\
  !*** ../ts-form/sources/elements/colorpicker.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts_colorpicker_1 = __webpack_require__(/*! @dhx/ts-colorpicker */ "../ts-colorpicker/index.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var label_1 = __webpack_require__(/*! ./helper/label */ "../ts-form/sources/elements/helper/label.ts");
var ts_popup_1 = __webpack_require__(/*! @dhx/ts-popup */ "../ts-popup/index.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-form/sources/types.ts");
var helper_1 = __webpack_require__(/*! ../helper */ "../ts-form/sources/helper.ts");
var ColorPicker = /** @class */ (function (_super) {
    __extends(ColorPicker, _super);
    function ColorPicker(container, config) {
        var _this = _super.call(this, null, config) || this;
        _this.events = new events_1.EventSystem();
        _this._isValid = true;
        _this._propsItem = [
            "require",
            "validation",
            "icon",
            "placeholder",
            "editable",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
        ];
        _this._propsColorpicker = ["mode", "grayShades", "customColors", "palette"];
        _this._props = __spreadArrays(helper_1.baseProps, _this._propsItem, _this._propsColorpicker);
        _this._initView(config);
        _this._initHandlers();
        var render = function () { return _this._draw(); };
        _this.mount(container, dom_1.create({ render: render }));
        return _this;
    }
    ColorPicker.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            core_1.isEmptyObj(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
                if (this._propsColorpicker.includes(key)) {
                    this.colorpicker.config[key] = propertyConfig[key];
                }
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.colorpicker.paint();
        this.paint();
    };
    ColorPicker.prototype.getProperties = function () {
        var obj = {};
        for (var key in this.config) {
            if (this._props.includes(key)) {
                obj[key] = this.config[key];
            }
        }
        return obj;
    };
    ColorPicker.prototype.show = function () {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [value])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [value]);
    };
    ColorPicker.prototype.hide = function (init) {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [value, init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [value, init]);
    };
    ColorPicker.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    ColorPicker.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    ColorPicker.prototype.enable = function () {
        this.config.disabled = false;
        this.paint();
    };
    ColorPicker.prototype.isDisabled = function () {
        return this.config.disabled;
    };
    ColorPicker.prototype.validate = function (validateValue) {
        var value = typeof validateValue === "undefined" ? this.getValue() : validateValue;
        if (!this.events.fire(types_1.ItemEvent.beforeValidate, [value]))
            return;
        this._isValid = this.config.validation ? this.config.validation(value) : ts_colorpicker_1.isHex(value);
        this.events.fire(types_1.ItemEvent.afterValidate, [value, this._isValid]);
        return this._isValid;
    };
    ColorPicker.prototype.clearValidate = function () {
        this.config.$validationStatus = types_1.ValidationStatus.pre;
        this.paint();
    };
    ColorPicker.prototype.setValue = function (value) {
        if (typeof value === "undefined" || value === this.config.value)
            return;
        this.colorpicker.setValue(value);
        helper_1.isVerify(this.config) && this.validate();
    };
    ColorPicker.prototype.getValue = function () {
        return this.config.value || "";
    };
    ColorPicker.prototype.clear = function () {
        if (this.config.value === "")
            return;
        this.config.value = "";
        this.colorpicker.clear();
    };
    ColorPicker.prototype.getWidget = function () {
        return this.colorpicker;
    };
    ColorPicker.prototype.focus = function () {
        var _this = this;
        dom_1.awaitRedraw().then(function () {
            _this.getRootView().refs.input.el.focus();
        });
    };
    ColorPicker.prototype._initView = function (config) {
        var _this = this;
        if (core_1.isEmptyObj(config)) {
            return;
        }
        if (this.colorpicker) {
            this.colorpicker.destructor();
        }
        if (this._popup) {
            this._popup.destructor();
        }
        this.config = {
            type: config.type,
            id: config.id,
            name: config.name,
            disabled: false,
            editable: false,
            hidden: false,
            value: "",
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
            }
        }
        this._popup = new ts_popup_1.Popup({ css: "dhx_widget--border-shadow" });
        this.colorpicker = new ts_colorpicker_1.Colorpicker(null, config);
        this._popup.attach(this.colorpicker);
        if (this.config.hidden) {
            dom_1.awaitRedraw().then(function () {
                _this.hide(true);
            });
        }
    };
    ColorPicker.prototype._initHandlers = function () {
        var _this = this;
        this.colorpicker.events.on(ts_colorpicker_1.ColorpickerEvents.change, function () {
            var value = (_this.config.value = _this.colorpicker.getValue());
            _this.events.fire(types_1.ItemEvent.change, [value]);
            _this._popup.hide();
            _this.paint();
        });
        this.events.on(types_1.ItemEvent.afterValidate, function () {
            _this.config.$validationStatus = _this._isValid ? types_1.ValidationStatus.success : types_1.ValidationStatus.error;
            _this.paint();
        });
        this._popup.events.on(ts_popup_1.PopupEvents.afterHide, function () { return helper_1.isVerify(_this.config) && _this.validate(); });
    };
    ColorPicker.prototype._getHandlers = function () {
        var _this = this;
        return {
            onfocus: function () {
                if (_this._popup.isVisible()) {
                    return;
                }
                var node = _this.getRootView().refs.input.el;
                _this._popup.show(node);
            },
            oninput: function (e) {
                var value = e.target.value;
                _this.events.fire(types_1.ItemEvent.input, [value]);
            },
            onchange: function (e) {
                var value = e.target.value;
                if (_this.config.editable && ts_colorpicker_1.isHex(value)) {
                    _this.setValue(value);
                }
                else if (value === "") {
                    _this.clear();
                }
                else {
                    helper_1.isVerify(_this.config) && _this.validate();
                    _this.paint();
                }
            },
            onkeyup: function (e) {
                if (e.keyCode === 13) {
                    if (_this._popup.isVisible()) {
                        _this._popup.hide();
                    }
                    var node = _this.getRootView().refs.input.el;
                    node.blur();
                }
            },
        };
    };
    ColorPicker.prototype._draw = function () {
        var _a = this.config, required = _a.required, value = _a.value, icon = _a.icon, disabled = _a.disabled, placeholder = _a.placeholder, name = _a.name, id = _a.id, editable = _a.editable;
        return dom_1.el("div.dhx_form-group", {
            class: helper_1.getFormItemCss(this.config, !!required || !!this.config.validation),
        }, [
            this._drawLabel(),
            dom_1.el(".dhx_input__wrapper", [
                dom_1.el("div.dhx_input__container", {}, [
                    dom_1.el(".dhx_input__icon", {
                        class: icon ||
                            "dxi dxi-eyedropper-variant" +
                                (value ? " dhx_input__icon--color-selected" : ""),
                        style: { "background-color": value || "transparent" },
                    }),
                    dom_1.el("input.dhx_input.dhx_input--icon-padding", {
                        _key: this._uid,
                        value: value,
                        type: "text",
                        _ref: "input",
                        required: required,
                        disabled: disabled,
                        placeholder: placeholder || "",
                        name: name || "",
                        id: id || this._uid,
                        onfocus: this._handlers.onfocus,
                        oninput: this._handlers.oninput,
                        onchange: this._handlers.onchange,
                        onkeyup: this._handlers.onkeyup,
                        autocomplete: "off",
                        readOnly: !editable,
                    }),
                ]),
                helper_1.getValidationMessage(this.config) &&
                    dom_1.el("span.dhx_input__caption", {}, helper_1.getValidationMessage(this.config)),
            ]),
        ]);
    };
    return ColorPicker;
}(label_1.Label));
exports.ColorPicker = ColorPicker;


/***/ }),

/***/ "../ts-form/sources/elements/combo.ts":
/*!********************************************!*\
  !*** ../ts-form/sources/elements/combo.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var helper_1 = __webpack_require__(/*! ../helper */ "../ts-form/sources/helper.ts");
var ts_combobox_1 = __webpack_require__(/*! @dhx/ts-combobox */ "../ts-combobox/index.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var label_1 = __webpack_require__(/*! ./helper/label */ "../ts-form/sources/elements/helper/label.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-form/sources/types.ts");
var Combo = /** @class */ (function (_super) {
    __extends(Combo, _super);
    function Combo(container, config) {
        var _this = _super.call(this, null, config) || this;
        _this.events = new events_1.EventSystem();
        _this._isValid = true;
        _this._propsItem = [
            "required",
            "validation",
            "placeholder",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
            "readonly",
        ];
        _this._propsCombo = [
            "template",
            "filter",
            "multiselection",
            "selectAllButton",
            "itemsCount",
            "itemHeight",
            "virtual",
            "listHeight",
        ];
        _this._props = __spreadArrays(helper_1.baseProps, _this._propsItem, _this._propsCombo);
        _this._initView(config);
        _this._initHandlers();
        return _this;
    }
    Combo.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            core_1.isEmptyObj(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        this._initView(this.config);
        this._initHandlers();
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.combobox.paint();
        this.paint();
    };
    Combo.prototype.getProperties = function () {
        var obj = {};
        for (var key in this.config) {
            if (this._props.includes(key)) {
                obj[key] = this.config[key];
            }
        }
        return obj;
    };
    Combo.prototype.show = function () {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [value])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [value]);
    };
    Combo.prototype.hide = function (init) {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [value, init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [value, init]);
    };
    Combo.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    Combo.prototype.disable = function () {
        this.config.disabled = true;
        this.combobox.disable();
        this.paint();
    };
    Combo.prototype.enable = function () {
        this.config.disabled = false;
        this.combobox.enable();
        this.paint();
    };
    Combo.prototype.isDisabled = function () {
        return this.config.disabled;
    };
    Combo.prototype.clear = function () {
        if (!this.config.value)
            return;
        this.combobox.clear();
    };
    Combo.prototype.getValue = function () {
        if (this.config.multiselection) {
            return this.combobox.getValue(true) || [""];
        }
        else {
            return this.combobox.getValue() || "";
        }
    };
    Combo.prototype.setValue = function (value) {
        if (typeof value === "undefined" || value === this.config.value)
            return;
        value && this.combobox.setValue(value);
        helper_1.isVerify(this.config) && this.validate();
    };
    Combo.prototype.validate = function (validateValue) {
        var value = typeof validateValue === "undefined" ? this.getValue() : validateValue;
        if (!this.events.fire(types_1.ItemEvent.beforeValidate, [value]))
            return;
        this._isValid = this.config.validation
            ? this.config.validation(value)
            : (typeof value === "string" || value instanceof Array) && this._exsistData(value);
        this.config.$validationStatus = this._isValid ? types_1.ValidationStatus.success : types_1.ValidationStatus.error;
        this.config.required && this._validationStatus();
        this.events.fire(types_1.ItemEvent.afterValidate, [value, this._isValid]);
        return this._isValid;
    };
    Combo.prototype.clearValidate = function () {
        this.config.$validationStatus = types_1.ValidationStatus.pre;
        this._validationStatus();
        this.paint();
    };
    Combo.prototype.getWidget = function () {
        return this.combobox;
    };
    Combo.prototype.focus = function () {
        var _this = this;
        dom_1.awaitRedraw().then(function () {
            _this.combobox.focus();
        });
    };
    Combo.prototype._initView = function (config) {
        var _this = this;
        if (core_1.isEmptyObj(config)) {
            return;
        }
        if (this.combobox) {
            this.combobox.destructor();
        }
        this.config = {
            type: config.type,
            id: config.id,
            name: config.name,
            disabled: false,
            hidden: false,
            value: "",
        };
        var comboConfig = {};
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
                if (key !== "validation") {
                    comboConfig[key] = config[key];
                }
            }
        }
        this.combobox = new ts_combobox_1.Combobox(null, comboConfig);
        if (this.config.hidden) {
            dom_1.awaitRedraw().then(function () {
                _this.hide(true);
            });
        }
        this.paint();
    };
    Combo.prototype._initHandlers = function () {
        var _this = this;
        this.combobox.events.on(ts_combobox_1.ComboboxEvents.change, function () {
            var value = (_this.config.value = _this.getValue());
            _this.events.fire(types_1.ItemEvent.change, [value]);
            _this.paint();
        });
        this.combobox.events.on(ts_combobox_1.ComboboxEvents.afterClose, function () { return helper_1.isVerify(_this.config) && _this.validate(); });
        this.events.on(types_1.ItemEvent.afterValidate, function () {
            _this.config.$validationStatus = _this._isValid ? types_1.ValidationStatus.success : types_1.ValidationStatus.error;
            _this.paint();
        });
    };
    Combo.prototype._validationStatus = function () {
        switch (this.config.$validationStatus) {
            case types_1.ValidationStatus.success:
                this.combobox.config.css = (this.config.css || "") + "dhx_form-group--state_success";
                break;
            case types_1.ValidationStatus.error:
                this.combobox.config.css = (this.config.css || "") + "dhx_form-group--state_error";
                break;
            case types_1.ValidationStatus.pre:
            default:
                this.combobox.config.css = this.config.css || "";
                break;
        }
    };
    Combo.prototype._getRootView = function () {
        return this.combobox.getRootView();
    };
    Combo.prototype._draw = function () {
        var _a = this.config, labelWidth = _a.labelWidth, labelPosition = _a.labelPosition, $validationStatus = _a.$validationStatus;
        return dom_1.el(".dhx_form-group", {}, [
            dom_1.inject(this._getRootView()),
            dom_1.el("div", {
                style: {
                    "margin-left": "" + (labelWidth && labelPosition === "left" ? "calc(" + labelWidth + " + 16px)" : ""),
                },
                class: $validationStatus === 1
                    ? "dhx_form-group--state_error"
                    : $validationStatus === 2
                        ? "dhx_form-group--state_success"
                        : "",
            }, [dom_1.el("span.dhx_input__caption", helper_1.getValidationMessage(this.config))]),
        ]);
    };
    Combo.prototype._exsistData = function (id) {
        var _this = this;
        if (id instanceof Array) {
            return id.every(function (i) { return _this.combobox.data.exists(i); });
        }
        if (typeof id === "string") {
            return this.combobox.data.exists(id);
        }
    };
    return Combo;
}(label_1.Label));
exports.Combo = Combo;


/***/ }),

/***/ "../ts-form/sources/elements/dateinput.ts":
/*!************************************************!*\
  !*** ../ts-form/sources/elements/dateinput.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts_calendar_1 = __webpack_require__(/*! @dhx/ts-calendar */ "../ts-calendar/index.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var label_1 = __webpack_require__(/*! ./helper/label */ "../ts-form/sources/elements/helper/label.ts");
var ts_popup_1 = __webpack_require__(/*! @dhx/ts-popup */ "../ts-popup/index.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-form/sources/types.ts");
var helper_1 = __webpack_require__(/*! ../helper */ "../ts-form/sources/helper.ts");
var DatePicker = /** @class */ (function (_super) {
    __extends(DatePicker, _super);
    function DatePicker(container, config) {
        var _this = _super.call(this, null, config) || this;
        _this.events = new events_1.EventSystem();
        _this._isValid = true;
        _this._propsItem = [
            "required",
            "validation",
            "valueFormat",
            "icon",
            "placeholder",
            "editable",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
        ];
        _this._propsCalendar = [
            "mode",
            "mark",
            "disabledDates",
            "weekStart",
            "weekNumbers",
            "timePicker",
            "dateFormat",
            "timeFormat",
            "thisMonthOnly",
        ];
        _this._props = __spreadArrays(helper_1.baseProps, _this._propsItem, _this._propsCalendar);
        _this._initView(config);
        _this._initHandlers();
        var render = function () { return _this._draw(); };
        _this.mount(container, dom_1.create({ render: render }));
        return _this;
    }
    DatePicker.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            core_1.isEmptyObj(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
                if (this._propsCalendar.includes(key)) {
                    this.calendar.config[key] = propertyConfig[key];
                }
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.calendar.paint();
        this.paint();
    };
    DatePicker.prototype.getProperties = function () {
        var obj = {};
        for (var key in this.config) {
            if (this._props.includes(key)) {
                obj[key] = this.config[key];
            }
        }
        return obj;
    };
    DatePicker.prototype.show = function () {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [value])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [value]);
    };
    DatePicker.prototype.hide = function (init) {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [value, init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [value, init]);
    };
    DatePicker.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    DatePicker.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    DatePicker.prototype.enable = function () {
        this.config.disabled = false;
        this.paint();
    };
    DatePicker.prototype.isDisabled = function () {
        return this.config.disabled;
    };
    DatePicker.prototype.validate = function (validateValue) {
        var value = typeof validateValue === "undefined" ? this.getValue() : validateValue;
        var checkValue = this.config.valueFormat === "Date"
            ? value instanceof Date
            : ts_calendar_1.stringToDate(value, this.calendar.config.dateFormat, true);
        if (!this.events.fire(types_1.ItemEvent.beforeValidate, [value]))
            return;
        this._isValid = this.config.validation ? this.config.validation(value) : !!checkValue;
        this.events.fire(types_1.ItemEvent.afterValidate, [value, this._isValid]);
        return this._isValid;
    };
    DatePicker.prototype.clearValidate = function () {
        this.config.$validationStatus = types_1.ValidationStatus.pre;
        this.paint();
    };
    DatePicker.prototype.setValue = function (value) {
        if (typeof value === "undefined" || value === this.config.value)
            return;
        this.calendar.setValue(value);
        helper_1.isVerify(this.config) && this.validate();
    };
    DatePicker.prototype.getValue = function (asDateObject) {
        var _a = this.config, value = _a.value, valueFormat = _a.valueFormat;
        if ((!(value instanceof Date) && asDateObject && value !== "") ||
            (!(value instanceof Date) && valueFormat === "Date" && value !== "")) {
            return ts_calendar_1.stringToDate(value, this.calendar.config.dateFormat) || "";
        }
        return value || "";
    };
    DatePicker.prototype.focus = function () {
        var _this = this;
        dom_1.awaitRedraw().then(function () {
            _this.getRootView().refs.input.el.focus();
        });
    };
    DatePicker.prototype.clear = function () {
        if (this.config.value === "")
            return;
        this.config.value = "";
        this.calendar.clear();
    };
    DatePicker.prototype.getWidget = function () {
        return this.calendar;
    };
    DatePicker.prototype._initView = function (config) {
        var _this = this;
        if (core_1.isEmptyObj(config)) {
            return;
        }
        if (this.calendar) {
            this.calendar.destructor();
        }
        if (this._popup) {
            this._popup.destructor();
        }
        this.config = {
            type: config.type,
            id: config.id,
            name: config.name,
            disabled: false,
            editable: false,
            hidden: false,
            value: "",
            valueFormat: "string",
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
            }
        }
        this._popup = new ts_popup_1.Popup({ css: "dhx_widget--border-shadow" });
        this.calendar = new ts_calendar_1.Calendar(null, config);
        this._popup.attach(this.calendar);
        if (this.config.hidden) {
            dom_1.awaitRedraw().then(function () {
                _this.hide(true);
            });
        }
    };
    DatePicker.prototype._initHandlers = function () {
        var _this = this;
        this.calendar.events.on(ts_calendar_1.CalendarEvents.change, function () {
            var value = (_this.config.value = _this.calendar.getValue(_this.config.valueFormat === "Date"));
            _this.events.fire(types_1.ItemEvent.change, [value]);
            _this._popup.hide();
            _this.paint();
        });
        this.events.on(types_1.ItemEvent.afterValidate, function () {
            _this.config.$validationStatus = _this._isValid ? types_1.ValidationStatus.success : types_1.ValidationStatus.error;
            _this.paint();
        });
        this._popup.events.on(ts_popup_1.PopupEvents.afterHide, function () { return helper_1.isVerify(_this.config) && _this.validate(); });
    };
    DatePicker.prototype._getHandlers = function () {
        var _this = this;
        return {
            onfocus: function () {
                if (_this._popup.isVisible()) {
                    return;
                }
                var node = _this.getRootView().refs.input.el;
                _this._popup.show(node);
            },
            oninput: function (e) {
                var value = e.target.value;
                _this.events.fire(types_1.ItemEvent.input, [value]);
            },
            onchange: function (e) {
                var value = e.target.value;
                if (_this.config.editable && ts_calendar_1.stringToDate(value, _this.calendar.config.dateFormat, true)) {
                    _this.setValue(value);
                }
                else if (value === "") {
                    _this.clear();
                }
                else {
                    helper_1.isVerify(_this.config) && _this.validate();
                    _this.paint();
                }
            },
            onkeyup: function (e) {
                if (e.keyCode === 13) {
                    if (_this._popup.isVisible()) {
                        _this._popup.hide();
                    }
                    var node = _this.getRootView().refs.input.el;
                    node.blur();
                }
            },
        };
    };
    DatePicker.prototype._draw = function () {
        var _a = this.config, icon = _a.icon, required = _a.required, disabled = _a.disabled, placeholder = _a.placeholder, name = _a.name, id = _a.id, validation = _a.validation, editable = _a.editable;
        var value = this.config.value instanceof Date ? this.calendar.getValue() : this.config.value;
        return dom_1.el("div.dhx_form-group", {
            class: helper_1.getFormItemCss(this.config, Boolean(required) || Boolean(validation)),
        }, [
            this._drawLabel(),
            dom_1.el(".dhx_input__wrapper", [
                dom_1.el("div.dhx_input__container", {}, [
                    dom_1.el(".dhx_input__icon", {
                        class: icon || "dxi dxi-calendar-today",
                    }),
                    dom_1.el("input.dhx_input.dhx_input--icon-padding", {
                        _key: this._uid,
                        value: value,
                        type: "text",
                        _ref: "input",
                        required: required,
                        disabled: disabled,
                        placeholder: placeholder || "",
                        name: name || "",
                        id: id || this._uid,
                        onfocus: this._handlers.onfocus,
                        oninput: this._handlers.oninput,
                        onchange: this._handlers.onchange,
                        onkeyup: this._handlers.onkeyup,
                        autocomplete: "off",
                        readOnly: !editable,
                    }),
                ]),
                helper_1.getValidationMessage(this.config) &&
                    dom_1.el("span.dhx_input__caption", {}, helper_1.getValidationMessage(this.config)),
            ]),
        ]);
    };
    return DatePicker;
}(label_1.Label));
exports.DatePicker = DatePicker;


/***/ }),

/***/ "../ts-form/sources/elements/helper/label.ts":
/*!***************************************************!*\
  !*** ../ts-form/sources/elements/helper/label.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_popup_1 = __webpack_require__(/*! @dhx/ts-popup */ "../ts-popup/index.ts");
var Label = /** @class */ (function (_super) {
    __extends(Label, _super);
    function Label(container, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, container, config) || this;
        _this._handlers = __assign({ showHelper: function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this._helper.show(e.target, {
                    mode: _this.config.labelPosition === "left" ? "right" : "bottom",
                });
            } }, _this._getHandlers());
        var render = function () { return _this._draw(); };
        _this.mount(container, dom_1.create({ render: render }));
        return _this;
    }
    Label.prototype._getHandlers = function () {
        return {};
    };
    Label.prototype._init = function () {
        return;
    };
    Label.prototype._draw = function () {
        return this._drawLabel();
    };
    Label.prototype._drawLabel = function () {
        if (this.config.helpMessage) {
            if (this._helper) {
                this._helper.attachHTML(this.config.helpMessage);
            }
            else {
                this._helper = new ts_popup_1.Popup({
                    css: "dhx_tooltip dhx_tooltip--forced dhx_tooltip--light",
                });
                this._helper.attachHTML(this.config.helpMessage);
            }
        }
        var _a = this.config, id = _a.id, label = _a.label, labelWidth = _a.labelWidth, helpMessage = _a.helpMessage;
        var width = labelWidth ? labelWidth : "";
        return dom_1.el("label.dhx_label", {
            for: id || this._uid,
            style: { minWidth: width, maxWidth: width },
            class: helpMessage ? "dhx_label--with-help" : "",
        }, helpMessage
            ? [
                dom_1.el("span.dhx_label__holder", label),
                dom_1.el("span.dhx_label-help.dxi.dxi-help-circle-outline", {
                    tabindex: "0",
                    role: "button",
                    onclick: this._handlers.showHelper,
                }),
            ]
            : label);
    };
    return Label;
}(view_1.View));
exports.Label = Label;


/***/ }),

/***/ "../ts-form/sources/elements/input.ts":
/*!********************************************!*\
  !*** ../ts-form/sources/elements/input.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var helper_1 = __webpack_require__(/*! ../helper */ "../ts-form/sources/helper.ts");
var label_1 = __webpack_require__(/*! ./helper/label */ "../ts-form/sources/elements/helper/label.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-form/sources/types.ts");
var Input = /** @class */ (function (_super) {
    __extends(Input, _super);
    function Input(container, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, null, config) || this;
        _this.events = new events_1.EventSystem();
        _this._propsItem = [
            "inputType",
            "required",
            "validation",
            "icon",
            "placeholder",
            "autocomplete",
            "readOnly",
            "maxlength",
            "minlength",
            "min",
            "max",
            "step",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
        ];
        _this._props = __spreadArrays(helper_1.baseProps, _this._propsItem);
        _this._isValid = true;
        _this._initView(config);
        _this._initHandlers();
        return _this;
    }
    Input.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            core_1.isEmptyObj(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    Input.prototype.getProperties = function () {
        var obj = {};
        for (var key in this.config) {
            if (this._props.includes(key)) {
                obj[key] = this.config[key];
            }
        }
        return obj;
    };
    Input.prototype.show = function () {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [value])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [value]);
    };
    Input.prototype.hide = function (init) {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [value, init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [value, init]);
    };
    Input.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    Input.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    Input.prototype.enable = function () {
        this.config.disabled = false;
        this.paint();
    };
    Input.prototype.isDisabled = function () {
        return this.config.disabled;
    };
    Input.prototype.validate = function (validateValue) {
        var value = typeof validateValue === "undefined" ? this.getValue() : validateValue;
        if (!this.events.fire(types_1.ItemEvent.beforeValidate, [value]))
            return;
        this._isValid = this.config.validation
            ? helper_1.validateInput(value, this.config.validation)
            : helper_1.baseInputValidate(value, this.config);
        this.config.$validationStatus = this._isValid ? types_1.ValidationStatus.success : types_1.ValidationStatus.error;
        this.events.fire(types_1.ItemEvent.afterValidate, [value, this._isValid]);
        return this._isValid;
    };
    Input.prototype.clearValidate = function () {
        this.config.$validationStatus = types_1.ValidationStatus.pre;
        this.paint();
    };
    Input.prototype.clear = function () {
        if (this.config.value === "")
            return;
        this.config.value = "";
        this.events.fire(types_1.ItemEvent.change, [this.getValue()]);
    };
    Input.prototype.setValue = function (value) {
        if (typeof value === "undefined" || this.config.value === value)
            return;
        this.config.value = value;
        this.events.fire(types_1.ItemEvent.change, [this.getValue()]);
        helper_1.isVerify(this.config) && this.validate();
    };
    Input.prototype.getValue = function () {
        var _a = this.config, inputType = _a.inputType, value = _a.value;
        if (inputType === "number" && typeof value === "number") {
            return value;
        }
        if (inputType === "number" && typeof value === "string") {
            return value.length ? Number(value) : "";
        }
        if (typeof value === "string") {
            return value.length ? value : "";
        }
        return typeof value === "undefined" ? "" : String(value);
    };
    Input.prototype.focus = function () {
        var _this = this;
        dom_1.awaitRedraw().then(function () {
            _this.getRootView().refs.input.el.focus();
        });
    };
    Input.prototype._initView = function (config) {
        var _this = this;
        if (core_1.isEmptyObj(config)) {
            return;
        }
        this.config = {
            type: config.type,
            id: config.id,
            name: config.name,
            disabled: false,
            hidden: false,
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
            }
        }
        if (this.config.hidden) {
            dom_1.awaitRedraw().then(function () {
                _this.hide(true);
            });
        }
        this.paint();
    };
    Input.prototype._initHandlers = function () {
        var _this = this;
        this.events.on(types_1.ItemEvent.change, function () { return _this.paint(); });
        this.events.on(types_1.ItemEvent.afterValidate, function () {
            _this.config.$validationStatus = _this._isValid ? types_1.ValidationStatus.success : types_1.ValidationStatus.error;
            _this.paint();
        });
    };
    Input.prototype._getHandlers = function () {
        var _this = this;
        return {
            oninput: function (e) {
                var value = e.target.value.trim();
                _this.config.value = value;
                _this.events.fire(types_1.ItemEvent.input, [value]);
            },
            onchange: function (e) {
                var value = e.target.value.trim();
                _this.config.value = value;
                _this.events.fire(types_1.ItemEvent.change, [_this.getValue()]);
                helper_1.isVerify(_this.config) && _this.validate();
                _this.paint();
            },
        };
    };
    Input.prototype._draw = function () {
        var _a = this.config, id = _a.id, value = _a.value, disabled = _a.disabled, name = _a.name, icon = _a.icon, placeholder = _a.placeholder, required = _a.required, inputType = _a.inputType, validation = _a.validation, hidden = _a.hidden, autocomplete = _a.autocomplete, readOnly = _a.readOnly, maxlength = _a.maxlength, minlength = _a.minlength, max = _a.max, min = _a.min, step = _a.step;
        var visibility = hidden ? " dhx_form-group--hidden" : "";
        return dom_1.el("div.dhx_form-group", {
            class: helper_1.getFormItemCss(this.config, !!required || !!validation) + visibility,
        }, [
            this._drawLabel(),
            dom_1.el(".dhx_input__wrapper", {}, [
                dom_1.el("div.dhx_input__container", {}, [
                    this.config.icon
                        ? dom_1.el(".dhx_input__icon", {
                            class: this.config.icon,
                        })
                        : null,
                    dom_1.el("input.dhx_input", {
                        type: ["text", "number", "password"].includes(inputType) ? inputType : "text",
                        id: id || this._uid,
                        placeholder: placeholder || "",
                        value: core_1.isDefined(value) ? value : "",
                        name: name || "",
                        disabled: disabled,
                        required: required,
                        readOnly: readOnly,
                        maxlength: maxlength,
                        minlength: minlength,
                        max: max,
                        min: min,
                        step: step,
                        onblur: this._handlers.onblur,
                        oninput: this._handlers.oninput,
                        onchange: this._handlers.onchange,
                        class: icon ? "dhx_input--icon-padding" : "",
                        autocomplete: autocomplete ? "on" : "off",
                        _ref: "input",
                    }),
                ]),
                helper_1.getValidationMessage(this.config) &&
                    dom_1.el("span.dhx_input__caption", helper_1.getValidationMessage(this.config)),
            ]),
        ]);
    };
    return Input;
}(label_1.Label));
exports.Input = Input;


/***/ }),

/***/ "../ts-form/sources/elements/radioGroup.ts":
/*!*************************************************!*\
  !*** ../ts-form/sources/elements/radioGroup.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var ts_layout_1 = __webpack_require__(/*! @dhx/ts-layout */ "../ts-layout/index.ts");
var ts_popup_1 = __webpack_require__(/*! @dhx/ts-popup */ "../ts-popup/index.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var radiobutton_1 = __webpack_require__(/*! ./radiobutton */ "../ts-form/sources/elements/radiobutton.ts");
var helper_1 = __webpack_require__(/*! ../helper */ "../ts-form/sources/helper.ts");
var label_1 = __webpack_require__(/*! ./helper/label */ "../ts-form/sources/elements/helper/label.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-form/sources/types.ts");
var RadioGroup = /** @class */ (function (_super) {
    __extends(RadioGroup, _super);
    function RadioGroup(container, config) {
        var _this = _super.call(this, null, config) || this;
        _this.events = new events_1.EventSystem();
        _this._buttons = [];
        _this._isValid = true;
        _this._propsItem = [
            "required",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
            "options",
        ];
        _this._props = __spreadArrays(helper_1.baseProps, _this._propsItem);
        _this._initView(config);
        _this._initHandlers();
        _this.config.value && _this._setValue(_this.config.value);
        _this.clearValidate();
        if (_this.config.helpMessage) {
            _this._helper = new ts_popup_1.Popup({
                css: "dhx_tooltip dhx_tooltip--forced dhx_tooltip--light",
            });
            _this._helper.attachHTML(_this.config.helpMessage);
        }
        _this._handlers = {
            showHelper: function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this._helper.show(e.target);
            },
            cancelUnusefulClick: function (e) {
                e.preventDefault();
            },
        };
        var render = function () { return _this._draw(); };
        _this.mount(container, dom_1.create({ render: render }));
        return _this;
    }
    RadioGroup.prototype.destructor = function () {
        this._buttons.forEach(function (i) { return i.destructor(); });
        this.events.clear();
        this.unmount();
    };
    RadioGroup.prototype.setProperties = function (arg, props) {
        if (typeof arg === "undefined" ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        if (typeof arg === "object" && !core_1.isEmptyObj(arg)) {
            for (var key in arg) {
                if (this._props.includes(key)) {
                    this.config[key] = arg[key];
                }
            }
            if (arg.hasOwnProperty("options")) {
                this._initView(this.config);
                this._initHandlers();
            }
        }
        if (typeof arg === "string" && props && !core_1.isEmptyObj(props)) {
            var radio = this._buttons.find(function (item) { return item.config.id === arg; });
            radio && radio.setProperties(props);
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    RadioGroup.prototype.getProperties = function (id) {
        if (typeof id === "undefined") {
            var obj = {};
            for (var key in this.config) {
                if (this._props.includes(key)) {
                    obj[key] = this.config[key];
                }
            }
            return obj;
        }
        var radio = this._buttons.find(function (item) { return item.config.id === id; });
        return radio.getProperties();
    };
    RadioGroup.prototype.getValue = function () {
        var _this = this;
        this._buttons.forEach(function (element) {
            if (element.getValue()) {
                _this.config.value = element.getValue() || "";
            }
        });
        return this.config.value || "";
    };
    RadioGroup.prototype.setValue = function (value) {
        if (value === this.config.value)
            return;
        this._setValue(value);
        this.events.fire(types_1.ItemEvent.change, [value]);
        helper_1.isVerify(this.config) && this.validate();
    };
    RadioGroup.prototype.focus = function (id) {
        var _this = this;
        dom_1.awaitRedraw().then(function () {
            if (!_this._buttons.length) {
                return;
            }
            if (!id) {
                return _this._buttons[0].focus();
            }
            var radiobutton = _this._buttons.find(function (i) { return i.config.id === id; });
            if (!radiobutton) {
                return;
            }
            return radiobutton.focus();
        });
    };
    RadioGroup.prototype.show = function () {
        var hidden = this.config.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [this.getValue()])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [this.getValue()]);
    };
    RadioGroup.prototype.hide = function (init) {
        var hidden = this.config.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [this.getValue(), init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [this.getValue(), init]);
    };
    RadioGroup.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    RadioGroup.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    RadioGroup.prototype.enable = function () {
        this.config.disabled = false;
        this.paint();
    };
    RadioGroup.prototype.isDisabled = function () {
        return this.config.disabled;
    };
    RadioGroup.prototype.clear = function () {
        if (this.config.value === "")
            return;
        this._buttons.forEach(function (element) {
            element.clear();
        });
        this.config.value = "";
        this.events.fire(types_1.ItemEvent.change, [this.config.value]);
    };
    RadioGroup.prototype.validate = function () {
        var _this = this;
        if (!this.events.fire(types_1.ItemEvent.beforeValidate, [this.getValue()]))
            return;
        if (this.config.required) {
            this._isValid = this._buttons.some(function (element) { return _this.config.required && !!element.config.checked; });
        }
        this._buttons.forEach(function (element) {
            element.config.$validationStatus = _this._isValid
                ? types_1.ValidationStatus.success
                : types_1.ValidationStatus.error;
        });
        this.config.$validationStatus = this._isValid ? types_1.ValidationStatus.success : types_1.ValidationStatus.error;
        this.events.fire(types_1.ItemEvent.afterValidate, [this.getValue(), this._isValid]);
        return this._isValid;
    };
    RadioGroup.prototype.clearValidate = function () {
        this.config.$validationStatus = types_1.ValidationStatus.pre;
        this._buttons.map(function (element) {
            element.clearValidate();
        });
        this.paint();
    };
    RadioGroup.prototype._initView = function (config) {
        var _this = this;
        if (core_1.isEmptyObj(config) || core_1.isEmptyObj(config.options)) {
            return;
        }
        if (this.layout) {
            this.layout.destructor();
        }
        if (this._buttons.length) {
            this._buttons.forEach(function (button) {
                button.destructor();
            });
            this._buttons = [];
        }
        this.config = {
            type: config.type,
            id: config.id,
            name: config.name,
            disabled: false,
            hidden: false,
            options: {},
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
            }
        }
        if (this.config.hidden) {
            dom_1.awaitRedraw().then(function () {
                _this.hide(true);
            });
        }
        var radioButtonsConfig = this.config.options.rows || this.config.options.cols;
        radioButtonsConfig.map(function (option) {
            option.id = option.id || core_1.uid();
        });
        this.layout = new ts_layout_1.Layout(null, this.config.options);
        radioButtonsConfig.map(function (option) {
            var radiobutton = new radiobutton_1.RadioButton(null, __assign(__assign({}, option), { $disabled: config.disabled, $name: config.name, $required: config.required, css: config.css }));
            _this._buttons.push(radiobutton);
            _this.layout.getCell(option.id).attach(radiobutton);
            radiobutton.events.on(radiobutton_1.RadioButtonEvents.change, function () {
                _this._buttons.map(function (button) {
                    if (button.config.id !== radiobutton.config.id) {
                        button.setValue(false);
                    }
                });
                _this.events.fire(types_1.ItemEvent.change, [_this.getValue()]);
                helper_1.isVerify(_this.config) && _this.validate();
            });
        });
    };
    RadioGroup.prototype._initHandlers = function () {
        var _this = this;
        this.events.on(types_1.ItemEvent.change, function () {
            _this.config.value = _this.getValue();
            _this.paint();
        });
        this.events.on(types_1.ItemEvent.afterValidate, function () {
            _this.config.$validationStatus = _this._isValid ? types_1.ValidationStatus.success : types_1.ValidationStatus.error;
            _this.paint();
        });
    };
    RadioGroup.prototype._draw = function () {
        var _a = this.config, label = _a.label, labelWidth = _a.labelWidth, helpMessage = _a.helpMessage, required = _a.required, hidden = _a.hidden;
        var visibility = hidden ? " dhx_form-group--hidden" : "";
        return dom_1.el("div.dhx_form-group.dhx_form-group--radio-group", {
            class: helper_1.getFormItemCss(this.config, !!required) + visibility,
        }, [
            label || labelWidth || helpMessage || required ? this._drawLabel() : null,
            dom_1.el("div.dhx_radio-group--container", {}, [
                dom_1.inject(this.layout.getRootView()),
                required &&
                    helper_1.getValidationMessage(this.config) &&
                    dom_1.el("span.dhx_input__caption", helper_1.getValidationMessage(this.config)),
            ]),
        ]);
    };
    RadioGroup.prototype._setValue = function (value) {
        if (typeof value === "undefined" || this._buttons.findIndex(function (i) { return i.config.value === value; }) === -1)
            return;
        this._buttons.forEach(function (element) {
            value === element.config.value ? element.setValue(true) : element.setValue(false);
        });
    };
    return RadioGroup;
}(label_1.Label));
exports.RadioGroup = RadioGroup;


/***/ }),

/***/ "../ts-form/sources/elements/radiobutton.ts":
/*!**************************************************!*\
  !*** ../ts-form/sources/elements/radiobutton.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var helper_1 = __webpack_require__(/*! ../helper */ "../ts-form/sources/helper.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-form/sources/types.ts");
var RadioButtonEvents;
(function (RadioButtonEvents) {
    RadioButtonEvents["change"] = "change";
})(RadioButtonEvents = exports.RadioButtonEvents || (exports.RadioButtonEvents = {}));
var RadioButton = /** @class */ (function (_super) {
    __extends(RadioButton, _super);
    function RadioButton(container, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, container, config) || this;
        _this._propsItem = ["text"];
        _this._props = __spreadArrays(helper_1.baseProps, _this._propsItem);
        _this._handlers = {
            onchange: function (e) {
                _this.config.checked = e.target.checked;
                _this.events.fire(RadioButtonEvents.change, [e.target.checked]);
            },
        };
        _this.events = new events_1.EventSystem();
        var render = function () { return _this._draw(); };
        _this.mount(container, dom_1.create({ render: render }));
        return _this;
    }
    RadioButton.prototype.destructor = function () {
        this.events.clear();
        this.unmount();
    };
    RadioButton.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig || core_1.isEmptyObj(propertyConfig))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        this.paint();
    };
    RadioButton.prototype.getProperties = function () {
        var obj = {};
        for (var key in this.config) {
            if (this._props.includes(key)) {
                obj[key] = this.config[key];
            }
        }
        return obj;
    };
    RadioButton.prototype.getValue = function () {
        if (this.config.checked) {
            return this.config.value;
        }
    };
    RadioButton.prototype.setValue = function (checked) {
        this.config.checked = checked;
        this.paint();
    };
    RadioButton.prototype.focus = function () {
        var _this = this;
        dom_1.awaitRedraw().then(function () {
            _this.getRootView().refs.input.el.focus();
        });
    };
    RadioButton.prototype.disable = function () {
        this.config.$disabled = true;
        this.paint();
    };
    RadioButton.prototype.enable = function () {
        this.config.$disabled = false;
        this.paint();
    };
    RadioButton.prototype.isDisabled = function () {
        return this.config.$disabled;
    };
    RadioButton.prototype.clear = function () {
        this.config.checked = false;
        this.paint();
    };
    RadioButton.prototype.validate = function () {
        var isValid = false;
        if (this.config.checked) {
            isValid = true;
        }
        this.config.$validationStatus = isValid ? types_1.ValidationStatus.success : types_1.ValidationStatus.error;
        this.paint();
        return isValid;
    };
    RadioButton.prototype.clearValidate = function () {
        this.config.$validationStatus = types_1.ValidationStatus.pre;
        this.paint();
    };
    RadioButton.prototype._draw = function () {
        var _a = this.config, id = _a.id, value = _a.value, checked = _a.checked, $disabled = _a.$disabled, $name = _a.$name, $required = _a.$required, text = _a.text;
        return dom_1.el("label.dhx_radiobutton.dhx_form-group", {
            class: helper_1.getFormItemCss(this.config, !!$required),
        }, [
            dom_1.el("input.dhx_radiobutton__input", {
                type: "radio",
                id: id,
                value: value || "",
                name: $name || "",
                disabled: $disabled,
                checked: checked,
                onchange: this._handlers.onchange,
                required: $required,
                _ref: "input",
            }),
            dom_1.el("span.dhx_radiobutton__visual-input"),
            dom_1.el("span.dhx_text", [text]),
        ]);
    };
    return RadioButton;
}(view_1.View));
exports.RadioButton = RadioButton;


/***/ }),

/***/ "../ts-form/sources/elements/select.ts":
/*!*********************************************!*\
  !*** ../ts-form/sources/elements/select.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var label_1 = __webpack_require__(/*! ./helper/label */ "../ts-form/sources/elements/helper/label.ts");
var helper_1 = __webpack_require__(/*! ../helper */ "../ts-form/sources/helper.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-form/sources/types.ts");
var Select = /** @class */ (function (_super) {
    __extends(Select, _super);
    function Select(container, config) {
        var _this = _super.call(this, null, config) || this;
        _this.events = new events_1.EventSystem();
        _this._isValid = true;
        _this._propsItem = [
            "validation",
            "icon",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
        ];
        _this._props = __spreadArrays(helper_1.baseProps, _this._propsItem);
        _this._initView(config);
        _this._initHandlers();
        return _this;
    }
    Select.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            core_1.isEmptyObj(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    Select.prototype.getProperties = function () {
        var obj = {};
        for (var key in this.config) {
            if (this._props.includes(key)) {
                obj[key] = this.config[key];
            }
        }
        return obj;
    };
    Select.prototype.show = function () {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [value])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [value]);
    };
    Select.prototype.hide = function (init) {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [value, init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [value, init]);
    };
    Select.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    Select.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    Select.prototype.enable = function () {
        this.config.disabled = false;
        this.paint();
    };
    Select.prototype.isDisabled = function () {
        return this.config.disabled;
    };
    Select.prototype.validate = function () {
        var _a = this.config, value = _a.value, validation = _a.validation;
        if (!this.events.fire(types_1.ItemEvent.beforeValidate, [value]))
            return;
        this._isValid = validation ? this.config.validation(value) : typeof value !== "undefined";
        this.events.fire(types_1.ItemEvent.afterValidate, [value, this._isValid]);
        return this._isValid;
    };
    Select.prototype.clearValidate = function () {
        this.config.$validationStatus = types_1.ValidationStatus.pre;
        this.paint();
    };
    Select.prototype.clear = function () {
        if (this.config.value === this.config.options[0].value)
            return;
        this.config.value = this.config.options[0].value;
        this.events.fire(types_1.ItemEvent.change, [this.getValue()]);
    };
    Select.prototype.setValue = function (value) {
        if (typeof value === "undefined" ||
            value === this.config.value ||
            this.config.options.findIndex(function (i) { return i.value === value; }) === -1)
            return;
        this.config.value = value;
        this.events.fire(types_1.ItemEvent.change, [value]);
        helper_1.isVerify(this.config) && this.validate();
    };
    Select.prototype.focus = function () {
        var _this = this;
        dom_1.awaitRedraw().then(function () {
            _this.getRootView().refs.select.el.focus();
        });
    };
    Select.prototype.getValue = function () {
        return this.config.value;
    };
    Select.prototype.setOptions = function (options) {
        if (!options || !options.length) {
            throw new Error("Function argument cannot be empty, for more info check documentation https://docs.dhtmlx.com/suite/form__select.html#addingselect");
        }
        this._checkOptions(options);
        this.config.options = __spreadArrays(options);
        this.config.value = this.config.options[0].value;
        this.events.fire(types_1.ItemEvent.changeOptions, [__spreadArrays(options)]);
        this.paint();
    };
    Select.prototype.getOptions = function () {
        return this.config.options;
    };
    Select.prototype._initView = function (config) {
        var _this = this;
        if (core_1.isEmptyObj(config)) {
            return;
        }
        this._checkOptions(config.options);
        this.config = {
            type: config.type,
            id: config.id,
            name: config.name,
            options: config.options,
            disabled: false,
            hidden: false,
            value: config.options[0].value,
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
            }
        }
        if (this.config.hidden) {
            dom_1.awaitRedraw().then(function () {
                _this.hide(true);
            });
        }
        this.paint();
    };
    Select.prototype._initHandlers = function () {
        var _this = this;
        this.events.on(types_1.ItemEvent.afterValidate, function () {
            _this.config.$validationStatus = _this._isValid ? types_1.ValidationStatus.success : types_1.ValidationStatus.error;
            _this.paint();
        });
        this.events.on(types_1.ItemEvent.changeOptions, function () {
            _this.events.fire(types_1.ItemEvent.change, [_this.getValue()]);
            helper_1.isVerify(_this.config) && _this.validate();
        });
        this.events.on(types_1.ItemEvent.change, function () { return _this.paint(); });
    };
    Select.prototype._getHandlers = function () {
        var _this = this;
        return {
            onchange: function (e) {
                var value = _this.config.options
                    .map(function (o) { return o.value; })
                    .find(function (v) { return v == e.target.value; });
                _this.config.value = value;
                _this.events.fire(types_1.ItemEvent.change, [value]);
                helper_1.isVerify(_this.config) && _this.validate();
            },
        };
    };
    Select.prototype._draw = function () {
        var _a = this.config, id = _a.id, options = _a.options, icon = _a.icon, value = _a.value, validation = _a.validation;
        return dom_1.el(".dhx_form-group", {
            class: helper_1.getFormItemCss(this.config, Boolean(validation)),
        }, [
            this._drawLabel(),
            dom_1.el(".dhx_input__wrapper", {}, [
                dom_1.el("div.dhx_input__container", {}, [
                    dom_1.el(".dhx_input__icon", {
                        class: icon ? icon : "dxi dxi-menu-down",
                    }),
                    dom_1.el("select", {
                        id: id,
                        class: "dhx_select dhx_input",
                        onchange: this._handlers.onchange,
                        _ref: "select",
                    }, options.length &&
                        options.map(function (option) {
                            return dom_1.el("option", {
                                value: option.value,
                                disabled: option.disabled,
                                selected: value === option.value,
                            }, option.content);
                        })),
                ]),
                helper_1.getValidationMessage(this.config) &&
                    dom_1.el("span.dhx_input__caption", helper_1.getValidationMessage(this.config)),
            ]),
        ]);
    };
    Select.prototype._checkOptions = function (options) {
        if (options.length === 0) {
            throw new Error("Property options* cannot be empty, for more info check documentation https://docs.dhtmlx.com/suite/form__select.html#addingselect");
        }
        options.forEach(function (item) {
            if (!item.hasOwnProperty("value") || !item.hasOwnProperty("content")) {
                throw new Error("The object must contain two required properties value and content, for more info check documentation https://docs.dhtmlx.com/suite/form__select.html#addingselect");
            }
        });
    };
    return Select;
}(label_1.Label));
exports.Select = Select;


/***/ }),

/***/ "../ts-form/sources/elements/simplevault.ts":
/*!**************************************************!*\
  !*** ../ts-form/sources/elements/simplevault.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var ts_vault_1 = __webpack_require__(/*! @dhx/ts-vault */ "../ts-vault/index.ts");
var ts_popup_1 = __webpack_require__(/*! @dhx/ts-popup */ "../ts-popup/index.ts");
var helper_1 = __webpack_require__(/*! ../helper */ "../ts-form/sources/helper.ts");
var en_1 = __webpack_require__(/*! ../locales/en */ "../ts-form/sources/locales/en.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-form/sources/types.ts");
var SimpleVault = /** @class */ (function (_super) {
    __extends(SimpleVault, _super);
    function SimpleVault(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this._isValid = true;
        _this._propsItem = [
            "require",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
        ];
        _this._propsSimpleVault = ["target", "singleRequest", "fieldName", "params"];
        _this._props = __spreadArrays(helper_1.baseProps, _this._propsItem, _this._propsSimpleVault);
        _this.events = new events_1.EventSystem(_this);
        _this.data = new ts_data_1.DataCollection();
        _this._uploader = new ts_vault_1.Uploader(__assign(__assign({}, config), { autosend: false, fieldName: config.fieldName || config.name || config.id }), _this.data, _this.data.events);
        _this._initView(config);
        _this._initHandlers();
        _this._handlers = {
            add: function (e) {
                if (_this.config.disabled) {
                    return;
                }
                e.preventDefault();
                _this._uploader.selectFile();
            },
            remove: function (e) {
                if (_this.config.disabled) {
                    return;
                }
                var id = html_1.locate(e);
                if (!id) {
                    return;
                }
                _this.data.remove(id);
            },
            ondragover: function (e) {
                var types = e.dataTransfer.types;
                for (var _i = 0, types_2 = types; _i < types_2.length; _i++) {
                    var type = types_2[_i];
                    if (type !== "Files" && type !== "application/x-moz-file") {
                        return;
                    }
                }
                if (_this._dragoverTimeout) {
                    clearTimeout(_this._dragoverTimeout);
                }
                else {
                    _this.paint();
                }
                _this._dragover = true;
                _this._dragoverTimeout = setTimeout(function () {
                    _this._dragover = false;
                    _this._dragoverTimeout = null;
                    _this.paint();
                }, 150);
            },
            showHelper: function (e) {
                e.stopPropagation();
                e.preventDefault();
                _this._helper.show(e.target);
            },
        };
        var render = function () { return _this._draw(); };
        _this.mount(container, dom_1.create({ render: render }));
        return _this;
    }
    SimpleVault.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            core_1.isEmptyObj(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
                if (this._propsSimpleVault.includes(key)) {
                    this._uploader.config[key] = propertyConfig[key];
                }
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    SimpleVault.prototype.getProperties = function () {
        var obj = {};
        for (var key in this.config) {
            if (this._props.includes(key)) {
                obj[key] = this.config[key];
            }
        }
        return obj;
    };
    SimpleVault.prototype.show = function () {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [value])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [value]);
    };
    SimpleVault.prototype.hide = function (init) {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [value, init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [value, init]);
    };
    SimpleVault.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    SimpleVault.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    SimpleVault.prototype.enable = function () {
        this.config.disabled = false;
        this.paint();
    };
    SimpleVault.prototype.isDisabled = function () {
        return this.config.disabled;
    };
    SimpleVault.prototype.validate = function () {
        var _a = this.config, required = _a.required, value = _a.value;
        if (!this.events.fire(types_1.ItemEvent.beforeValidate, [value]))
            return;
        this._isValid = !required || this.data.getLength() > 0;
        this.events.fire(types_1.ItemEvent.afterValidate, [value, this._isValid]);
        return this._isValid;
    };
    SimpleVault.prototype.clearValidate = function () {
        this.config.$validationStatus = types_1.ValidationStatus.pre;
        this.paint();
    };
    SimpleVault.prototype.clear = function () {
        if (this.getValue().length === 0)
            return;
        this.data.removeAll();
        this.paint();
    };
    SimpleVault.prototype.getValue = function () {
        return this.data.serialize();
    };
    SimpleVault.prototype.selectFile = function () {
        this._uploader.selectFile();
    };
    SimpleVault.prototype.send = function (params) {
        if (helper_1.isVerify(this.config) && !this.validate()) {
            return;
        }
        this._uploader.send(params);
    };
    SimpleVault.prototype.setValue = function (value) {
        if (!value.length) {
            return;
        }
        this.data.parse(value);
        helper_1.isVerify(this.config) && this.validate();
    };
    SimpleVault.prototype._initView = function (config) {
        var _this = this;
        if (core_1.isEmptyObj(config)) {
            return;
        }
        this.config = {
            type: config.type,
            id: config.id,
            name: config.name,
            disabled: false,
            hidden: false,
            value: [],
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
            }
        }
        if (this.config.hidden) {
            dom_1.awaitRedraw().then(function () {
                _this.hide(true);
            });
        }
        this.config.value.length && this.setValue(this.config.value);
        this.paint();
    };
    SimpleVault.prototype._initHandlers = function () {
        var _this = this;
        this.data.events.on(types_1.ItemEvent.change, function (_id, method) {
            var value = (_this.config.value = _this.getValue());
            _this.events.fire(types_1.ItemEvent.change, [value]);
            method && helper_1.isVerify(_this.config) && _this.validate();
            _this.paint();
        });
        this.events.on(types_1.ItemEvent.afterValidate, function () {
            _this.config.$validationStatus = _this._isValid ? types_1.ValidationStatus.success : types_1.ValidationStatus.error;
            _this.paint();
        });
        this._uploader.events.on("beforeUploadFile", function (file) {
            return _this.events.fire(types_1.ItemEvent.beforeUploadFile, [file, _this.config.value]);
        });
        this._uploader.events.on("uploadBegin", function (file) {
            _this.events.fire(types_1.ItemEvent.uploadBegin, [file, _this.config.value]);
        });
        this._uploader.events.on("uploadComplete", function (file) {
            _this.events.fire(types_1.ItemEvent.uploadComplete, [file, _this.config.value]);
        });
        this._uploader.events.on("uploadFail", function (file) {
            _this.events.fire(types_1.ItemEvent.uploadFail, [file, _this.config.value]);
        });
        this._uploader.events.on("uploadFile", function (file, extra) {
            _this.events.fire(types_1.ItemEvent.uploadFile, [file, _this.config.value, extra]);
        });
        this._uploader.events.on("uploadProgress", function (file) {
            _this.events.fire(types_1.ItemEvent.uploadProgress, [file, _this.config.value]);
        });
    };
    SimpleVault.prototype._draw = function () {
        var _this = this;
        if (this.config.helpMessage) {
            if (this._helper) {
                this._helper.attachHTML(this.config.helpMessage);
            }
            else {
                this._helper = new ts_popup_1.Popup({
                    css: "dhx_tooltip dhx_tooltip--forced dhx_tooltip--light",
                });
                this._helper.attachHTML(this.config.helpMessage);
            }
        }
        var files = this.data.getLength()
            ? dom_1.el("ul.dhx_simplevault__files.dhx_simplevault-files", {
                class: this.config.$vaultHeight ? "" : "dhx_simplevault-files__fixed",
            }, this.data.map(function (file) {
                return dom_1.el("li.dhx_simplevault-files__item", [
                    dom_1.el("span.dhx_simplevault-files__item-name", (file.file && file.file.name) || file.name),
                    dom_1.el(".dhx_button.dhx_simplevault-files__delete.dhx_button--icon.dhx_button--view_link.dhx_button--size_small.dhx_button--color_secondary.dhx_button--circle", {
                        dhx_id: file.id,
                        onclick: _this._handlers.remove,
                    }, [dom_1.el("span.dxi.dxi-delete-forever")]),
                ]);
            }))
            : null;
        var _a = this.config, id = _a.id, labelPosition = _a.labelPosition, label = _a.label, labelWidth = _a.labelWidth, helpMessage = _a.helpMessage, disabled = _a.disabled, required = _a.required, validation = _a.validation;
        var width = labelPosition === "left" && labelWidth ? labelWidth : "";
        return dom_1.el(".dhx_form-group.dhx_form-group--simplevault", {
            class: helper_1.getFormItemCss(this.config, !!required || !!validation),
        }, [
            dom_1.el("label.dhx_label", {
                for: id || this._uid,
                style: { minWidth: width, maxWidth: width },
                class: helpMessage ? "dhx_label--with-help" : "",
                onclick: this._handlers.add,
            }, helpMessage
                ? [
                    dom_1.el("span.dhx_label__holder", label),
                    dom_1.el("span.dhx_label-help.dxi.dxi-help-circle-outline", {
                        tabindex: "0",
                        role: "button",
                        onclick: this._handlers.showHelper,
                    }),
                ]
                : label),
            dom_1.el(".dhx_input__wrapper", [
                dom_1.el("div", {
                    _hooks: {
                        didInsert: function (node) {
                            _this._uploader.linkDropArea(node.el);
                        },
                    },
                    ondragover: this._handlers.ondragover,
                    class: "dhx_simplevault" + (this._dragover ? " dhx_simplevault--on-drag" : ""),
                }, [
                    dom_1.el("div.dhx_simplevault-loader", [
                        dom_1.el("span.dhx_simplevault__icon.dxi.dxi-vault"),
                    ]),
                    dom_1.el(".dhx_simplevault__drop-area", [
                        dom_1.el("input.dhx_simplevault__input", {
                            type: "file",
                            id: id,
                            disabled: disabled,
                        }),
                        dom_1.el("span.dhx_simplevault__icon.dxi.dxi-vault"),
                        dom_1.el("span.dhx_simplevault__title", [
                            dom_1.el("span", en_1.default.simpleVaultText),
                            dom_1.el("br"),
                            dom_1.el("label.dhx_simplevault__label", {
                                onclick: this._handlers.add,
                                for: id,
                            }, " " + en_1.default.simpleVaultLabel),
                        ]),
                    ]),
                    files,
                ]),
                helper_1.getValidationMessage(this.config) &&
                    dom_1.el("span.dhx_input__caption", {}, helper_1.getValidationMessage(this.config)),
            ]),
        ]);
    };
    return SimpleVault;
}(view_1.View));
exports.SimpleVault = SimpleVault;


/***/ }),

/***/ "../ts-form/sources/elements/sliderform.ts":
/*!*************************************************!*\
  !*** ../ts-form/sources/elements/sliderform.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var ts_slider_1 = __webpack_require__(/*! @dhx/ts-slider */ "../ts-slider/index.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var label_1 = __webpack_require__(/*! ./helper/label */ "../ts-form/sources/elements/helper/label.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-form/sources/types.ts");
var helper_1 = __webpack_require__(/*! ../helper */ "../ts-form/sources/helper.ts");
var SliderForm = /** @class */ (function (_super) {
    __extends(SliderForm, _super);
    function SliderForm(container, config) {
        var _this = _super.call(this, null, config) || this;
        _this.events = new events_1.EventSystem();
        _this._propsItem = ["label", "labelWidth", "labelPosition", "hiddenLabel", "helpMessage"];
        _this._propsCombo = [
            "min",
            "max",
            "step",
            "mode",
            "range",
            "inverse",
            "tooltip",
            "tick",
            "tickTemplate",
            "majorTick",
        ];
        _this._props = __spreadArrays(helper_1.baseProps, _this._propsItem, _this._propsCombo);
        _this._initView(config);
        _this._initHandlers();
        var render = function () { return _this._drawSlider(); };
        _this.mount(container, dom_1.create({ render: render }));
        return _this;
    }
    SliderForm.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            core_1.isEmptyObj(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        this._initView(this.config);
        this._initHandlers();
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.slider.paint();
        this.paint();
    };
    SliderForm.prototype.getProperties = function () {
        var obj = {};
        for (var key in this.config) {
            if (this._props.includes(key)) {
                obj[key] = this.config[key];
            }
        }
        return obj;
    };
    SliderForm.prototype.show = function () {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [value])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [value]);
    };
    SliderForm.prototype.hide = function (init) {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [value, init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [value, init]);
    };
    SliderForm.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    SliderForm.prototype.disable = function () {
        this.config.disabled = true;
        this.slider.disable();
        this.paint();
    };
    SliderForm.prototype.enable = function () {
        this.config.disabled = false;
        this.slider.enable();
        this.paint();
    };
    SliderForm.prototype.isDisabled = function () {
        return this.config.disabled;
    };
    SliderForm.prototype.clear = function () {
        var _a = this.config, value = _a.value, min = _a.min;
        if (value[0] === min)
            return;
        this.slider.setValue(min);
    };
    SliderForm.prototype.getValue = function () {
        return this.slider.getValue();
    };
    SliderForm.prototype.setValue = function (value) {
        if (typeof value === "undefined" || value === this.config.value)
            return;
        this.slider.setValue(value);
    };
    SliderForm.prototype.getWidget = function () {
        return this.slider;
    };
    SliderForm.prototype._initView = function (config) {
        var _this = this;
        if (core_1.isEmptyObj(config)) {
            return;
        }
        if (this.slider) {
            this.slider.destructor();
        }
        var sliderConfig = {
            type: config.type,
            id: config.id,
            name: config.name,
            mode: "horizontal",
            min: 0,
            max: 100,
            step: 1,
            tooltip: true,
            disabled: false,
            hidden: false,
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                sliderConfig[key] = config[key];
            }
        }
        this.config = __assign({ type: this.config.type }, sliderConfig);
        this.slider = new ts_slider_1.Slider(null, sliderConfig);
        this.config.disabled && this.slider.disable();
        this.config.value = this.slider.getValue();
        if (this.config.hidden) {
            dom_1.awaitRedraw().then(function () {
                _this.hide(true);
            });
        }
    };
    SliderForm.prototype._initHandlers = function () {
        var _this = this;
        this.slider.events.on(ts_slider_1.SliderEvents.change, function () {
            var value = (_this.config.value = _this.slider.getValue());
            _this.events.fire(types_1.ItemEvent.change, [value]);
            _this.paint();
        });
    };
    SliderForm.prototype._getRootView = function () {
        this.slider.paint();
        return this.slider.getRootView();
    };
    SliderForm.prototype._drawSlider = function () {
        return dom_1.el("div.dhx_form-group", {}, [dom_1.inject(this._getRootView())]);
    };
    return SliderForm;
}(label_1.Label));
exports.SliderForm = SliderForm;


/***/ }),

/***/ "../ts-form/sources/elements/spacer.ts":
/*!*********************************************!*\
  !*** ../ts-form/sources/elements/spacer.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-form/sources/types.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var helper_1 = __webpack_require__(/*! ../helper */ "../ts-form/sources/helper.ts");
var Spacer = /** @class */ (function (_super) {
    __extends(Spacer, _super);
    function Spacer(container, config) {
        var _this = _super.call(this, container, __assign({ disabled: false, hidden: false }, config)) || this;
        _this.events = new events_1.EventSystem();
        if (_this.config.hidden) {
            dom_1.awaitRedraw().then(function () {
                _this.hide(true);
            });
        }
        var render = function () { return _this._draw(); };
        _this.mount(container, dom_1.create({ render: render }));
        return _this;
    }
    Spacer.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            core_1.isEmptyObj(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (helper_1.baseProps.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    Spacer.prototype.getProperties = function () {
        var obj = {};
        for (var key in this.config) {
            if (helper_1.baseProps.includes(key)) {
                obj[key] = this.config[key];
            }
        }
        return obj;
    };
    Spacer.prototype.show = function () {
        var hidden = this.config.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [undefined])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [undefined]);
    };
    Spacer.prototype.hide = function (init) {
        var hidden = this.config.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [undefined, init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [undefined, init]);
    };
    Spacer.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    Spacer.prototype._draw = function () {
        return dom_1.el("div");
    };
    return Spacer;
}(view_1.View));
exports.Spacer = Spacer;


/***/ }),

/***/ "../ts-form/sources/elements/textarea.ts":
/*!***********************************************!*\
  !*** ../ts-form/sources/elements/textarea.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var helper_1 = __webpack_require__(/*! ../helper */ "../ts-form/sources/helper.ts");
var input_1 = __webpack_require__(/*! ./input */ "../ts-form/sources/elements/input.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-form/sources/types.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var Textarea = /** @class */ (function (_super) {
    __extends(Textarea, _super);
    function Textarea() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._propsItem = [
            "required",
            "validation",
            "placeholder",
            "readOnly",
            "maxlength",
            "minlength",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
        ];
        _this._props = __spreadArrays(helper_1.baseProps, _this._propsItem);
        return _this;
    }
    Textarea.prototype.focus = function () {
        var _this = this;
        dom_1.awaitRedraw().then(function () {
            _this.getRootView().refs.textarea.el.focus();
        });
    };
    Textarea.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            core_1.isEmptyObj(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    Textarea.prototype.getProperties = function () {
        var obj = {};
        for (var key in this.config) {
            if (this._props.includes(key)) {
                obj[key] = this.config[key];
            }
        }
        return obj;
    };
    Textarea.prototype._draw = function () {
        var _a = this.config, id = _a.id, value = _a.value, disabled = _a.disabled, name = _a.name, placeholder = _a.placeholder, required = _a.required, resizable = _a.resizable, readOnly = _a.readOnly, validation = _a.validation, maxlength = _a.maxlength, minlength = _a.minlength;
        return dom_1.el("div.dhx_form-group.dhx_form-group--textarea", {
            class: helper_1.getFormItemCss(this.config, Boolean(required) || Boolean(validation)),
        }, [
            this._drawLabel(),
            dom_1.el(".dhx_input__wrapper", [
                dom_1.el("textarea.dhx_input.dhx_input--textarea", {
                    type: "text",
                    id: id,
                    placeholder: placeholder || "",
                    value: core_1.isDefined(value) ? value : "",
                    name: name || "",
                    disabled: disabled,
                    required: required,
                    readOnly: readOnly,
                    maxlength: maxlength,
                    minlength: minlength,
                    onblur: this._handlers.onblur,
                    oninput: this._handlers.oninput,
                    onchange: this._handlers.onchange,
                    style: {
                        resize: resizable ? "both" : "none",
                    },
                    _ref: "textarea",
                }),
                helper_1.getValidationMessage(this.config) &&
                    dom_1.el("span.dhx_input__caption", {}, helper_1.getValidationMessage(this.config)),
            ]),
        ]);
    };
    return Textarea;
}(input_1.Input));
exports.Textarea = Textarea;


/***/ }),

/***/ "../ts-form/sources/elements/textinput.ts":
/*!************************************************!*\
  !*** ../ts-form/sources/elements/textinput.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var helper_1 = __webpack_require__(/*! ../helper */ "../ts-form/sources/helper.ts");
var input_1 = __webpack_require__(/*! ./input */ "../ts-form/sources/elements/input.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-form/sources/types.ts");
var Text = /** @class */ (function (_super) {
    __extends(Text, _super);
    function Text() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._propsItem = [
            "inputType",
            "required",
            "validation",
            "icon",
            "placeholder",
            "autocomplete",
            "readOnly",
            "maxlength",
            "minlength",
            "min",
            "max",
            "step",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
        ];
        _this._props = __spreadArrays(helper_1.baseProps, _this._propsItem);
        return _this;
    }
    Text.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            core_1.isEmptyObj(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.paint();
    };
    Text.prototype.getProperties = function () {
        var obj = {};
        for (var key in this.config) {
            if (this._props.includes(key)) {
                obj[key] = this.config[key];
            }
        }
        return obj;
    };
    Text.prototype.focus = function () {
        var _this = this;
        dom_1.awaitRedraw().then(function () {
            _this.getRootView().refs.input.el.focus();
        });
    };
    Text.prototype._draw = function () {
        var _a = this.config, id = _a.id, value = _a.value, name = _a.name, inputType = _a.inputType;
        return dom_1.el("div.dhx_form-group.dhx_form-group--textinput", {
            class: helper_1.getFormItemCss(this.config),
        }, [
            this._drawLabel(),
            dom_1.el(".dhx_input__wrapper", [
                dom_1.el("input.dhx_input.dhx_input--textinput", {
                    type: ["text", "number", "password"].includes(inputType) ? inputType : "text",
                    readOnly: true,
                    id: id,
                    value: core_1.isDefined(value) ? value : "",
                    name: name,
                    _ref: "input",
                }),
            ]),
        ]);
    };
    return Text;
}(input_1.Input));
exports.Text = Text;


/***/ }),

/***/ "../ts-form/sources/elements/timeinput.ts":
/*!************************************************!*\
  !*** ../ts-form/sources/elements/timeinput.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts_timepicker_1 = __webpack_require__(/*! @dhx/ts-timepicker */ "../ts-timepicker/index.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var label_1 = __webpack_require__(/*! ./helper/label */ "../ts-form/sources/elements/helper/label.ts");
var ts_popup_1 = __webpack_require__(/*! @dhx/ts-popup */ "../ts-popup/index.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-form/sources/types.ts");
var helper_1 = __webpack_require__(/*! ../helper */ "../ts-form/sources/helper.ts");
var TimePicker = /** @class */ (function (_super) {
    __extends(TimePicker, _super);
    function TimePicker(container, config) {
        var _this = _super.call(this, null, config) || this;
        _this.events = new events_1.EventSystem();
        _this._isValid = true;
        _this._propsItem = [
            "require",
            "validation",
            "icon",
            "placeholder",
            "editable",
            "label",
            "labelWidth",
            "labelPosition",
            "hiddenLabel",
            "helpMessage",
            "preMessage",
            "successMessage",
            "errorMessage",
        ];
        _this._propsTimepicker = ["timeFormat", "controls", "valueFormat"];
        _this._props = __spreadArrays(helper_1.baseProps, _this._propsItem, _this._propsTimepicker);
        _this._initView(config);
        _this._initHandlers();
        var render = function () { return _this._draw(); };
        _this.mount(container, dom_1.create({ render: render }));
        return _this;
    }
    TimePicker.prototype.setProperties = function (propertyConfig) {
        if (!propertyConfig ||
            core_1.isEmptyObj(propertyConfig) ||
            !this.events.fire(types_1.ItemEvent.beforeChangeProperties, [this.getProperties()]))
            return;
        for (var key in propertyConfig) {
            if (this._props.includes(key)) {
                this.config[key] = propertyConfig[key];
                if (this._propsTimepicker.includes(key)) {
                    this.timepicker.config[key] = propertyConfig[key];
                    if (key === "controls") {
                        if (this.timepicker && this._popup) {
                            this.timepicker.destructor();
                            this.timepicker = new ts_timepicker_1.Timepicker(null, this.config);
                            this._popup.attach(this.timepicker);
                            this.timepicker.events.clear();
                            this._popup.events.clear();
                            this._initHandlers();
                        }
                    }
                }
            }
        }
        this.events.fire(types_1.ItemEvent.afterChangeProperties, [this.getProperties()]);
        this.timepicker.paint();
        this.paint();
    };
    TimePicker.prototype.getProperties = function () {
        var obj = {};
        for (var key in this.config) {
            if (this._props.includes(key)) {
                obj[key] = this.config[key];
            }
        }
        return obj;
    };
    TimePicker.prototype.show = function () {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if (!hidden || !this.events.fire(types_1.ItemEvent.beforeShow, [value])) {
            return;
        }
        this.config.hidden = false;
        this.events.fire(types_1.ItemEvent.afterShow, [value]);
    };
    TimePicker.prototype.hide = function (init) {
        var _a = this.config, value = _a.value, hidden = _a.hidden;
        if ((hidden && !init) || !this.events.fire(types_1.ItemEvent.beforeHide, [value, init])) {
            return;
        }
        this.config.hidden = true;
        this.events.fire(types_1.ItemEvent.afterHide, [value, init]);
    };
    TimePicker.prototype.isVisible = function () {
        return !this.config.hidden;
    };
    TimePicker.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    TimePicker.prototype.enable = function () {
        this.config.disabled = false;
        this.paint();
    };
    TimePicker.prototype.isDisabled = function () {
        return this.config.disabled;
    };
    TimePicker.prototype.validate = function (validateValue) {
        var value = typeof validateValue === "undefined" ? this.getValue() : validateValue;
        if (!this.events.fire(types_1.ItemEvent.beforeValidate, [value]))
            return;
        this._isValid = this.config.validation
            ? this.config.validation(value)
            : helper_1.isTimeFormat(value, this.config.timeFormat);
        this.events.fire(types_1.ItemEvent.afterValidate, [value, this._isValid]);
        return this._isValid;
    };
    TimePicker.prototype.clearValidate = function () {
        this.config.$validationStatus = types_1.ValidationStatus.pre;
        this.paint();
    };
    TimePicker.prototype.setValue = function (value) {
        if (typeof value === "undefined" || value === this.config.value)
            return;
        this.timepicker.setValue(value);
        if (this.config.controls) {
            var value_1 = (this.config.value = this.timepicker.getValue());
            this.events.fire(types_1.ItemEvent.change, [value_1]);
            helper_1.isVerify(this.config) && this.validate();
            this.paint();
        }
    };
    TimePicker.prototype.getValue = function () {
        return this.config.value || "";
    };
    TimePicker.prototype.focus = function () {
        var _this = this;
        dom_1.awaitRedraw().then(function () {
            _this.getRootView().refs.input.el.focus();
        });
    };
    TimePicker.prototype.clear = function () {
        if (this.config.value === "")
            return;
        this._clear();
    };
    TimePicker.prototype.getWidget = function () {
        return this.timepicker;
    };
    TimePicker.prototype._initView = function (config) {
        var _this = this;
        if (core_1.isEmptyObj(config)) {
            return;
        }
        if (this.timepicker) {
            this.timepicker.destructor();
        }
        if (this._popup) {
            this._popup.destructor();
        }
        this.config = {
            type: config.type,
            id: config.id,
            name: config.name,
            disabled: false,
            editable: false,
            hidden: false,
            value: "",
        };
        for (var key in config) {
            if (key !== "id" && key !== "type" && key !== "name") {
                this.config[key] = config[key];
            }
        }
        this._popup = new ts_popup_1.Popup({ css: "dhx_widget--border-shadow" });
        this.timepicker = new ts_timepicker_1.Timepicker(null, config);
        this._popup.attach(this.timepicker);
        if (this.config.hidden) {
            dom_1.awaitRedraw().then(function () {
                _this.hide(true);
            });
        }
    };
    TimePicker.prototype._initHandlers = function () {
        var _this = this;
        this.events.on(types_1.ItemEvent.afterValidate, function () {
            _this.config.$validationStatus = _this._isValid ? types_1.ValidationStatus.success : types_1.ValidationStatus.error;
            _this.paint();
        });
        if (this.config.controls) {
            this.timepicker.events.on(ts_timepicker_1.TimepickerEvents.close, function () {
                _this._popup.hide();
            });
            this.timepicker.events.on(ts_timepicker_1.TimepickerEvents.afterApply, function () {
                var value = (_this.config.value = _this.timepicker.getValue());
                _this.events.fire(types_1.ItemEvent.change, [value]);
                _this._popup.hide();
                helper_1.isVerify(_this.config) && _this.validate();
                _this.paint();
            });
            this._popup.events.on(ts_popup_1.PopupEvents.afterHide, function () {
                if (_this.config.value && _this.config.value !== _this.timepicker.getValue()) {
                    _this.timepicker.setValue(_this.config.value);
                }
                else if (_this.config.value === "") {
                    _this._clear(true);
                }
                _this.paint();
            });
        }
        else {
            this.timepicker.events.on(ts_timepicker_1.TimepickerEvents.change, function () {
                var value = (_this.config.value = _this.timepicker.getValue());
                _this.events.fire(types_1.ItemEvent.change, [value]);
                _this.paint();
            });
            this._popup.events.on(ts_popup_1.PopupEvents.afterHide, function () {
                helper_1.isVerify(_this.config) && _this.validate();
                _this.paint();
            });
        }
        this.events.on(types_1.ItemEvent.input, function (value) {
            var timeLength = _this.config.timeFormat === 12 ? 7 : 5;
            if (value.length >= timeLength && helper_1.isTimeFormat(value, _this.config.timeFormat)) {
                _this.timepicker.setValue(value);
            }
        });
        this.events.on(types_1.ItemEvent.afterChangeProperties, function () {
            _this.config.value = _this.timepicker.getValue();
            _this.paint();
        });
    };
    TimePicker.prototype._getHandlers = function () {
        var _this = this;
        return {
            onfocus: function () {
                if (_this._popup.isVisible()) {
                    return;
                }
                var node = _this.getRootView().refs.input.el;
                _this._popup.show(node);
            },
            oninput: function (e) {
                var value = e.target.value;
                _this.events.fire(types_1.ItemEvent.input, [value]);
            },
            onkeyup: function (e) {
                if (!_this.config.controls && e.keyCode === 13) {
                    if (_this._popup.isVisible()) {
                        _this._popup.hide();
                    }
                    var node = _this.getRootView().refs.input.el;
                    node.blur();
                }
            },
        };
    };
    TimePicker.prototype._draw = function () {
        var _a = this.config, value = _a.value, required = _a.required, disabled = _a.disabled, placeholder = _a.placeholder, name = _a.name, id = _a.id, validation = _a.validation, editable = _a.editable;
        return dom_1.el("div.dhx_form-group", {
            class: helper_1.getFormItemCss(this.config, !!required || !!validation),
        }, [
            this._drawLabel(),
            dom_1.el(".dhx_input__wrapper", [
                dom_1.el("div.dhx_input__container", {}, [
                    dom_1.el(".dhx_input__icon.dxi.dxi-clock-outline"),
                    dom_1.el("input.dhx_input.dhx_input--icon-padding", {
                        _key: this._uid,
                        value: value,
                        type: "text",
                        _ref: "input",
                        required: required,
                        disabled: disabled,
                        placeholder: placeholder || "",
                        name: name || "",
                        id: id || this._uid,
                        onfocus: this._handlers.onfocus,
                        onkeyup: this._handlers.onkeyup,
                        oninput: this._handlers.oninput,
                        autocomplete: "off",
                        readOnly: !editable,
                    }),
                ]),
                helper_1.getValidationMessage(this.config) &&
                    dom_1.el("span.dhx_input__caption", {}, helper_1.getValidationMessage(this.config)),
            ]),
        ]);
    };
    TimePicker.prototype._clear = function (silent) {
        this.timepicker.clear();
        this.config.value = "";
        !silent && this.events.fire(types_1.ItemEvent.change, [this.config.value]);
    };
    return TimePicker;
}(label_1.Label));
exports.TimePicker = TimePicker;


/***/ }),

/***/ "../ts-form/sources/helper.ts":
/*!************************************!*\
  !*** ../ts-form/sources/helper.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var _a;
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-useless-escape */
var types_1 = __webpack_require__(/*! ./types */ "../ts-form/sources/types.ts");
function getFormItemCss(item, validate) {
    var _a;
    var labelPosition = item.labelPosition, required = item.required, disabled = item.disabled, hiddenLabel = item.hiddenLabel, _b = item.css, css = _b === void 0 ? "" : _b, $validationStatus = item.$validationStatus;
    var cssStatus = (_a = {},
        _a[types_1.ValidationStatus.pre] = "",
        _a[types_1.ValidationStatus.error] = " dhx_form-group--state_error",
        _a[types_1.ValidationStatus.success] = " dhx_form-group--state_success",
        _a)[$validationStatus] || "";
    var labelPositionCss = labelPosition === "left" ? " dhx_form-group--inline" : "";
    var requiredCss = required ? " dhx_form-group--required" : "";
    var disabledCss = disabled ? " dhx_form-group--disabled" : "";
    var labelSrCss = hiddenLabel ? " dhx_form-group--label_sr" : "";
    if (validate) {
        return labelPositionCss + cssStatus + requiredCss + disabledCss + labelSrCss + " " + css;
    }
    return labelPositionCss + disabledCss + labelSrCss + " " + css;
}
exports.getFormItemCss = getFormItemCss;
var validators = (_a = {},
    _a[types_1.Validation.validAlphaNumeric] = /^[a-zA-Z0-9_]+$/,
    _a[types_1.Validation.validEmail] = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,
    _a[types_1.Validation.validInteger] = /^\d+$/,
    _a[types_1.Validation.validIPv4] = /\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.|$)){4}\b/,
    _a[types_1.Validation.validNumeric] = /^\d+(\.\d+)?$/,
    _a);
function getValidationMessage(item) {
    var _a;
    var validationMessage = (_a = {
            undefined: item.preMessage
        },
        _a[types_1.ValidationStatus.pre] = item.preMessage,
        _a[types_1.ValidationStatus.error] = item.errorMessage,
        _a[types_1.ValidationStatus.success] = item.successMessage,
        _a)[item.$validationStatus] || "";
    return validationMessage;
}
exports.getValidationMessage = getValidationMessage;
function validateTemplate(template, str) {
    return validators[template] ? validators[template].test(str) : true;
}
exports.validateTemplate = validateTemplate;
function isBlock(config) {
    return Boolean(config.rows) || Boolean(config.cols);
}
exports.isBlock = isBlock;
function validateInput(value, validation) {
    var isValid = true;
    if (typeof validation === "function") {
        isValid = validation(value);
    }
    else {
        var regExp = validators[validation];
        if (regExp) {
            isValid = regExp.test(value.toString());
        }
    }
    return isValid;
}
exports.validateInput = validateInput;
function baseInputValidate(value, config) {
    var inputType = config.inputType, min = config.min, max = config.max, minlength = config.minlength, maxlength = config.maxlength;
    if (inputType === "number") {
        if (typeof min !== "undefined" && typeof max !== "undefined") {
            return Number(min) <= Number(max) && Number(min) <= Number(value) && Number(max) >= Number(value);
        }
        else if (typeof min !== "undefined") {
            return Number(min) <= Number(value);
        }
        else if (typeof max !== "undefined") {
            return Number(max) >= Number(value);
        }
        else {
            return value === 0 || value === "0" || !!value;
        }
    }
    else {
        if (typeof minlength !== "undefined" && typeof maxlength !== "undefined") {
            return Number(minlength) <= String(value).length && Number(maxlength) >= String(value).length;
        }
        else if (typeof minlength !== "undefined") {
            return Number(minlength) <= String(value).length;
        }
        else if (typeof maxlength !== "undefined") {
            return Number(maxlength) >= String(value).length;
        }
        else {
            return typeof value === "string" && !!value;
        }
    }
}
exports.baseInputValidate = baseInputValidate;
function isTimeFormat(value, timeFormat) {
    if (timeFormat === 12) {
        return /(^0?([1-9][0-2]?):[0-5][0-9]?([AP][M]?)$)/i.test(value);
    }
    return /(^(0[0-9]|1[0-9]|2[0-3]|[0-9]):[0-5][0-9]$)/i.test(value);
}
exports.isTimeFormat = isTimeFormat;
function isVerify(config) {
    return config.hasOwnProperty("required") || config.hasOwnProperty("validation");
}
exports.isVerify = isVerify;
exports.baseProps = ["width", "height", "padding", "css"];


/***/ }),

/***/ "../ts-form/sources/locales/en.ts":
/*!****************************************!*\
  !*** ../ts-form/sources/locales/en.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    simpleVaultText: "Drag & drop files or folders here or",
    simpleVaultLabel: "browse files",
};


/***/ }),

/***/ "../ts-form/sources/types.ts":
/*!***********************************!*\
  !*** ../ts-form/sources/types.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var FormEvents;
(function (FormEvents) {
    FormEvents["change"] = "change";
    FormEvents["click"] = "click";
    FormEvents["beforeShow"] = "beforeShow";
    FormEvents["afterShow"] = "afterShow";
    FormEvents["beforeHide"] = "beforeHide";
    FormEvents["afterHide"] = "afterHide";
    FormEvents["afterValidate"] = "afterValidate";
    FormEvents["beforeValidate"] = "beforeValidate";
    FormEvents["beforeChangeProperties"] = "beforeChangeProperties";
    FormEvents["afterChangeProperties"] = "afterChangeProperties";
    FormEvents["beforeSend"] = "beforesend";
    FormEvents["afterSend"] = "aftersend";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    FormEvents["buttonClick"] = "buttonClick";
})(FormEvents = exports.FormEvents || (exports.FormEvents = {}));
var ItemEvent;
(function (ItemEvent) {
    ItemEvent["click"] = "click";
    ItemEvent["change"] = "change";
    ItemEvent["input"] = "input";
    ItemEvent["changeOptions"] = "changeOptions";
    ItemEvent["beforeShow"] = "beforeShow";
    ItemEvent["afterShow"] = "afterShow";
    ItemEvent["beforeHide"] = "beforeHide";
    ItemEvent["afterHide"] = "afterHide";
    ItemEvent["beforeValidate"] = "beforeValidate";
    ItemEvent["afterValidate"] = "afterValidate";
    ItemEvent["beforeUploadFile"] = "beforeUploadFile";
    ItemEvent["uploadFile"] = "uploadfile";
    ItemEvent["uploadBegin"] = "uploadBegin";
    ItemEvent["uploadComplete"] = "uploadComplete";
    ItemEvent["uploadFail"] = "uploadFail";
    ItemEvent["uploadProgress"] = "uploadProgress";
    ItemEvent["beforeChangeProperties"] = "beforeChangeProperties";
    ItemEvent["afterChangeProperties"] = "afterChangeProperties";
})(ItemEvent = exports.ItemEvent || (exports.ItemEvent = {}));
var ClearMethod;
(function (ClearMethod) {
    ClearMethod["value"] = "value";
    ClearMethod["validation"] = "validation";
})(ClearMethod = exports.ClearMethod || (exports.ClearMethod = {}));
var Validation;
(function (Validation) {
    Validation["empty"] = "";
    Validation["validEmail"] = "email";
    Validation["validInteger"] = "integer";
    Validation["validNumeric"] = "numeric";
    Validation["validAlphaNumeric"] = "alphanumeric";
    Validation["validIPv4"] = "IPv4";
})(Validation = exports.Validation || (exports.Validation = {}));
var ValidationStatus;
(function (ValidationStatus) {
    ValidationStatus[ValidationStatus["pre"] = 0] = "pre";
    ValidationStatus[ValidationStatus["error"] = 1] = "error";
    ValidationStatus[ValidationStatus["success"] = 2] = "success";
})(ValidationStatus = exports.ValidationStatus || (exports.ValidationStatus = {}));


/***/ }),

/***/ "../ts-grid/index.ts":
/*!***************************!*\
  !*** ../ts-grid/index.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Grid */ "../ts-grid/sources/Grid.ts"));
__export(__webpack_require__(/*! ./sources/ProGrid */ "../ts-grid/sources/ProGrid.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-grid/sources/types.ts"));
__export(__webpack_require__(/*! ./sources/helpers/cells */ "../ts-grid/sources/helpers/cells.ts"));
var Cells_1 = __webpack_require__(/*! ./sources/ui/Cells */ "../ts-grid/sources/ui/Cells.ts");
exports.getTreeCell = Cells_1.getTreeCell;
__export(__webpack_require__(/*! ./sources/helpers/data */ "../ts-grid/sources/helpers/data.ts"));
__export(__webpack_require__(/*! ./sources/helpers/main */ "../ts-grid/sources/helpers/main.ts"));


/***/ }),

/***/ "../ts-grid/sources/Exporter.ts":
/*!**************************************!*\
  !*** ../ts-grid/sources/Exporter.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = __webpack_require__(/*! ./helpers/main */ "../ts-grid/sources/helpers/main.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
function fillArray(arr, value) {
    for (var i = 0; i < arr.length; i++) {
        arr[i] = value;
    }
    return arr;
}
var Exporter = /** @class */ (function () {
    function Exporter(_view) {
        this._view = _view;
    }
    Exporter.prototype.xlsx = function (config) {
        return this._export(config);
    };
    Exporter.prototype.csv = function (config) {
        if (config === void 0) { config = {}; }
        config = __assign({
            asFile: true,
            rowDelimiter: "\n",
            columnDelimiter: ",",
            skipHeader: 0,
        }, config);
        var csv;
        if ("getRoot" in this._view.data && config.flat) {
            csv = this.getFlatCSV(config);
        }
        else {
            csv = this._getCSV(config);
        }
        var name = config.name || "grid_export";
        if (config.asFile) {
            core_1.downloadFile(csv, name + ".csv", "text/csv");
        }
        return csv;
    };
    Exporter.prototype._export = function (config) {
        if (config === void 0) { config = {}; }
        var configCols = this._view.config.columns.filter(function (i) { return !i.hidden; });
        var rowsIndexMap = {};
        var headers = main_1.transpose(configCols.map(function (col) { return col.header.map(function (level) { return level.text || " "; }); }));
        var columns = [];
        var uniqStyles = {
            default: {
                color: "#000000",
                background: "#FFFFFF",
                fontSize: 14,
            },
        };
        var cells = [];
        var columnsIndexMap = {};
        var data = this._view.data.serialize().map(function (row, i) {
            rowsIndexMap[row.id] = i;
            var rowData = configCols.map(function (col, k) {
                columnsIndexMap[col.id] = k;
                return main_1.removeHTMLTags(row[col.id]);
            });
            return rowData;
        });
        var footer = [];
        var content = this._view.content;
        var _loop_1 = function (col) {
            if (col.footer) {
                var id_1 = col.id;
                var columnData = this_1._view.data.serialize().reduce(function (items, item) {
                    if (item[id_1] !== undefined && item[id_1] !== "" && !isNaN(item[id_1])) {
                        items.push(parseFloat(item[id_1]));
                    }
                    return items;
                }, []);
                if (col.footer[0].content) {
                    var val = content[col.footer[0].content].calculate(columnData, columnData);
                    footer.push(val);
                }
                else {
                    footer.push(col.footer[0].colspan || col.footer[0].css || col.footer[0].text || " ");
                }
            }
            columns.push({ width: col.width });
            for (var key in col.$cellCss) {
                var colStyle = col.$cellCss[key];
                var colStyleHash = colStyle
                    .split("")
                    .reduce(function (h, letter) {
                    var hh = (h << 5) - h + letter.charCodeAt(0);
                    return Math.abs(hh & hh);
                }, 0)
                    .toString();
                if (!uniqStyles[colStyleHash]) {
                    var cont = document.body;
                    var css = main_1.getStyleByClass(colStyle, cont, "dhx_grid-row", uniqStyles.default);
                    if (css) {
                        uniqStyles[colStyleHash] = css;
                    }
                }
                if (uniqStyles[colStyleHash]) {
                    cells.push([rowsIndexMap[key], configCols.indexOf(col), colStyleHash]);
                }
            }
        };
        var this_1 = this;
        for (var _i = 0, configCols_1 = configCols; _i < configCols_1.length; _i++) {
            var col = configCols_1[_i];
            _loop_1(col);
        }
        if (footer.length) {
            data.push(footer);
        }
        var exportData = {
            name: config.name || "data",
            columns: columns,
            header: headers,
            data: data,
            styles: {
                cells: cells,
                css: uniqStyles,
            },
        };
        if (config.url) {
            var form_1 = document.createElement("form");
            form_1.setAttribute("target", "_blank");
            form_1.setAttribute("action", config.url);
            form_1.setAttribute("method", "POST");
            form_1.style.visibility = "hidden";
            var input = document.createElement("textarea");
            input.setAttribute("name", "data");
            input.value = JSON.stringify(exportData);
            form_1.appendChild(input);
            document.body.appendChild(form_1);
            form_1.submit();
            setTimeout(function () {
                form_1.parentNode.removeChild(form_1);
            }, 100);
        }
        return exportData;
    };
    Exporter.prototype.getFlatCSV = function (config) {
        var treeData = this._view.data;
        var root = treeData.getRoot();
        var firstCol = this._view.config.columns[0];
        var maxLevel = treeData.getMaxLevel();
        var getParentsChain = function (item, data) {
            var parents = [];
            for (var i = 0; i <= maxLevel; i++) {
                if (item && item[firstCol.id]) {
                    parents[item.$level] = item[firstCol.id];
                    var parent_1 = data.getParent(item.id, true);
                    if (parent_1 && parent_1.id) {
                        item = parent_1;
                    }
                    else {
                        item = null;
                    }
                }
                else {
                    parents[i] = "";
                }
            }
            return parents;
        };
        var total = "";
        treeData.eachChild(root, function (item) {
            var parents = getParentsChain(item, treeData).join(config.columnDelimiter);
            total +=
                parents +
                    Object.keys(item).reduce(function (values, key, i) {
                        if (key !== "id" && key !== "parent" && !key.startsWith("$") && i !== 0) {
                            return values + config.columnDelimiter + (item[key] === null ? "" : item[key]);
                        }
                        return values;
                    }, "");
            total += config.rowDelimiter;
        });
        var exportData = this._export(config);
        // [dirty]
        var emptyHeaders = fillArray(new Array(maxLevel + 1), "");
        var headers = exportData.header.map(function (header) {
            header.splice.apply(header, __spreadArrays([0, 1], emptyHeaders));
            return header;
        });
        var head = new ts_data_1.CsvDriver(config).serialize(headers, true) + config.rowDelimiter;
        return head + total;
    };
    Exporter.prototype._getCSV = function (config) {
        var exportData = this._export(config);
        var headers = exportData.header;
        var driver = new ts_data_1.CsvDriver(config);
        var head = driver.serialize(headers, true);
        var readyData = driver.serialize(exportData.data, true);
        return head + readyData;
    };
    return Exporter;
}());
exports.Exporter = Exporter;


/***/ }),

/***/ "../ts-grid/sources/Grid.ts":
/*!**********************************!*\
  !*** ../ts-grid/sources/Grid.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var Exporter_1 = __webpack_require__(/*! ./Exporter */ "../ts-grid/sources/Exporter.ts");
var data_1 = __webpack_require__(/*! ./helpers/data */ "../ts-grid/sources/helpers/data.ts");
var main_1 = __webpack_require__(/*! ./helpers/main */ "../ts-grid/sources/helpers/main.ts");
var Selection_1 = __webpack_require__(/*! ./Selection */ "../ts-grid/sources/Selection.ts");
var KeyManager_1 = __webpack_require__(/*! ./KeyManager */ "../ts-grid/sources/KeyManager.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-grid/sources/types.ts");
var render_1 = __webpack_require__(/*! ./ui/render */ "../ts-grid/sources/ui/render.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var ts_calendar_1 = __webpack_require__(/*! @dhx/ts-calendar */ "../ts-calendar/index.ts");
var content_1 = __webpack_require__(/*! ./ui/content */ "../ts-grid/sources/ui/content.ts");
var columnsResizer_1 = __webpack_require__(/*! ./columnsResizer */ "../ts-grid/sources/columnsResizer.ts");
var Grid = /** @class */ (function (_super) {
    __extends(Grid, _super);
    function Grid(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this._touch = {
            duration: 350,
            dblDuration: 300,
            timer: null,
            start: false,
            timeStamp: null,
        };
        _this.config = core_1.extend({
            rowHeight: 40,
            headerRowHeight: 40,
            footerRowHeight: 40,
            keyNavigation: true,
            sortable: true,
            columns: [],
            data: [],
            tooltip: true,
            // TODO: remove suite_7.0
            headerSort: true,
        }, config);
        _this.content = content_1.getContent();
        _this._scroll = {
            top: 0,
            left: 0,
        };
        // TODO: remove suite_7.0
        _this.config.autoWidth = _this.config.autoWidth || _this.config.fitToContainer;
        _this.config.adjust = _this.config.adjust || _this.config.columnsAutoWidth;
        _this.config.editable = _this.config.editable || _this.config.editing;
        if (!_this.config.sortable || !_this.config.headerSort) {
            _this.config.sortable = false;
        }
        var htmlEvents = {
            onclick: html_1.eventHandler(function (ev) { return html_1.locate(ev); }, {
                "dhx_grid-header-cell": function (_ev, item) {
                    var isResizable = _ev.target.getAttribute("dhx_resized");
                    var column = _this._getColumn(item);
                    if (column && main_1.isSortable(_this.config, column) && !isResizable) {
                        _this.events.fire(types_1.GridEvents.sort, [item]);
                    }
                },
                "dhx_grid-expand-cell": function (_ev, item) {
                    if (_ev.target.classList.contains("dhx_grid-expand-cell-icon")) {
                        _this.events.fire(types_1.GridEvents.expand, [item]);
                    }
                },
            }),
            onscroll: function (e) {
                // [TODO] Hide loading data to render
                _this._lazyLoad(e);
                _this.events.fire(types_1.GridEvents.scroll, [
                    {
                        y: e.target.scrollTop,
                        x: e.target.scrollLeft,
                    },
                ]);
            },
        };
        if (_this.config.dragMode || _this.config.dragItem) {
            ts_data_1.dragManager.setItem(_this._uid, _this);
            if (!_this.config.dragItem) {
                _this.config.dragItem = "row";
            }
            if (!_this.config.dragMode) {
                _this.config.dragMode = "both";
            }
        }
        _this._init();
        if (_this.config.columns) {
            _this._parseColumns();
        }
        if (_this.config.data &&
            _this.config.data instanceof Array &&
            _this.config.data.length &&
            _this.config.columns) {
            _this.data.parse(_this.config.data);
        }
        _this.selection = new Selection_1.Selection(_this, {
            disable: !_this.config.selection,
        });
        if (_this.config.keyNavigation) {
            _this.keyManager = new KeyManager_1.KeyManager(_this);
        }
        var view = dom_1.create({
            render: function (vm, obj) {
                return render_1.render(vm, obj, _this._currentData, htmlEvents, _this.selection, _this._uid);
            },
        }, _this);
        _this.mount(container, view);
        if (config.autoEmptyRow && _this.data.getLength() === 0) {
            _this.data.add(_this.config.columns.reduce(function (total, col) {
                total[col.id] = "";
                return total;
            }, {}));
            _this.paint();
        }
        return _this;
    }
    Grid.prototype.destructor = function () {
        this.unmount();
        this._destroyContent();
        this.events.events = {};
        this.events.context = null;
        this._currentData = this._filterData = this.data = this.config = this._scroll = this.content = null;
    };
    Grid.prototype.setColumns = function (columns) {
        this.config.columns = columns;
        this._parseColumns();
        this._checkMarks();
        this.paint();
    };
    Grid.prototype.addRowCss = function (id, css) {
        var item = this.data.getItem(id);
        var styles = item.$css || "";
        if (!styles.match(new RegExp(css, "g"))) {
            item.$css = styles + (" " + css);
            var index = this._getRowIndex(id);
            if (index >= 0) {
                this._currentData[index].$css = item.$css;
            }
            this.paint();
        }
    };
    Grid.prototype.removeRowCss = function (id, css) {
        var item = this.data.getItem(id);
        var styles = item.$css ? item.$css.replace(css, "") : "";
        item.$css = styles;
        var index = this._getRowIndex(id);
        if (index >= 0) {
            this._currentData[index].$css = item.$css;
        }
        this.paint();
    };
    Grid.prototype.addCellCss = function (row, col, css) {
        var column = this._getColumn(col);
        if (column) {
            if (column.$cellCss[row]) {
                // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
                column.$cellCss[row] += column.$cellCss[row].match(new RegExp(css, "g")) ? "" : " " + css;
            }
            else if (this.data.getItem(row)) {
                column.$cellCss[row] = css + " ";
            }
            this.paint();
        }
    };
    Grid.prototype.removeCellCss = function (row, col, css) {
        var column = this._getColumn(col);
        if (column) {
            if (column.$cellCss[row]) {
                column.$cellCss[row] = column.$cellCss[row].replace(css, "");
                this.paint();
            }
            else if (this.data.getItem(row)) {
                column.$cellCss[row] = "";
            }
        }
    };
    Grid.prototype.showColumn = function (colId) {
        var column = this._getColumn(colId);
        if (!column || !column.hidden) {
            return;
        }
        if (!this.events.fire(types_1.GridEvents.beforeColumnShow, [column]))
            return;
        column.hidden = false;
        this.config.$totalWidth += column.width;
        this.paint();
        this.events.fire(types_1.GridEvents.afterColumnShow, [column]);
    };
    Grid.prototype.hideColumn = function (colId) {
        var column = this._getColumn(colId);
        if (!column || column.hidden) {
            return;
        }
        if (!this.events.fire(types_1.GridEvents.beforeColumnHide, [column]))
            return;
        column.hidden = true;
        this.config.$totalWidth -= column.width;
        this.paint();
        this.events.fire(types_1.GridEvents.afterColumnHide, [column]);
    };
    Grid.prototype.isColumnHidden = function (colId) {
        var column = this._getColumn(colId);
        if (column) {
            return !!column.hidden;
        }
    };
    Grid.prototype.showRow = function (rowId) {
        if (!rowId) {
            return;
        }
        var id = rowId.toString();
        var row = this.data.getItem(id);
        if (!row || !row.hidden) {
            return;
        }
        if (!this.events.fire(types_1.GridEvents.beforeRowShow, [row]))
            return;
        this.data.update(id, { hidden: false });
        this.data.filter(function (i) { return !i.hidden; });
        this.events.fire(types_1.GridEvents.afterRowShow, [row]);
    };
    Grid.prototype.hideRow = function (rowId) {
        if (!rowId) {
            return;
        }
        var id = rowId.toString();
        var row = this.data.getItem(id);
        if (!row) {
            return;
        }
        if (!this.events.fire(types_1.GridEvents.beforeRowHide, [row]))
            return;
        this.data.update(id, { hidden: true });
        this.data.filter(function (i) { return !i.hidden; });
        this.events.fire(types_1.GridEvents.afterRowHide, [row]);
    };
    Grid.prototype.isRowHidden = function (rowId) {
        if (!rowId) {
            return;
        }
        var row = this.data.getItem(rowId.toString());
        if (row) {
            return !!row.hidden;
        }
    };
    Grid.prototype.getScrollState = function () {
        return {
            x: this._scroll.left,
            y: this._scroll.top,
        };
    };
    Grid.prototype.scroll = function (x, y) {
        var gridBody = this.getRootView().refs.grid_body.el;
        gridBody.scrollLeft = typeof x === "number" ? x : gridBody.scrollLeft;
        gridBody.scrollTop = typeof y === "number" ? y : gridBody.scrollTop;
    };
    Grid.prototype.scrollTo = function (row, col) {
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        var colInd = core_1.findIndex(columns, function (obj) { return obj.id === col; });
        var prevCol = this.selection.getCell().column;
        var prevColInd = core_1.findIndex(columns, function (obj) { return obj.id === prevCol.id; });
        var fixedColsWidth = this.config.splitAt
            ? columns.slice(0, this.config.splitAt).reduce(function (total, c) { return (total += c.$width); }, 0)
            : 0;
        var x = columns.slice(0, colInd).reduce(function (total, c) { return (total += c.width); }, 0) -
            (colInd - prevColInd < 0 ? fixedColsWidth : 0);
        var y = this.data.getIndex(row) * this.config.rowHeight;
        var scrollState = this.getScrollState();
        var gridRight = this.config.width + scrollState.x;
        var gridBottom = this.config.height + scrollState.y - this.config.headerRowHeight * this.config.$headerLevel;
        var cellTop = y - scrollState.y - this.config.rowHeight;
        var cellLeft = x - scrollState.x - columns[colInd].$width;
        var cellBottom = y + this.config.rowHeight * 2 + 18 - gridBottom;
        var cellRight = x + columns[colInd].$width * 2 + 18 - gridRight;
        var scrollTop = cellTop > 0 && cellBottom < 0 ? 0 : cellTop < 0 ? cellTop : cellBottom;
        var scrollLeft = cellLeft > 0 && cellRight < 0 ? 0 : cellLeft < 0 ? cellLeft : cellRight;
        this.scroll(scrollLeft + scrollState.x, scrollTop + scrollState.y);
    };
    Grid.prototype.adjustColumnWidth = function (id, adjust) {
        var _this = this;
        if (adjust === void 0) { adjust = true; }
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        var index = core_1.findIndex(columns, function (c) { return c.id === id; });
        var col = columns[index];
        var widthArr = [];
        if ((adjust === "header" || adjust === true) && col.header) {
            col.header.forEach(function (item) {
                if (item.text) {
                    widthArr.push(html_1.getStrSize(main_1.removeHTMLTags(item.text)).width + (main_1.isSortable(_this.config, col) ? 40 : 20));
                }
            });
        }
        if ((adjust === "footer" || adjust === true) && col.footer) {
            col.footer.forEach(function (item) {
                if (item.text || item.content) {
                    widthArr.push(html_1.getStrSize(main_1.removeHTMLTags(item.text || _this.content[item.content].toHtml(col, _this.config))).width + 20);
                }
            });
        }
        if (adjust === "data" || adjust === true) {
            this.data.map(function (row) {
                if (typeof row[col.id] === "string" || typeof row[col.id] === "number") {
                    widthArr.push(html_1.getStrSize(main_1.removeHTMLTags(row[col.id])).width + 20);
                }
            });
        }
        if (widthArr.length > 0) {
            this.config.$totalWidth = columns.reduce(function (t, column, i) {
                if (i === index) {
                    column.$width = Math.max.apply(Math, widthArr);
                }
                return (t += column.hidden ? 0 : column.$width);
            }, 0);
            this.paint();
        }
    };
    Grid.prototype.getCellRect = function (row, col) {
        var colums = this.config.columns.filter(function (col) { return !col.hidden; });
        var colInd = core_1.findIndex(colums, function (obj) { return obj.id === col; });
        var rowInd = this._getRowIndex(row);
        var x = colums.slice(0, colInd).reduce(function (total, c) { return (total += c.$width); }, 0);
        var y = rowInd * this.config.rowHeight;
        return {
            x: x,
            y: y,
            height: this.config.rowHeight,
            width: colums[colInd].$width,
        };
    };
    Grid.prototype.getColumn = function (colId) {
        var id = core_1.findIndex(this.config.columns, function (col) { return col.id === colId; });
        if (id >= 0) {
            return this.config.columns[id];
        }
    };
    Grid.prototype.addSpan = function (spanObj) {
        this.config.spans = this.config.spans || [];
        var index = core_1.findIndex(this.config.spans, function (span) { return "" + span.row === "" + spanObj.row && "" + span.column === "" + spanObj.column; });
        if (index >= 0) {
            this.config.spans[index] = spanObj;
            return;
        }
        this.config.spans.push(spanObj);
    };
    Grid.prototype.getSpan = function (row, col) {
        if (this.config.spans) {
            var index = core_1.findIndex(this.config.spans, function (span) { return "" + span.row === "" + row && "" + span.column === "" + col; });
            return this.config.spans[index];
        }
    };
    Grid.prototype.removeSpan = function (row, col) {
        if (this.config.spans) {
            var index = core_1.findIndex(this.config.spans, function (span) { return "" + span.row === "" + row && "" + span.column === "" + col; });
            this.config.spans.splice(index, 1);
        }
    };
    Grid.prototype.editCell = function (rowId, colId, editorType) {
        var row = this.data.getItem(rowId);
        var col = this.getColumn(colId);
        var colEditorType = col.editorType;
        if (!row || row[colId] === undefined) {
            ts_data_1.dhxWarning("item not found");
            return;
        }
        if (!editorType) {
            if (col.type === "date") {
                editorType = "datePicker";
            }
            if (col.type === "boolean") {
                editorType = "checkbox";
            }
            if (colEditorType) {
                editorType = colEditorType;
            }
        }
        if (!this.events.fire(types_1.GridEvents.beforeEditStart, [row, col, editorType])) {
            return;
        }
        if (this.config.$editable &&
            this.config.$editable.row === rowId &&
            this.config.$editable.col === colId &&
            this.config.$editable.editorType === editorType) {
            return;
        }
        this.config.$editable = {
            row: rowId,
            col: colId,
            editorType: editorType,
        };
        if (!this.selection.isDisable()) {
            this.selection.setCell(rowId.toString(), colId.toString());
        }
        this.paint();
        this.events.fire(types_1.GridEvents.afterEditStart, [row, col, editorType]);
    };
    Grid.prototype.editEnd = function (withoutSave) {
        if (this.config.$editable && this.config.$editable.editor) {
            this.config.$editable.editor.endEdit(withoutSave);
        }
    };
    Grid.prototype.getSortingState = function () {
        return { dir: this._sortDir, by: this._sortBy };
    };
    Grid.prototype.getHeaderFilter = function (colId) {
        var _this = this;
        var col = this.getColumn(colId);
        if (!col) {
            return;
        }
        var filter = null;
        col.header.forEach(function (cell) {
            if (cell.content) {
                var filterEl = _this.content[cell.content].element[colId];
                filter = cell.content === "comboFilter" ? filterEl : filterEl.el;
            }
        });
        return filter;
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Grid.prototype.edit = function (rowId, colId, editorType) {
        this.editCell(rowId, colId, editorType);
    };
    Grid.prototype._parseColumns = function () {
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        data_1.normalizeColumns(columns);
        data_1.countColumns(this.config, columns);
    };
    Grid.prototype._parseData = function () {
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        var firstItem = this.data.getId(0);
        if (firstItem) {
            if (columns.length) {
                this._checkColumns();
            }
            this._currentData = this.data.serialize() || [];
        }
        this._checkFilters();
        this._checkMarks();
        this._render();
    };
    Grid.prototype._checkColumns = function () {
        this._detectColsTypes();
    };
    Grid.prototype._createCollection = function (prep) {
        this.data = new ts_data_1.DataCollection({ prep: prep }, this.events);
    };
    Grid.prototype._getRowIndex = function (rowId) {
        return this.data.getIndex(rowId);
    };
    Grid.prototype._setEventHandlers = function () {
        var _this = this;
        var updater = function (updateObj) { return function (_a) {
            var source = _a.source, target = _a.target;
            if (source && source instanceof Array && source.length > 1) {
                source.map(function (selectedId) { return _this.data.exists(selectedId) && _this.data.update(selectedId, updateObj); });
                return;
            }
            if (_this.data.exists(target)) {
                _this.data.update(target, updateObj);
            }
        }; };
        this.data.events.on(ts_data_1.DataEvents.load, function () {
            _this._parseData();
        });
        this.data.events.on(ts_data_1.DataEvents.change, function (_id, status, obj) {
            // [dirty]
            if (status === "remove" && obj.$emptyRow) {
                return;
            }
            _this._currentData = _this.data.map(function (el) { return el; }) || [];
            if (_id) {
                _this._filterData = _this.data.map(function (el) { return el; }) || [];
                _this._checkFilters();
            }
            _this._detectColsTypes();
            _this._removeMarks();
            _this._checkMarks();
            _this._adjustColumns();
            if (_this.config.autoEmptyRow) {
                var emptyRow = _this.data.find({ by: "$emptyRow", match: true });
                if (emptyRow) {
                    _this.data.move(emptyRow.id, _this.data.getLength() - 1);
                }
                else {
                    _this._addEmptyRow();
                }
            }
            _this._render();
        });
        this.data.events.on(ts_data_1.DataEvents.removeAll, function () {
            _this.config.columns.map(function (col) {
                col.header.map(function (cell) {
                    if (cell.content && (cell.content === "selectFilter" || cell.content === "comboFilter")) {
                        col.$uniqueData = [];
                    }
                });
            });
        });
        this.events.on(ts_data_1.DragEvents.beforeDrag, function (data, events) {
            if (_this.data.getItem(data.start)) {
                return _this.events.fire(types_1.GridEvents.beforeRowDrag, [data, events]);
            }
            else if (_this.config.dragItem === "column") {
                return _this.events.fire(types_1.GridEvents.beforeColumnDrag, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.dragStart, function (data, events) {
            updater({ $dragtarget: true });
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.dragRowStart, [data, events]);
            }
            else if (_this.config.dragItem === "column") {
                _this.events.fire(types_1.GridEvents.dragColumnStart, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.dragIn, function (data, events) {
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.dragRowIn, [data, events]);
            }
            else if (_this.config.dragItem === "column") {
                _this.events.fire(types_1.GridEvents.dragColumnIn, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.dragOut, function (data, events) {
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.dragRowOut, [data, events]);
            }
            else if (_this.config.dragItem === "column") {
                _this.events.fire(types_1.GridEvents.dragColumnOut, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.canDrop, function (data, events) {
            updater({ $drophere: true });
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.canRowDrop, [data, events]);
            }
            else if (_this.config.dragItem === "column") {
                _this.events.fire(types_1.GridEvents.canColumnDrop, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.cancelDrop, function (data, events) {
            updater({ $drophere: undefined });
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.cancelRowDrop, [data, events]);
            }
            else if (_this.config.dragItem === "column") {
                _this.events.fire(types_1.GridEvents.cancelColumnDrop, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.beforeDrop, function (data, events) {
            if (_this.data.getItem(data.start)) {
                return _this.events.fire(types_1.GridEvents.beforeRowDrop, [data, events]);
            }
            else if (_this.config.dragItem === "column") {
                return _this.events.fire(types_1.GridEvents.beforeColumnDrop, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.afterDrop, function (data, events) {
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.afterRowDrop, [data, events]);
            }
            else if (_this.config.dragItem === "column") {
                _this.events.fire(types_1.GridEvents.afterColumnDrop, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.afterDrag, function (data, events) {
            updater({ $dragtarget: undefined });
            _this._checkFilters();
            _this._checkMarks();
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.afterRowDrag, [data, events]);
            }
            else if (_this.config.dragItem === "column") {
                _this.events.fire(types_1.GridEvents.afterColumnDrag, [data, events]);
            }
        });
        this.events.on(types_1.GridEvents.sort, function (id) {
            if (id) {
                _this._sort(id);
            }
        });
        // TODO: When introducing touch events, remove system events
        this.events.on(types_1.GridEvents.cellMouseDown, function (row, col, e) {
            if (!e.targetTouches) {
                _this._dragStart(e);
            }
            else {
                _this._touch.timer = setTimeout(function () {
                    _this._dragStart(e);
                }, _this._touch.duration);
                if (!_this._touch.timeStamp) {
                    _this._touch.timeStamp = +e.timeStamp.toFixed();
                }
                else {
                    var doubleTap = _this._touch.dblDuration >= _this._touch.timeStamp - +e.timeStamp.toFixed();
                    if (doubleTap) {
                        if ((col.editable !== false && _this.config.editable) || col.editable) {
                            _this.editCell(row.id, col.id, col.editorType);
                        }
                        e.preventDefault();
                        // to simulate on touch devices
                        _this.events.fire(types_1.GridEvents.cellDblClick, [row, col, e]);
                    }
                    _this._touch.timeStamp = null;
                }
                setTimeout(function () {
                    _this._touch.timeStamp = null;
                }, _this._touch.dblDuration);
            }
        });
        this._events.on(types_1.GridSystemEvents.cellTouchMove, function (_row, _col, e) {
            _this._touch.start && e.preventDefault();
            _this._clearTouchTimer();
        });
        this._events.on(types_1.GridSystemEvents.cellTouchEnd, function () {
            _this._touch.start = false;
            _this._clearTouchTimer();
        });
        // TODO: remove suite_7.0
        this.events.on(types_1.GridEvents.headerInput, function (val, colId, filter) {
            // [dirty]
            if (_this.config.autoEmptyRow) {
                var emptyRow = _this.data.find({ by: "$emptyRow", match: true });
                if (emptyRow) {
                    _this.data.remove(emptyRow.id);
                }
            }
            _this.data.filter({
                by: colId,
                match: val,
                compare: _this.content[filter].match,
            }, {
                multiple: true,
            });
        });
        this.events.on(types_1.GridEvents.filterChange, function (val, colId, filter) {
            if (_this.config.autoEmptyRow) {
                var emptyRow = _this.data.find({ by: "$emptyRow", match: true });
                if (emptyRow) {
                    _this.data.remove(emptyRow.id);
                }
            }
            _this.data.filter({
                by: colId,
                match: val,
                compare: _this.content[filter].match,
            }, { multiple: true });
        });
        this.events.on(types_1.GridEvents.scroll, function (scrollState) {
            _this._scroll = { top: scrollState.y, left: scrollState.x };
            _this.paint();
        });
        this.events.on(types_1.GridEvents.cellDblClick, function (row, col) {
            if ((col.editable !== false && _this.config.editable) || col.editable) {
                _this.editCell(row.id, col.id, col.editorType);
            }
        });
        this.events.on(types_1.GridEvents.afterEditEnd, function (value, eRow, eCol) {
            var _a;
            var row;
            var col;
            if (!_this.config.$editable) {
                row = eRow.id;
                col = eCol.id;
            }
            else {
                row = _this.config.$editable.row;
                col = _this.config.$editable.col;
            }
            var item = _this.data.getItem(row);
            delete item.$emptyRow;
            if (value !== undefined) {
                _this.data.update(row, __assign(__assign({}, item), (_a = {}, _a[col] = value, _a)));
            }
            _this.config.$editable = null;
            _this._checkFilters();
            _this.paint();
        });
        this.events.on(types_1.GridEvents.headerCellMouseDown, function (col, e) {
            var target = e.target;
            var resizedColumn = target.getAttribute("dhx_resized");
            if (resizedColumn && _this.events.fire(types_1.GridEvents.beforeResizeStart, [col, e])) {
                columnsResizer_1.startResize(_this, resizedColumn.toString(), e, function () {
                    _this.paint();
                    _this.config.$resizing = null;
                    _this.events.fire(types_1.GridEvents.afterResizeEnd, [col, e]);
                });
            }
            if (e.targetTouches) {
                if (!_this._touch.timeStamp) {
                    _this._touch.timeStamp = +e.timeStamp.toFixed();
                }
                else {
                    var doubleTap = _this._touch.dblDuration >= _this._touch.timeStamp - +e.timeStamp.toFixed();
                    if (doubleTap) {
                        e.preventDefault();
                        // to simulate on touch devices
                        _this.events.fire(types_1.GridEvents.headerCellDblClick, [col, e]);
                    }
                    _this._touch.timeStamp = null;
                }
                setTimeout(function () {
                    _this._touch.timeStamp = null;
                }, _this._touch.dblDuration);
            }
        });
        this.events.on(types_1.GridEvents.footerCellDblClick, function (col, e) {
            if (e.targetTouches) {
                if (!_this._touch.timeStamp) {
                    _this._touch.timeStamp = +e.timeStamp.toFixed();
                }
                else {
                    var doubleTap = _this._touch.dblDuration >= _this._touch.timeStamp - +e.timeStamp.toFixed();
                    if (doubleTap) {
                        e.preventDefault();
                        // to simulate on touch devices
                        _this.events.fire(types_1.GridEvents.footerCellDblClick, [col, e]);
                    }
                    _this._touch.timeStamp = null;
                }
                setTimeout(function () {
                    _this._touch.timeStamp = null;
                }, _this._touch.dblDuration);
            }
        });
        this.events.on(types_1.GridEvents.resize, function () {
            _this._parseColumns();
            _this._checkFilters();
        });
    };
    Grid.prototype._addEmptyRow = function () {
        var id = this.data.getId(this.data.getLength() - 1);
        var lastRow = this.data.getItem(id);
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        var isEmpty = main_1.isRowEmpty(lastRow);
        if (!isEmpty) {
            this.data.add(columns.reduce(function (total, col) {
                total[col.id] = "";
                return total;
            }, { $emptyRow: true }));
        }
    };
    Grid.prototype._sort = function (by, dir) {
        var _this = this;
        if (!dir) {
            if (this._sortBy === by) {
                this._sortDir = this._sortDir === "asc" ? "desc" : "asc";
            }
            else {
                this._sortDir = "desc";
            }
        }
        else {
            this._sortDir = dir;
        }
        this._sortBy = by;
        this.data.sort({
            by: by,
            dir: this._sortDir,
            as: function (el) {
                var col = _this.getColumn(by);
                if (el && col.type === "date") {
                    return "" + ts_calendar_1.stringToDate(el, col.dateFormat).getTime();
                }
                return el ? "" + el : "";
            },
        });
    };
    Grid.prototype._clearTouchTimer = function () {
        if (this._touch.timer) {
            clearTimeout(this._touch.timer);
            this._touch.timer = null;
        }
    };
    Grid.prototype._dragStart = function (e) {
        if (this.config.dragMode && this.config.dragItem === "row" && !this.config.$editable) {
            var item = html_1.locateNode(e, "dhx_id");
            var itemId = item && item.getAttribute("dhx_id");
            if (e.targetTouches) {
                this._touch.start = true;
            }
            return ts_data_1.dragManager.onMouseDown(e, [itemId], [item]);
        }
    };
    Grid.prototype._getColumn = function (id) {
        for (var _i = 0, _a = this.config.columns; _i < _a.length; _i++) {
            var col = _a[_i];
            if (col.id === id) {
                return col;
            }
        }
    };
    Grid.prototype._init = function () {
        this.events = new events_1.EventSystem(this);
        this._events = new events_1.EventSystem(this);
        this._attachDataCollection();
        this.export = new Exporter_1.Exporter(this);
        this._setEventHandlers();
    };
    Grid.prototype._attachDataCollection = function () {
        var _this = this;
        var prep = function (data) {
            if (data.spans) {
                _this.config.spans = data.spans;
                data = data.data;
            }
            return data;
        };
        if (this.config.data instanceof ts_data_1.DataCollection) {
            this.data = this.config.data;
            this.config.data = [];
            this._parseData();
            return;
        }
        this._createCollection(prep);
    };
    Grid.prototype._setMarks = function (col, func) {
        var colCells = this.data.map(function (row) { return ({
            id: row.id,
            data: row[col.id],
            row: row,
        }); });
        var colCellsData = this.data.map(function (row) { return row[col.id]; });
        var _loop_1 = function (cell) {
            var css = func(cell.data, colCellsData, cell.row, col);
            if (css) {
                col.$cellCss = col.$cellCss || {};
                var cellCss_1 = (col.$cellCss[cell.id] || "").split(" ");
                css.split(" ").map(function (item) {
                    if (!cellCss_1.includes(item)) {
                        cellCss_1.push(item);
                    }
                });
                col.$cellCss[cell.id] = cellCss_1.join(" ");
            }
        };
        for (var _i = 0, colCells_1 = colCells; _i < colCells_1.length; _i++) {
            var cell = colCells_1[_i];
            _loop_1(cell);
        }
    };
    Grid.prototype._checkMarks = function () {
        var _this = this;
        this.config.columns.map(function (col) {
            var mark = col.mark;
            if (mark) {
                if (typeof mark === "function") {
                    _this._setMarks(col, mark);
                }
                else {
                    _this._setMarks(col, function (el, c) {
                        var data = c.filter(function (item) { return item !== null && item !== undefined && item !== ""; });
                        var min = Math.min.apply(Math, data);
                        var max = Math.max.apply(Math, data);
                        if (mark.max && max === parseFloat(el)) {
                            return mark.max;
                        }
                        if (mark.min && min === parseFloat(el)) {
                            return mark.min;
                        }
                        return false;
                    });
                }
            }
        });
    };
    Grid.prototype._removeMarks = function () {
        this.config.columns.forEach(function (col) {
            if (col.mark) {
                col.$cellCss = {};
            }
        });
    };
    Grid.prototype._adjustColumns = function () {
        var _this = this;
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        columns.map(function (col, i) {
            if ((col.adjust !== false && _this.config.adjust) || col.adjust) {
                _this.adjustColumnWidth(col.id, col.adjust || _this.config.adjust);
            }
        });
    };
    // [todo] make more smart type detection
    Grid.prototype._detectColsTypes = function () {
        var firstRow = this.data.getItem(this.data.getId(0));
        if (!firstRow) {
            return;
        }
        this.config.columns.map(function (col) {
            if (col.type) {
                return col;
            }
            var firstCell = firstRow ? firstRow[col.id] : "";
            var v = parseFloat(firstCell);
            var val = isNaN(v) ? firstCell : v;
            if (val) {
                col.type = typeof val;
                return col;
            }
        });
    };
    Grid.prototype._checkFilters = function () {
        var data = this._filterData;
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        columns.map(function (col) {
            col.header.map(function (cell) {
                if (cell.content && (cell.content === "selectFilter" || cell.content === "comboFilter")) {
                    var unique = data_1.getUnique(data, col.id);
                    if (col.$uniqueData && col.$uniqueData.length > unique.length) {
                        unique.forEach(function (item) {
                            if (!col.$uniqueData.includes(item)) {
                                col.$uniqueData.push(item);
                            }
                        });
                    }
                    else {
                        col.$uniqueData = unique;
                    }
                }
            });
        });
    };
    Grid.prototype._destroyContent = function () {
        for (var contentName in this.content) {
            if (contentName === "comboFilter") {
                this.content[contentName].destroy();
            }
        }
    };
    Grid.prototype._render = function () {
        this.paint();
    };
    Grid.prototype._lazyLoad = function (e) {
        var y = e.target.scrollTop;
        if (this.getScrollState().y !== y) {
            var from = Math.round(y / this.config.rowHeight);
            var onScreenCount = (this.config.height - this.config.headerRowHeight) / this.config.rowHeight;
            var proxy = this.data.dataProxy;
            if (proxy &&
                proxy.config &&
                !this.data.isDataLoaded(from, onScreenCount + from + proxy.config.prepare)) {
                proxy.updateUrl(null, { from: from, limit: proxy.config.limit });
                this.data.load(proxy);
            }
        }
    };
    return Grid;
}(view_1.View));
exports.Grid = Grid;


/***/ }),

/***/ "../ts-grid/sources/KeyManager.ts":
/*!****************************************!*\
  !*** ../ts-grid/sources/KeyManager.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! ./types */ "../ts-grid/sources/types.ts");
var Keymanager_1 = __webpack_require__(/*! @dhx/ts-common/Keymanager */ "../ts-common/Keymanager.ts");
var keys_1 = __webpack_require__(/*! ./helpers/keys */ "../ts-grid/sources/helpers/keys.ts");
var KeyManager = /** @class */ (function () {
    function KeyManager(grid) {
        this._grid = grid;
        this._initFocusHandlers();
        this._initHotKeys();
    }
    KeyManager.prototype.addHotKey = function (key, handler) {
        var _this = this;
        Keymanager_1.keyManager.addHotKey(key, function (e) {
            if (_this.isFocus() && _this._grid.events.fire(types_1.GridEvents.beforeKeyDown, [e])) {
                handler(e);
                _this._grid.events.fire(types_1.GridEvents.afterKeyDown, [e]);
            }
        });
    };
    KeyManager.prototype.isFocus = function () {
        return this._focusedId === this._grid._uid;
    };
    KeyManager.prototype._initFocusHandlers = function () {
        var _this = this;
        document.addEventListener("click", function (e) {
            var target = e.target;
            var gridContainer = _this._grid.getRootView().data.getRootNode();
            var currentInFocus = keys_1.isChild(gridContainer, target) || target.isEqualNode(gridContainer);
            if (!_this.isFocus() && currentInFocus) {
                _this._focusedId = _this._grid._uid;
            }
            else if (!currentInFocus && _this._focusedId !== "null") {
                _this._focusedId = "null";
            }
        });
    };
    KeyManager.prototype._cellSelecting = function (selection) {
        return selection === "cell" || selection === "complex";
    };
    KeyManager.prototype._initHotKeys = function () {
        var _this = this;
        this.addHotKey("enter", function () {
            if (_this._cellSelecting(_this._grid.config.selection)) {
                var selected = _this._grid.selection.getCell();
                if (selected &&
                    ((selected.column.editable !== false && _this._grid.config.editable) ||
                        selected.column.editable)) {
                    if (!_this._grid.config.$editable) {
                        if (selected.column.type !== "boolean") {
                            _this._grid.edit(selected.row.id, selected.column.id, selected.column.editorType);
                        }
                        else {
                            _this._grid.events.fire(types_1.GridEvents.afterEditEnd, [
                                !selected.row[selected.column.id],
                                selected.row,
                                selected.column,
                            ]);
                        }
                    }
                    else {
                        _this._grid.editEnd();
                    }
                }
            }
        });
        this.addHotKey(keys_1.variables.space, function (e) {
            if (_this._cellSelecting(_this._grid.config.selection) &&
                _this._grid.config.editable &&
                !_this._grid.config.$editable) {
                var selected = _this._grid.selection.getCell();
                if (selected && selected.column.type === "boolean") {
                    e.preventDefault();
                    _this._grid.events.fire(types_1.GridEvents.afterEditEnd, [
                        !selected.row[selected.column.id],
                        selected.row,
                        selected.column,
                    ]);
                }
            }
        });
        this.addHotKey(keys_1.variables.escape, function () {
            if (_this._grid.config.$editable) {
                _this._grid.editEnd(true);
            }
        });
        // TODO: Rework current block
        if (this._grid.getRootView()) {
            var gridBody_1 = this._grid.getRootView().refs.grid_body.el;
            this.addHotKey("pageUp", function (e) {
                e.preventDefault();
                gridBody_1.scrollTop -= gridBody_1.clientHeight;
            });
            this.addHotKey("pageDown", function (e) {
                e.preventDefault();
                gridBody_1.scrollTop += gridBody_1.clientHeight;
            });
            this.addHotKey("home", function (e) {
                e.preventDefault();
                gridBody_1.scrollTop = 0;
            });
            this.addHotKey("end", function (e) {
                e.preventDefault();
                gridBody_1.scrollTop += gridBody_1.scrollHeight;
            });
        }
        this.addHotKey("tab", function (e) {
            if (_this._grid.config.$editable || !_this._grid.config.selection) {
                return;
            }
            if (e) {
                e.preventDefault();
            }
            var selected = _this._grid.selection.getCell();
            var columns = _this._grid.config.columns.filter(function (col) { return !col.hidden; });
            if (selected) {
                var index = columns.indexOf(selected.column) + 1;
                if (index >= 0 && index < columns.length) {
                    _this._grid.selection.setCell(selected.row.id, columns[index].id);
                    _this._grid.scrollTo(selected.row.id.toString(), columns[index].id.toString());
                }
                else if (index >= 0) {
                    var newLineIndex = _this._grid.data.getIndex(selected.row.id.toString()) + 1;
                    if (newLineIndex < _this._grid.data.getLength()) {
                        _this._grid.selection.setCell(_this._grid.data.getId(newLineIndex), columns[0].id);
                        _this._grid.scrollTo(_this._grid.data.getId(newLineIndex), columns[0].id.toString());
                    }
                }
            }
        });
        this.addHotKey("shift+tab", function (e) {
            if (_this._grid.config.$editable || !_this._grid.config.selection) {
                return;
            }
            if (e) {
                e.preventDefault();
            }
            var selected = _this._grid.selection.getCell();
            var columns = _this._grid.config.columns.filter(function (col) { return !col.hidden; });
            if (selected) {
                var index = columns.indexOf(selected.column) - 1;
                if (index >= 0 && index < columns.length) {
                    _this._grid.selection.setCell(selected.row.id, columns[index].id);
                    _this._grid.scrollTo(selected.row.id.toString(), columns[index].id.toString());
                }
                else if (index < _this._grid.data.getLength()) {
                    var newLineIndex = _this._grid.data.getIndex(selected.row.id.toString()) - 1;
                    if (newLineIndex >= 0) {
                        _this._grid.selection.setCell(_this._grid.data.getId(newLineIndex), columns[columns.length - 1].id);
                        _this._grid.scrollTo(_this._grid.data.getId(newLineIndex), columns[columns.length - 1].id.toString());
                    }
                }
            }
        });
        this.addHotKey(keys_1.variables.arrowUp, function (e) {
            keys_1.selectionMove(e, _this._grid, "vertical", -1);
        });
        this.addHotKey("ctrl+" + keys_1.variables.arrowUp, function (e) {
            keys_1.selectionMove(e, _this._grid, "vertical", -1, true);
        });
        this.addHotKey("shift+" + keys_1.variables.arrowUp, function (e) {
            if (_this._grid.config.multiselection) {
                keys_1.selectionMove(e, _this._grid, "vertical", -1, false, false, true);
            }
        });
        this.addHotKey("ctrl+shift+" + keys_1.variables.arrowUp, function (e) {
            if (_this._grid.config.multiselection) {
                keys_1.selectionMove(e, _this._grid, "vertical", -1, true, false, true);
            }
        });
        this.addHotKey(keys_1.variables.arrowDown, function (e) {
            keys_1.selectionMove(e, _this._grid, "vertical", 1);
        });
        this.addHotKey("ctrl+" + keys_1.variables.arrowDown, function (e) {
            keys_1.selectionMove(e, _this._grid, "vertical", 1, true);
        });
        this.addHotKey("shift+" + keys_1.variables.arrowDown, function (e) {
            if (_this._grid.config.multiselection) {
                keys_1.selectionMove(e, _this._grid, "vertical", 1, false, false, true);
            }
        });
        this.addHotKey("ctrl+shift+" + keys_1.variables.arrowDown, function (e) {
            if (_this._grid.config.multiselection) {
                keys_1.selectionMove(e, _this._grid, "vertical", 1, true, false, true);
            }
        });
        this.addHotKey(keys_1.variables.arrowRight, function (e) {
            keys_1.selectionMove(e, _this._grid, "horizontal", 1);
        });
        this.addHotKey("ctrl+" + keys_1.variables.arrowRight, function (e) {
            keys_1.selectionMove(e, _this._grid, "horizontal", 1, true);
        });
        this.addHotKey("shift+" + keys_1.variables.arrowRight, function (e) {
            if (_this._grid.config.multiselection) {
                keys_1.selectionMove(e, _this._grid, "horizontal", 1, false, false, true);
            }
        });
        this.addHotKey("ctrl+shift+" + keys_1.variables.arrowRight, function (e) {
            if (_this._grid.config.multiselection) {
                keys_1.selectionMove(e, _this._grid, "horizontal", 1, true, false, true);
            }
        });
        this.addHotKey(keys_1.variables.arrowLeft, function (e) {
            keys_1.selectionMove(e, _this._grid, "horizontal", -1);
        });
        this.addHotKey("ctrl+" + keys_1.variables.arrowLeft, function (e) {
            keys_1.selectionMove(e, _this._grid, "horizontal", -1, true);
        });
        this.addHotKey("shift+" + keys_1.variables.arrowLeft, function (e) {
            if (_this._grid.config.multiselection) {
                keys_1.selectionMove(e, _this._grid, "horizontal", -1, false, false, true);
            }
        });
        this.addHotKey("ctrl+shift+" + keys_1.variables.arrowLeft, function (e) {
            if (_this._grid.config.multiselection) {
                keys_1.selectionMove(e, _this._grid, "horizontal", -1, true, false, true);
            }
        });
    };
    return KeyManager;
}());
exports.KeyManager = KeyManager;


/***/ }),

/***/ "../ts-grid/sources/ProGrid.ts":
/*!*************************************!*\
  !*** ../ts-grid/sources/ProGrid.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Grid_1 = __webpack_require__(/*! ./Grid */ "../ts-grid/sources/Grid.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-grid/sources/types.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var ProGrid = /** @class */ (function (_super) {
    __extends(ProGrid, _super);
    function ProGrid(container, config) {
        return _super.call(this, container, config) || this;
    }
    ProGrid.prototype._setEventHandlers = function () {
        var _this = this;
        _super.prototype._setEventHandlers.call(this);
        // columns drag'n'drop feature
        this.events.on(types_1.GridEvents.headerCellMouseDown, function (col, e) {
            if (!e.targetTouches) {
                _this._dragStartColumn(e, col);
            }
            else {
                _this._touch.timer = setTimeout(function () {
                    _this._dragStartColumn(e, col);
                }, _this._touch.duration);
            }
        });
        this._events.on(types_1.GridSystemEvents.headerCellTouchMove, function (_col, e) {
            _this._touch.start && e.preventDefault();
            _this._clearTouchTimer();
        });
        this._events.on(types_1.GridSystemEvents.headerCellTouchEnd, function () {
            _this._touch.start = false;
            _this._clearTouchTimer();
        });
        // !-- columns drag'n'drop feature
    };
    // columns drag'n'drop feature
    ProGrid.prototype._getColumnGhost = function (col) {
        var headerRow = this._container.querySelector(".dhx_header-row");
        var colHeaderCell = headerRow.querySelector(".dhx_grid-header-cell[dhx_id=\"" + col.id + "\"]");
        var headerCols = Array.from(headerRow.childNodes);
        var n = headerCols.indexOf(colHeaderCell) + 1;
        var colHeaderCells = this._container.querySelectorAll(".dhx_grid-header-cell[dhx_id=\"" + col.id + "\"]");
        var ghostGridNodes = this._container.querySelectorAll(".dhx_grid_data .dhx_grid-cell:nth-child(" + n + ")");
        var ghostContainer = document.createElement("div");
        colHeaderCells.forEach(function (node) { return ghostContainer.appendChild(node.cloneNode(true)); });
        ghostGridNodes.forEach(function (node) { return ghostContainer.appendChild(node.cloneNode(true)); });
        return ghostContainer;
    };
    ProGrid.prototype._dragStartColumn = function (e, col) {
        var target = e.target;
        var testCustom = function (el) { return el.classList.contains("dhx_grid-custom-content-cell"); };
        var isCustom = testCustom(target.parentElement) || testCustom(target.parentElement.parentElement);
        if (!isCustom && (col.draggable || (this.config.dragItem === "column" && col.draggable !== false))) {
            if (e.targetTouches) {
                this._touch.start = true;
            }
            ts_data_1.dragManager.onMouseDown(e, col.id, [this._getColumnGhost(col)]);
        }
    };
    return ProGrid;
}(Grid_1.Grid));
exports.ProGrid = ProGrid;


/***/ }),

/***/ "../ts-grid/sources/Selection.ts":
/*!***************************************!*\
  !*** ../ts-grid/sources/Selection.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-grid/sources/types.ts");
var Selection = /** @class */ (function () {
    function Selection(grid, config) {
        this._disable = false;
        var types = ["cell", "row", "complex"];
        this._grid = grid;
        this.config = config;
        this._disable = this.config.disable;
        this._selectedCell = undefined;
        this._oldSelectedCell = undefined;
        this._selectedCells = [];
        this._type = types.includes(this._grid.config.selection) ? this._grid.config.selection : "complex";
        this._multiselection = grid.config.multiselection && this._type !== "complex";
        this.events = new events_1.EventSystem(this);
        this._init();
    }
    Selection.prototype.setCell = function (row, col, ctrlUp, shiftUp) {
        var _this = this;
        if (ctrlUp === void 0) { ctrlUp = false; }
        if (shiftUp === void 0) { shiftUp = false; }
        if (this._disable ||
            this._grid.config.$editable ||
            (!this._multiselection &&
                this._oldSelectedCell &&
                this._oldSelectedCell.row.id === ((row && row.id) || row) &&
                this._oldSelectedCell.column.id === ((col && col.id) || col)) ||
            (this._multiselection &&
                this._selectedCells.length === 1 &&
                this._selectedCells[0].row.id === ((row && row.id) || row) &&
                this._selectedCells[0].column.id === ((col && col.id) || col))) {
            return;
        }
        if ((this._multiselection && !ctrlUp && !shiftUp) || !this._multiselection) {
            this._selectedCells.length && this._removeCells();
        }
        if (this._multiselection &&
            this._type === "cell" &&
            this._selectedCells.find(function (item) {
                return item.row.id === ((row && row.id) || row) && item.column.id === ((col && col.id) || col);
            })) {
            this.removeCell((row && row.id) || row, (col && col.id) || col);
            return;
        }
        var oldSelectedCell = this._oldSelectedCell ? this._oldSelectedCell : undefined;
        row = this._grid.data.getItem((row && row.id) || row);
        var colums = this._grid.config.columns.filter(function (col) { return !col.hidden; });
        if (!col) {
            col = colums[0];
        }
        col = this._grid.getColumn(col.id || col);
        if (!col || !row) {
            return;
        }
        col = col.id ? col : this._grid.getColumn(col);
        if (!this.events.fire(types_1.GridSelectionEvents.beforeSelect, [row, col]))
            return;
        this._selectedCell = { row: row, column: col };
        this.events.fire(types_1.GridSelectionEvents.afterSelect, [row, col]);
        if (this._multiselection && shiftUp && oldSelectedCell) {
            this._oldSelectedCell = oldSelectedCell;
        }
        else {
            this._oldSelectedCell = this._selectedCell;
        }
        if (this._multiselection) {
            if (shiftUp && !ctrlUp && this._selectedCells.length > 0) {
                var startRowIndex = this._grid.data.getIndex(this._oldSelectedCell.row.id);
                var endRowIndex = this._grid.data.getIndex(row.id);
                if (startRowIndex > endRowIndex) {
                    var temp = startRowIndex;
                    startRowIndex = endRowIndex;
                    endRowIndex = temp;
                }
                this._selectedCells = [this._oldSelectedCell];
                if (this._type === "cell") {
                    var columnsIds = colums.map(function (e) { return e.id; });
                    var startColIndex = columnsIds.indexOf(oldSelectedCell.column.id);
                    var endColIndex = columnsIds.indexOf(col.id);
                    if (startColIndex !== -1 && endColIndex !== -1) {
                        if (startColIndex > endColIndex) {
                            var temp = startColIndex;
                            startColIndex = endColIndex;
                            endColIndex = temp;
                        }
                        var columns_1 = colums.slice(startColIndex, endColIndex + 1);
                        this._grid.data.mapRange(startRowIndex, endRowIndex, function (item) {
                            columns_1.forEach(function (column) {
                                var cell = { row: item, column: column };
                                if (_this._findIndex(cell) === -1) {
                                    _this._selectedCells.push(cell);
                                }
                            });
                        });
                    }
                }
                else {
                    this._grid.data.mapRange(startRowIndex, endRowIndex, function (item) {
                        var cell = { row: item, column: col };
                        if (_this._findIndex(cell) === -1) {
                            _this._selectedCells.push(cell);
                        }
                    });
                }
            }
            else if (ctrlUp && !shiftUp) {
                var cellIndex = this._findIndex();
                if (cellIndex === -1) {
                    this._selectedCells.push({
                        row: this._selectedCell.row,
                        column: this._selectedCell.column,
                    });
                }
                else {
                    this._selectedCells.length > 1 && this._selectedCells.splice(cellIndex, 1);
                }
            }
            else {
                this._selectedCells = [this._selectedCell];
            }
        }
        else {
            this._selectedCells = [this._selectedCell];
        }
        dom_1.awaitRedraw().then(function () {
            _this._grid.paint();
        });
    };
    Selection.prototype.getCell = function () {
        if (this._disable)
            return;
        return this._selectedCell;
    };
    Selection.prototype.getCells = function () {
        if (this._disable)
            return;
        return this._selectedCells;
    };
    Selection.prototype.toHTML = function () {
        var _this = this;
        if (this._isUnselected()) {
            return;
        }
        if (this._multiselection) {
            var selection_1 = [];
            this._selectedCells.forEach(function (cell, index, array) {
                selection_1.push(_this._toHTML(cell.row, cell.column, index === array.length - 1 || _this._type === "cell"));
            });
            return selection_1;
        }
        else {
            return this._toHTML(this._selectedCell.row, this._selectedCell.column, true);
        }
    };
    Selection.prototype.disable = function () {
        if (!this.events.fire(types_1.GridSelectionEvents.beforeDisable, []))
            return;
        this.removeCell();
        this._disable = true;
        this.events.fire(types_1.GridSelectionEvents.afterDisable, []);
        this._grid.paint();
    };
    Selection.prototype.enable = function () {
        if (!this.events.fire(types_1.GridSelectionEvents.beforeEnable, []))
            return;
        this._disable = false;
        this.events.fire(types_1.GridSelectionEvents.afterEnable, []);
        this._grid.paint();
    };
    Selection.prototype.isDisable = function () {
        return this._disable;
    };
    Selection.prototype.removeCell = function (rowId, colId) {
        var _this = this;
        if (this._disable)
            return;
        if (rowId && colId && this._type === "cell") {
            var cell = this._selectedCells.find(function (_a) {
                var row = _a.row, column = _a.column;
                return row.id === rowId && column.id === colId;
            });
            cell && this._removeCell(cell.row, cell.column);
        }
        else if (rowId) {
            var cells = this._selectedCells.filter(function (_a) {
                var row = _a.row;
                return row.id === rowId;
            });
            cells.forEach(function (_a) {
                var row = _a.row, column = _a.column;
                _this._removeCell(row, column);
            });
        }
        else {
            this._removeCells();
        }
        dom_1.awaitRedraw().then(function () {
            _this._grid.paint();
        });
    };
    Selection.prototype._removeCell = function (row, col) {
        if (!row || !col || !row.id || !col.id)
            return;
        if (!this.events.fire(types_1.GridSelectionEvents.beforeUnSelect, [row, col]))
            return;
        var index = this._selectedCells.findIndex(function (item) { return item.row.id === row.id && item.column.id === col.id; });
        this._selectedCells.splice(index, 1);
        if (this._selectedCell &&
            col.id === this._selectedCell.column.id &&
            row.id === this._selectedCell.row.id) {
            this._selectedCell = this._selectedCells[this._selectedCells.length - 1] || undefined;
        }
        this.events.fire(types_1.GridSelectionEvents.afterUnSelect, [row, col]);
    };
    Selection.prototype._removeCells = function () {
        var _this = this;
        this._selectedCells.forEach(function (item) {
            _this._removeCell(item && item.row, item && item.column);
        });
        this._selectedCells.length && this._removeCells();
    };
    Selection.prototype._init = function () {
        var _this = this;
        this._grid.events.on(types_1.GridEvents.cellClick, function (row, col, e) {
            _this.setCell(row, col, e.ctrlKey || e.metaKey, e.shiftKey);
        });
        this._grid.data.events.on(ts_data_1.DataEvents.beforeRemove, function (item) {
            if (item && _this._selectedCell && _this._selectedCell.row) {
                var index = _this._grid.data.getIndex(String(_this._selectedCell.row.id));
                var id = _this._grid.data.getId(index + 1);
                if (id) {
                    _this.setCell(id);
                }
                else {
                    var newId = _this._grid.data.getId(index - 1);
                    if (newId) {
                        _this.setCell(newId);
                    }
                }
                _this._grid.paint();
            }
        });
    };
    Selection.prototype._toHTML = function (row, column, last) {
        if (last === void 0) { last = false; }
        var colums = this._grid.config.columns.filter(function (col) { return !col.hidden; });
        var fixedCols = this._grid.config.splitAt ? colums.slice(0, this._grid.config.splitAt) : [];
        var fixedColsIds = fixedCols.map(function (col) { return col.id; });
        var fixedCell;
        var cellRect = this._grid.getCellRect(row.id, column.id);
        if (fixedColsIds.includes(column.id) && last) {
            var scrollState = this._grid.getScrollState();
            fixedCell = dom_1.el(".dhx_grid-selected-cell", {
                style: {
                    width: this._grid.config.splitAt === fixedColsIds.indexOf(column.id) + 1
                        ? cellRect.width - 1
                        : cellRect.width,
                    height: cellRect.height,
                    top: cellRect.y,
                    left: cellRect.x + scrollState.x,
                    position: "absolute",
                    zIndex: 10,
                },
            });
        }
        var totalWidth = this._grid.config.$totalWidth;
        return dom_1.el(".dhx_grid-selection", {
            style: {
                zIndex: fixedCell ? 20 : 10,
            },
        }, [
            (this._type === "row" || this._type === "complex") &&
                dom_1.el(".dhx_grid-selected-row", {
                    style: {
                        width: totalWidth,
                        height: cellRect.height - 1,
                        top: cellRect.y,
                        left: 0,
                        position: "absolute",
                    },
                }),
            ((this._type === "cell" || this._type === "complex") && fixedCell) ||
                ((this._type === "cell" || this._type === "complex") &&
                    last &&
                    dom_1.el(".dhx_grid-selected-cell", {
                        style: {
                            width: cellRect.width - 1,
                            height: cellRect.height - 1,
                            top: cellRect.y,
                            left: cellRect.x + 1,
                            position: "absolute",
                        },
                    })),
        ]);
    };
    Selection.prototype._isUnselected = function () {
        return (!this._selectedCell ||
            !this._selectedCell.row ||
            !this._selectedCell.column ||
            this._selectedCells.length === 0);
    };
    Selection.prototype._findIndex = function (cell) {
        var _this = this;
        if (cell === void 0) { cell = this._selectedCell; }
        var cellIndex = -1;
        this._selectedCells.some(function (element, index) {
            if (_this._type === "cell") {
                if (core_1.compare(element.row, cell.row) && core_1.compare(element.column, cell.column)) {
                    cellIndex = index;
                    return true;
                }
            }
            else if (_this._type === "row") {
                if (core_1.compare(element.row, cell.row)) {
                    cellIndex = index;
                    return true;
                }
            }
        });
        return cellIndex;
    };
    return Selection;
}());
exports.Selection = Selection;


/***/ }),

/***/ "../ts-grid/sources/columnsResizer.ts":
/*!********************************************!*\
  !*** ../ts-grid/sources/columnsResizer.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-grid/sources/types.ts");
var html_1 = __webpack_require__(/*! ../../ts-common/html */ "../ts-common/html.ts");
function startResize(grid, column, ev, cb) {
    ev.targetTouches && ev.preventDefault();
    var initX = ev.targetTouches ? ev.targetTouches[0].clientX : ev.clientX;
    var columns = grid.config.columns.filter(function (col) { return !col.hidden; });
    var initWidth = 0;
    grid.config.$resizing = column;
    var moveHandler = function (e) {
        var i = core_1.findIndex(columns, function (obj) {
            return obj.id === column;
        });
        var currentX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;
        var containerLeft = currentX - grid.getRootNode().getBoundingClientRect().left;
        var scrollbarY = grid.config.$totalHeight > grid.config.height ? html_1.getScrollbarWidth() : 0;
        if (grid.config.splitAt === i + 1 && containerLeft >= grid.config.width - scrollbarY - 2) {
            return;
        }
        initWidth = initWidth || columns[i].$width;
        var minWidth = columns[i].minWidth || 20;
        var maxWidth = columns[i].maxWidth;
        var move = currentX - initX;
        var cols = __spreadArrays(columns);
        var size = initWidth + move;
        var final;
        if ((maxWidth && size >= maxWidth) || size <= minWidth) {
            if (size <= minWidth) {
                final = minWidth;
            }
            if (size >= maxWidth) {
                final = maxWidth;
            }
        }
        else {
            final = size;
        }
        cols[i].$width = final;
        grid.events.fire(types_1.GridEvents.resize, [columns[i], e]);
        grid.paint();
    };
    var upHandler = function () {
        if (!ev.targetTouches) {
            document.removeEventListener("mousemove", moveHandler);
            document.removeEventListener("mouseup", upHandler);
        }
        else {
            document.removeEventListener("touchmove", moveHandler);
            document.removeEventListener("touchend", upHandler);
        }
        cb();
    };
    if (!ev.targetTouches) {
        document.addEventListener("mousemove", moveHandler);
        document.addEventListener("mouseup", upHandler);
    }
    else {
        document.addEventListener("touchmove", moveHandler);
        document.addEventListener("touchend", upHandler);
    }
    grid.paint();
}
exports.startResize = startResize;


/***/ }),

/***/ "../ts-grid/sources/helpers/cells.ts":
/*!*******************************************!*\
  !*** ../ts-grid/sources/helpers/cells.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
// [todo]
function getWidth(columns, colspan, index) {
    var cols = columns.filter(function (col) { return !col.hidden; });
    if (!colspan) {
        return cols[index].$width;
    }
    return cols.reduce(function (w, c, i) {
        w += i >= index && i < index + colspan ? c.$width : 0;
        return w;
    }, 0);
}
exports.getWidth = getWidth;


/***/ }),

/***/ "../ts-grid/sources/helpers/data.ts":
/*!******************************************!*\
  !*** ../ts-grid/sources/helpers/data.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function normalizeArray(obj, name) {
    if (!obj[name]) {
        return;
    }
    if (typeof obj[name] === "string") {
        obj[name] = [
            {
                text: "" + obj[name],
            },
        ];
    }
    else {
        obj[name] = obj[name].map(function (el) {
            if (typeof el === "string") {
                el = { text: el };
            }
            return el;
        });
    }
}
function normalizeColumns(columns) {
    for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var col = columns_1[_i];
        col.$cellCss = col.$cellCss || {};
        normalizeArray(col, "header");
        normalizeArray(col, "footer");
        var isContent = col.header.reduce(function (acc, item) { return (acc = acc || !!item.content); }, false);
        if (isContent) {
            col.$uniqueData = [];
        }
        col.$width = col.$width || col.width || 100;
        if (col.$width < col.minWidth) {
            col.$width = col.minWidth;
        }
        if (col.$width > col.maxWidth) {
            col.$width = col.maxWidth;
        }
    }
}
exports.normalizeColumns = normalizeColumns;
function countColumns(config, columns) {
    var headerRowsCount = 0;
    var footerRowsCount = 0;
    var totalWidth = 0;
    var colspans = false;
    var rowsHeadersCount = 0;
    var footer = false;
    columns.map(function (col) {
        headerRowsCount = Math.max(headerRowsCount, col.header.length);
        totalWidth += col.$width;
        if (col.footer) {
            footerRowsCount = Math.max(footerRowsCount, col.footer.length);
            if (!footer) {
                footer = true;
            }
        }
        if (!colspans) {
            for (var _i = 0, _a = col.header; _i < _a.length; _i++) {
                var head = _a[_i];
                if (head.colspan) {
                    colspans = true;
                    return;
                }
            }
        }
    });
    // fill missing cells
    columns.map(function (col) {
        if (col.header.length < headerRowsCount) {
            for (var i = 0; i < headerRowsCount; i++) {
                col.header[i] = col.header[i] || { text: "" };
            }
        }
        if (footer) {
            col.footer = col.footer || [];
        }
        if (col.footer && col.footer.length < footerRowsCount) {
            for (var i = 0; i < footerRowsCount; i++) {
                col.footer[i] = col.footer[i] || { text: "" };
            }
        }
        col.header.map(function (head) {
            head.css = head.css || "";
            if (!head.text && !head.css.includes("dhx_cell-empty")) {
                head.css += " dhx_cell-empty";
            }
        });
        // find header columns indexes
        if (col.header[0].text === "") {
            rowsHeadersCount++;
        }
    });
    config.$totalWidth = totalWidth;
    config.$headerLevel = headerRowsCount;
    config.$footerLevel = footerRowsCount;
    config.$colspans = colspans;
    config.$footer = footer;
    return rowsHeadersCount;
}
exports.countColumns = countColumns;
function calculatePositions(width, height, scroll, conf) {
    var columns = conf.columns.filter(function (col) { return !col.hidden; });
    var allWidth = columns.map(function (col) { return col.$width; });
    var maxWidth = Math.max.apply(Math, allWidth);
    var minWidth = Math.min.apply(Math, allWidth);
    var xReserve = Math.round(maxWidth / minWidth);
    var yReserve = 1;
    var avrColWidth = conf.$totalWidth / columns.length;
    var colPerPage = Math.round(width / avrColWidth);
    var x = 0;
    var scrollLeft = scroll.left;
    for (var i = 0; i < columns.length; i++) {
        var col = columns[i];
        scrollLeft = scrollLeft - col.$width;
        if (scrollLeft + avrColWidth / 2 > 0) {
            x++;
        }
        else {
            break;
        }
    }
    var xStart = x - xReserve >= 0 ? x - xReserve : 0;
    var xEnd = x + colPerPage + xReserve;
    var rowPerPage = Math.round(height / conf.rowHeight);
    var y = Math.round(scroll.top / conf.rowHeight) || 0;
    var yStart = y - yReserve >= 0 ? y - yReserve : 0;
    var yEnd = y + rowPerPage + yReserve;
    return {
        xStart: xStart,
        xEnd: xEnd,
        yStart: yStart,
        yEnd: yEnd,
    };
}
exports.calculatePositions = calculatePositions;
function getUnique(arr, name) {
    return arr
        .map(function (item) { return item[name]; })
        .filter(function (item, i, array) { return array.indexOf(item) === i; })
        .sort();
}
exports.getUnique = getUnique;


/***/ }),

/***/ "../ts-grid/sources/helpers/keys.ts":
/*!******************************************!*\
  !*** ../ts-grid/sources/helpers/keys.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
function isChild(parent, child) {
    var node = child.parentNode;
    while (node !== null) {
        if (node === parent) {
            return true;
        }
        node = node.parentNode;
    }
    return false;
}
exports.isChild = isChild;
exports.variables = {
    arrowLeft: html_1.isIE() ? "left" : "arrowLeft",
    arrowRight: html_1.isIE() ? "right" : "arrowRight",
    arrowUp: html_1.isIE() ? "up" : "arrowUp",
    arrowDown: html_1.isIE() ? "down" : "arrowDown",
    escape: html_1.isIE() ? "esc" : "escape",
    space: html_1.isIE() ? "spacebar" : "space",
};
function selectionMove(e, grid, dir, range, toEnd, ctrlUp, shiftUp) {
    if (toEnd === void 0) { toEnd = false; }
    if (ctrlUp === void 0) { ctrlUp = false; }
    if (shiftUp === void 0) { shiftUp = false; }
    if (grid.config.$editable || !grid.config.selection) {
        return;
    }
    if (e) {
        e.preventDefault();
    }
    var selected = grid.selection.getCell();
    var columns = grid.config.columns.filter(function (col) { return !col.hidden; });
    if (selected) {
        if (dir === "vertical") {
            if (toEnd) {
                var newItem = range === 1
                    ? grid.data.getItem(grid.data.getId(grid.data.getLength() - 1))
                    : grid.data.getItem(grid.data.getId(0));
                grid.selection.setCell(newItem.id, selected.column.id, ctrlUp, shiftUp);
                grid.scrollTo(newItem.id, selected.column.id.toString());
            }
            else {
                var index = grid.data.getIndex(selected.row.id.toString());
                if (index + range >= 0 && index + range < grid.data.getLength()) {
                    var newItem = grid.data.getItem(grid.data.getId(index + range));
                    grid.selection.setCell(newItem.id, selected.column.id, ctrlUp, shiftUp);
                    grid.scrollTo(newItem.id, selected.column.id.toString());
                }
            }
        }
        else {
            if (toEnd) {
                var newItem = range === 1 ? columns[columns.length - 1] : columns[0];
                grid.selection.setCell(selected.row.id, newItem.id, ctrlUp, shiftUp);
                grid.scrollTo(selected.row.id.toString(), newItem.id.toString());
            }
            else {
                var index = columns.indexOf(selected.column);
                if (index + range >= 0 && index + range < columns.length) {
                    grid.scrollTo(selected.row.id.toString(), columns[index + range].id.toString());
                    grid.selection.setCell(selected.row.id, columns[index + range].id, ctrlUp, shiftUp);
                }
            }
        }
    }
}
exports.selectionMove = selectionMove;


/***/ }),

/***/ "../ts-grid/sources/helpers/main.ts":
/*!******************************************!*\
  !*** ../ts-grid/sources/helpers/main.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function rgbToHex(color) {
    if (color.substr(0, 1) === "#") {
        return color;
    }
    var digits = /(.*?)rgb[a]?\((\d+), *(\d+), *(\d+),* *([\d+.]*)\)/.exec(color);
    var red = parseInt(digits[2], 10)
        .toString(16)
        .padStart(2, "0");
    var green = parseInt(digits[3], 10)
        .toString(16)
        .padStart(2, "0");
    var blue = parseInt(digits[4], 10)
        .toString(16)
        .padStart(2, "0");
    return "#" + red + green + blue;
}
exports.rgbToHex = rgbToHex;
function transpose(arr, transform) {
    var columns = [];
    for (var i = 0; i < arr.length; i++) {
        var row = arr[i];
        for (var cellInd = 0; cellInd < row.length; cellInd++) {
            columns[cellInd] = columns[cellInd] || [];
            var cell = transform ? transform(row[cellInd]) : row[cellInd];
            columns[cellInd].push(cell);
        }
    }
    return columns;
}
exports.transpose = transpose;
function insert(node, newone) {
    if (typeof newone === "string") {
        node.insertAdjacentHTML("beforeend", newone);
        return node.lastChild;
    }
    else {
        node.appendChild(newone);
        return newone;
    }
}
function getStyleByClass(cssClass, container, targetClass, def) {
    var cont = container.querySelector("." + targetClass);
    var testDiv = insert(cont, "<div class=\"" + cssClass + "\"></div>");
    var styles = window.getComputedStyle(testDiv);
    var result = {
        color: styles.color === "rgb(0, 0, 0)" ? def.color : rgbToHex(styles.color),
        background: styles.backgroundColor === "rgba(0, 0, 0, 0)" ? def.background : rgbToHex(styles.backgroundColor),
        fontSize: parseFloat(styles.fontSize),
    };
    cont.removeChild(testDiv);
    // [dirty]
    if (result.color === def.color &&
        result.background === def.background &&
        result.fontSize === def.fontSize) {
        return null;
    }
    return result;
}
exports.getStyleByClass = getStyleByClass;
function removeHTMLTags(str) {
    if (typeof str !== "string" && typeof str !== "number" && typeof str !== "boolean") {
        return "";
    }
    return ("" + (str === undefined || str === null ? "" : str))
        .replace(/<[^>]*>/g, "")
        .replace(/["]/g, "&quot;")
        .trim();
}
exports.removeHTMLTags = removeHTMLTags;
function isCssSupport(property, value) {
    try {
        return CSS.supports(property, value);
    }
    catch (err) {
        var el = document.createElement("div");
        el.style[property] = value;
        return el.style[property] === value;
    }
}
exports.isCssSupport = isCssSupport;
function isRowEmpty(row) {
    if (!row) {
        return;
    }
    return Object.keys(row).reduce(function (acc, col) {
        if (col === "id" || col.startsWith("$")) {
            return acc;
        }
        if (acc && row[col] !== undefined && row[col] !== "") {
            return false;
        }
        return acc;
    }, true);
}
exports.isRowEmpty = isRowEmpty;
function isSortable(config, col) {
    return (col.sortable !== false && config.sortable) || col.sortable;
}
exports.isSortable = isSortable;
function isAutoWidth(config) {
    var check = false;
    config.columns.map(function (col) {
        if ((col.autoWidth !== false && config.autoWidth) || col.autoWidth) {
            check = true;
            return;
        }
    });
    return check;
}
exports.isAutoWidth = isAutoWidth;


/***/ }),

/***/ "../ts-grid/sources/types.ts":
/*!***********************************!*\
  !*** ../ts-grid/sources/types.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var GridEvents;
(function (GridEvents) {
    GridEvents["scroll"] = "scroll";
    GridEvents["sort"] = "sort";
    GridEvents["expand"] = "expand";
    GridEvents["filterChange"] = "filterChange";
    GridEvents["beforeResizeStart"] = "beforeResizeStart";
    GridEvents["resize"] = "resize";
    GridEvents["afterResizeEnd"] = "afterResizeEnd";
    GridEvents["cellClick"] = "cellClick";
    GridEvents["cellRightClick"] = "cellRightClick";
    GridEvents["cellMouseOver"] = "cellMouseOver";
    GridEvents["cellMouseDown"] = "cellMouseDown";
    GridEvents["cellDblClick"] = "cellDblClick";
    GridEvents["headerCellClick"] = "headerCellClick";
    GridEvents["footerCellClick"] = "footerCellClick";
    GridEvents["headerCellMouseOver"] = "headerCellMouseOver";
    GridEvents["footerCellMouseOver"] = "footerCellMouseOver";
    GridEvents["headerCellMouseDown"] = "headerCellMouseDown";
    GridEvents["footerCellMouseDown"] = "footerCellMouseDown";
    GridEvents["headerCellDblClick"] = "headerCellDblClick";
    GridEvents["footerCellDblClick"] = "footerCellDblClick";
    GridEvents["headerCellRightClick"] = "headerCellRightClick";
    GridEvents["footerCellRightClick"] = "footerCellRightClick";
    GridEvents["beforeEditStart"] = "beforeEditStart";
    GridEvents["afterEditStart"] = "afterEditStart";
    GridEvents["beforeEditEnd"] = "beforeEditEnd";
    GridEvents["afterEditEnd"] = "afterEditEnd";
    GridEvents["beforeKeyDown"] = "beforeKeyDown";
    GridEvents["afterKeyDown"] = "afterKeyDown";
    GridEvents["beforeColumnHide"] = "beforeColumnHide";
    GridEvents["afterColumnHide"] = "afterColumnHide";
    GridEvents["beforeColumnShow"] = "beforeColumnShow";
    GridEvents["afterColumnShow"] = "afterColumnShow";
    GridEvents["beforeRowHide"] = "beforeRowHide";
    GridEvents["afterRowHide"] = "afterRowHide";
    GridEvents["beforeRowShow"] = "beforeRowShow";
    GridEvents["afterRowShow"] = "afterRowShow";
    GridEvents["beforeRowDrag"] = "beforeRowDrag";
    GridEvents["dragRowStart"] = "dragRowStart";
    GridEvents["dragRowOut"] = "dragRowOut";
    GridEvents["dragRowIn"] = "dragRowIn";
    GridEvents["canRowDrop"] = "canRowDrop";
    GridEvents["cancelRowDrop"] = "cancelRowDrop";
    GridEvents["beforeRowDrop"] = "beforeRowDrop";
    GridEvents["afterRowDrop"] = "afterRowDrop";
    GridEvents["afterRowDrag"] = "afterRowDrag";
    GridEvents["beforeColumnDrag"] = "beforeColumnDrag";
    GridEvents["dragColumnStart"] = "dragColumnStart";
    GridEvents["dragColumnOut"] = "dragColumnOut";
    GridEvents["dragColumnIn"] = "dragColumnIn";
    GridEvents["canColumnDrop"] = "canColumnDrop";
    GridEvents["cancelColumnDrop"] = "cancelColumnDrop";
    GridEvents["beforeColumnDrop"] = "beforeColumnDrop";
    GridEvents["afterColumnDrop"] = "afterColumnDrop";
    GridEvents["afterColumnDrag"] = "afterColumnDrag";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    GridEvents["headerInput"] = "headerInput";
})(GridEvents = exports.GridEvents || (exports.GridEvents = {}));
var GridSystemEvents;
(function (GridSystemEvents) {
    GridSystemEvents["cellTouchMove"] = "cellTouchMove";
    GridSystemEvents["cellTouchEnd"] = "cellTouchEnd";
    GridSystemEvents["headerCellTouchMove"] = "headerCellTouchMove";
    GridSystemEvents["headerCellTouchEnd"] = "headerCellTouchEnd";
})(GridSystemEvents = exports.GridSystemEvents || (exports.GridSystemEvents = {}));
var GridSelectionEvents;
(function (GridSelectionEvents) {
    GridSelectionEvents["beforeUnSelect"] = "beforeUnSelect";
    GridSelectionEvents["afterUnSelect"] = "afterUnSelect";
    GridSelectionEvents["beforeSelect"] = "beforeSelect";
    GridSelectionEvents["afterSelect"] = "afterSelect";
    GridSelectionEvents["beforeEnable"] = "beforeEnable";
    GridSelectionEvents["beforeDisable"] = "beforeDisable";
    GridSelectionEvents["afterEnable"] = "afterEnable";
    GridSelectionEvents["afterDisable"] = "afterDisable";
})(GridSelectionEvents = exports.GridSelectionEvents || (exports.GridSelectionEvents = {}));


/***/ }),

/***/ "../ts-grid/sources/ui/Cells.ts":
/*!**************************************!*\
  !*** ../ts-grid/sources/ui/Cells.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var cells_1 = __webpack_require__(/*! ../helpers/cells */ "../ts-grid/sources/helpers/cells.ts");
var main_1 = __webpack_require__(/*! ../helpers/main */ "../ts-grid/sources/helpers/main.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-grid/sources/types.ts");
var editors_1 = __webpack_require__(/*! ./editors/editors */ "../ts-grid/sources/ui/editors/editors.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
function handleMouse(rowStart, colStart, conf, type, e) {
    colStart = html_1.locateNodeByClassName(e.target, "dhx_grid-fixed-cols-wrap") ? 0 : colStart;
    var target = html_1.locateNodeByClassName(e.target, "dhx_grid-cell");
    if (!target || !type) {
        return;
    }
    var rowNode = target.parentNode;
    var bodyNode = rowNode.parentNode;
    var colIndex = Array.prototype.indexOf.call(rowNode.childNodes, target);
    var columns = conf.columns.filter(function (col) { return !col.hidden; });
    var col = columns[colStart + colIndex];
    var rowIndex = Array.prototype.indexOf.call(bodyNode.childNodes, rowNode);
    var row = conf.data[rowStart + rowIndex];
    var systemEvent = type.toLocaleLowerCase().includes("touch");
    if (systemEvent) {
        conf._events.fire(type, [row, col, e]);
    }
    else {
        conf.events.fire(type, [row, col, e]);
    }
}
function getHandlers(row, column, conf) {
    return {
        onclick: [handleMouse, row, column, conf, types_1.GridEvents.cellClick],
        onmouseover: [handleMouse, row, column, conf, types_1.GridEvents.cellMouseOver],
        onmousedown: [handleMouse, row, column, conf, types_1.GridEvents.cellMouseDown],
        ondblclick: [handleMouse, row, column, conf, types_1.GridEvents.cellDblClick],
        oncontextmenu: [handleMouse, row, column, conf, types_1.GridEvents.cellRightClick],
        ontouchstart: [handleMouse, row, column, conf, types_1.GridEvents.cellMouseDown],
        ontouchmove: [handleMouse, row, column, conf, types_1.GridSystemEvents.cellTouchMove],
        ontouchend: [handleMouse, row, column, conf, types_1.GridSystemEvents.cellTouchEnd],
    };
}
exports.getHandlers = getHandlers;
function getTreeCell(content, row, col, conf) {
    var isEditable = conf.$editable && conf.$editable.row === row.id && conf.$editable.col === col.id;
    var css = "";
    var cellAlign = col.align ? " dhx_align-" + col.align : "dhx_align-left";
    if (conf.dragMode && conf.dragItem === "row") {
        css +=
            (row.$drophere && !isEditable ? " dhx_grid-cell--drophere" : "") +
                (row.$dragtarget && !isEditable ? " dhx_grid-cell--dragtarget" : "") +
                (!isEditable ? " dhx_grid-cell--drag" : "");
    }
    var hiddenTitle = conf.tooltip ? (typeof col.tooltip === "boolean" ? col.tooltip : true) : col.tooltip;
    var parentPadding = 20 + row.$level * 20 - (row.$items ? 20 : 0);
    return dom_1.el(".dhx_grid-cell", {
        class: "dhx_tree-cell " + (col.$cellCss[row.id] || "") + " " + (row.$items ? "dhx_grid-expand-cell" : "") +
            (" " + (isEditable ? "dhx_tree-editing-cell" : "") + " " + css),
        style: {
            width: col.$width,
            lineHeight: conf.rowHeight - 1 + "px",
            padding: !row.$items ? "0 0 0 " + parentPadding + "px" : 0,
        },
        dhx_col_id: col.id,
    }, [
        row.$items
            ? dom_1.el(".dhx_grid-expand-cell-icon", {
                class: row.$opened ? "dxi dxi-chevron-up" : "dxi dxi-chevron-down",
                dhx_id: row.id,
                style: {
                    padding: row.$level ? "0 0 0 " + (4 + parentPadding) + "px" : "0 0 0 4px",
                },
            })
            : null,
        dom_1.el(".dhx_tree-cell", {
            class: cellAlign,
            title: hiddenTitle ? main_1.removeHTMLTags(row[col.id]) : null,
            style: {
                width: "100%",
                height: "100%",
            },
        }, [content]),
    ]);
}
exports.getTreeCell = getTreeCell;
function getEditorCell(row, col, conf) {
    return editors_1.getEditor(row, col, conf);
}
function getCells(conf) {
    if (!conf.data || !conf.columns) {
        return [];
    }
    var pos = conf.$positions;
    var data = conf.data ? conf.data.slice(pos.yStart, pos.yEnd) : [];
    var columns = conf.columns.filter(function (col) { return !col.hidden; }).slice(pos.xStart, pos.xEnd);
    return data.map(function (row, index) {
        var isLastRow = data.length - 1 === index;
        var rowCss = "";
        if (conf.rowCss) {
            rowCss = conf.rowCss(row);
        }
        if (row.$css) {
            rowCss += row.$css;
        }
        return dom_1.el(".dhx_grid-row", {
            style: { height: isLastRow ? conf.rowHeight + 1 : conf.rowHeight },
            dhx_id: row.id,
            class: rowCss,
            _key: row.id,
            _flags: dom_1.KEYED_LIST,
        }, row.$customRender
            ? [row.$customRender(row, conf)]
            : columns.map(function (col) {
                if (!col.hidden) {
                    var hiddenTitle = conf.tooltip
                        ? typeof col.tooltip === "boolean"
                            ? col.tooltip
                            : true
                        : col.tooltip;
                    var defaultTemplate = function (text) {
                        if (typeof text === "boolean" || col.type === "boolean") {
                            if (typeof text !== "string") {
                                return "" + Boolean(text);
                            }
                        }
                        return text || text === 0 ? text : "";
                    };
                    var content = col.template
                        ? col.template(row[col.id], row, col)
                        : defaultTemplate(row[col.id]);
                    // content can be a domvm node or a string
                    if (typeof content === "string") {
                        content = dom_1.el("div.dhx_cell-content", (conf.htmlEnable && col.htmlEnable !== false) || col.htmlEnable
                            ? { ".innerHTML": content }
                            : content);
                    }
                    var css = (((col.$cellCss && col.$cellCss[row.id]) || "") + " dhx_" + col.type + "-cell").replace(/\s+/g, " ");
                    var colWidth = col.$width;
                    var isEditable = conf.$editable &&
                        conf.$editable.row === row.id &&
                        conf.$editable.col === col.id;
                    if (isEditable || (col.type === "boolean" && (conf.editable || col.editable))) {
                        if (!(conf.splitAt &&
                            conf.columns.length !== conf.splitAt &&
                            conf.columns.indexOf(col) < conf.splitAt)) {
                            content = getEditorCell(row, col, conf).toHTML();
                            css += " dhx_grid-cell__editable";
                            if (conf.splitAt === conf.columns.indexOf(col) + 1) {
                                colWidth -= 1;
                            }
                        }
                    }
                    if (conf.type === "tree" && conf.firstColId === col.id) {
                        return getTreeCell(content, row, col, conf);
                    }
                    var colName = void 0;
                    if (col.type === "boolean") {
                        colName = core_1.findIndex(col.header, function (item) { return item.text !== undefined; });
                    }
                    if (conf.dragMode && conf.dragItem === "row") {
                        css +=
                            (row.$drophere && !isEditable ? " dhx_grid-cell--drophere" : "") +
                                (row.$dragtarget && !isEditable ? " dhx_grid-cell--dragtarget" : "") +
                                (!isEditable ? " dhx_grid-cell--drag" : "");
                    }
                    if (col.align) {
                        css += " dhx_align-" + col.align;
                    }
                    return dom_1.el(".dhx_grid-cell", {
                        class: css,
                        style: {
                            width: colWidth,
                            lineHeight: conf.rowHeight - 1 + "px",
                        },
                        _key: col.id,
                        title: hiddenTitle
                            ? col.type === "boolean"
                                ? colName.text
                                : main_1.removeHTMLTags(typeof content === "string" ? content : row[col.id])
                            : null,
                        dhx_col_id: col.id,
                    }, [content]);
                }
            }));
    });
}
exports.getCells = getCells;
function getSpans(config, frozen) {
    var spanCells = [];
    var columns = config.columns.filter(function (col) { return !col.hidden; });
    if (!columns.length) {
        return null;
    }
    if (!config.spans) {
        return null;
    }
    var spans = config.spans.sort(function (a, b) {
        return typeof a.row === "string" && typeof b.row === "string"
            ? a.row.localeCompare(b.row)
            : a.row - b.row;
    });
    var cellHeight = config.rowHeight;
    var _loop_1 = function (i) {
        var row = spans[i].row;
        var col = spans[i].column;
        var spanHeight = spans[i].rowspan;
        var spanWidth = spans[i].colspan;
        var spanCss = spans[i].css;
        var hiddenTitle = config.tooltip
            ? typeof spans[i].tooltip === "boolean"
                ? spans[i].tooltip
                : true
            : spans[i].tooltip;
        // [todo]
        if (spanHeight === 1) {
            return "continue";
        }
        var colIndex = core_1.findIndex(columns, function (item) { return "" + item.id === "" + col; });
        var rowIndex = core_1.findIndex(config.data, function (item) { return "" + item.id === "" + row; });
        if (colIndex < 0 || rowIndex < 0) {
            return "continue";
        }
        if (frozen === true &&
            ((spanWidth || 1) + colIndex > config.splitAt || colIndex + 1 > config.splitAt)) {
            return "continue";
        }
        var currCol = columns[colIndex];
        var currRow = config.data[rowIndex];
        if (currCol.hidden) {
            return "continue";
        }
        var content = spans[i].text ? spans[i].text : currRow[col] === undefined ? "" : currRow[col];
        var tooltipText = content;
        var t = function (text, _row, _col) { return (text || text === 0 ? text : ""); };
        var template = currCol.template || t;
        content = template(content, currRow, currCol);
        content =
            typeof content === "string"
                ? dom_1.el("div.dhx_span-cell-content", { ".innerHTML": content })
                : content;
        var top_1 = config.rowHeight * rowIndex - 1;
        var left = 0;
        for (var s = colIndex - 1; s >= 0; s--) {
            left += columns[s].$width;
        }
        var rowspanWithLastCol = colIndex === columns.length - 1;
        var colspanWithLastCol = colIndex + spanWidth === columns.length;
        var css = currCol.header[0].text ? "dhx_span-cell" : "dhx_span-cell dhx_span-cell--title";
        css += spanCss ? " " + spanCss : "";
        css += rowIndex === 0 ? " dhx_span-first-row" : "";
        css += colIndex === 0 ? " dhx_span-first-col" : "";
        css += rowspanWithLastCol || colspanWithLastCol ? " dhx_span-last-col" : "";
        css += !spanWidth ? " dhx_span-" + (currCol.type || "string") + "-cell" : " dhx_span-string-cell";
        css += currCol.align ? " dhx_align-" + currCol.align : " dhx_align-left";
        var width = spanWidth > 1 ? cells_1.getWidth(config.columns, spanWidth, colIndex) : currCol.$width;
        spanCells.push(dom_1.el("div", {
            class: css,
            style: {
                width: width,
                height: (spanHeight || 1) * cellHeight,
                top: top_1,
                left: left,
                lineHeight: config.rowHeight + "px",
            },
            title: hiddenTitle ? main_1.removeHTMLTags(tooltipText) : null,
        }, [content]));
    };
    for (var i = 0; i < spans.length; i++) {
        _loop_1(i);
    }
    return spanCells;
}
exports.getSpans = getSpans;
function getShifts(conf) {
    var columnsLeft = conf.columns.filter(function (col) { return !col.hidden; }).slice(0, conf.$positions.xStart);
    return {
        x: columnsLeft.reduce(function (sum, col) { return (sum += col.$width); }, 0),
        y: conf.$positions.yStart * conf.rowHeight,
    };
}
exports.getShifts = getShifts;


/***/ }),

/***/ "../ts-grid/sources/ui/FixedCols.ts":
/*!******************************************!*\
  !*** ../ts-grid/sources/ui/FixedCols.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var Cells_1 = __webpack_require__(/*! ./Cells */ "../ts-grid/sources/ui/Cells.ts");
var FixedRows_1 = __webpack_require__(/*! ./FixedRows */ "../ts-grid/sources/ui/FixedRows.ts");
function getFixedColsHeader(renderConfig, layout) {
    var columns = renderConfig.columns.filter(function (col) { return !col.hidden; }).slice(0, renderConfig.splitAt);
    var frozenHeaderCols = renderConfig.splitAt >= 0 &&
        FixedRows_1.getRows(__assign(__assign({}, renderConfig), { currentColumns: columns, $positions: __assign(__assign({}, renderConfig.$positions), { xStart: 0, xEnd: renderConfig.splitAt }) }), __assign(__assign({}, layout), { name: "header", position: "top" }));
    var headerRowsConfig = __assign(__assign({}, layout), { name: "header", position: "top" });
    var frozenHeader = frozenHeaderCols &&
        dom_1.el(".dhx_" + headerRowsConfig.name + "-fixed-cols", {
            style: {
                position: "absolute",
                top: 0,
                left: 0,
                zIndex: 999999,
            },
        }, frozenHeaderCols);
    return frozenHeader;
}
exports.getFixedColsHeader = getFixedColsHeader;
function getFixedCols(renderConfig, layout) {
    var hiddenCheck = renderConfig.columns.reduce(function (check, col) {
        return col.hidden ? check + 1 : check;
    }, 0);
    if (typeof renderConfig.splitAt !== "number") {
        return;
    }
    if (hiddenCheck === renderConfig.splitAt) {
        return;
    }
    var scrollBarWidth = renderConfig.$totalWidth <= layout.wrapper.width ? 0 : html_1.getScrollbarWidth();
    var fixedContentHeight = renderConfig.$totalHeight + renderConfig.headerHeight;
    var fixedColsHeight = (layout.sticky ? fixedContentHeight : layout.gridBodyHeight + renderConfig.headerHeight) -
        (fixedContentHeight > layout.gridBodyHeight ? scrollBarWidth : null);
    var columns = renderConfig.columns.filter(function (col) { return !col.hidden; }).slice(0, renderConfig.splitAt);
    renderConfig.fixedColumnsWidth = columns.reduce(function (total, item) { return (total += item.$width); }, 0);
    var fixedCols = Cells_1.getCells(__assign(__assign({}, renderConfig), { columns: columns, $positions: __assign(__assign({}, renderConfig.$positions), { xStart: 0, xEnd: renderConfig.splitAt }) }));
    var isSticky = layout.sticky;
    var footerRowsConfig = __assign(__assign({}, layout), { name: "footer", position: "bottom" });
    var frozenFooterCols = renderConfig.splitAt >= 0 &&
        FixedRows_1.getRows(__assign(__assign({}, renderConfig), { currentColumns: columns, $positions: __assign(__assign({}, renderConfig.$positions), { xStart: 0, xEnd: renderConfig.splitAt }) }), __assign(__assign({}, layout), { name: "footer", position: "bottom" }));
    var frozenFooter = isSticky
        ? frozenFooterCols &&
            dom_1.el(".dhx_" + footerRowsConfig.name + "-fixed-cols", {
                style: {
                    position: "absolute",
                    bottom: 0,
                    left: 0,
                    zIndex: 999999,
                },
            }, frozenFooterCols)
        : null;
    var pos = renderConfig.$positions;
    var spans = Cells_1.getSpans(renderConfig, true);
    return dom_1.el(".dhx_grid-fixed-cols-wrap", {
        style: {
            height: fixedColsHeight > layout.gridBodyHeight
                ? layout.gridBodyHeight - scrollBarWidth
                : fixedColsHeight,
            paddingTop: renderConfig.headerHeight,
            overflow: "hidden",
            width: renderConfig.fixedColumnsWidth,
        },
    }, [
        dom_1.el(".dhx_grid-fixed-cols", __assign({ style: {
                top: -renderConfig.scroll.top + renderConfig.headerHeight - 1 + "px",
                paddingTop: layout.shifts.y,
                height: renderConfig.$totalHeight,
                position: "absolute",
            }, _flags: dom_1.KEYED_LIST }, Cells_1.getHandlers(pos.yStart, pos.xStart, renderConfig)), __spreadArrays(fixedCols, [dom_1.el(".dhx_span-spans", spans)])),
        renderConfig.$footer && frozenFooter,
        dom_1.el(".dhx_frozen-cols-border"),
    ]);
}
exports.getFixedCols = getFixedCols;


/***/ }),

/***/ "../ts-grid/sources/ui/FixedRows.ts":
/*!******************************************!*\
  !*** ../ts-grid/sources/ui/FixedRows.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var cells_1 = __webpack_require__(/*! ../helpers/cells */ "../ts-grid/sources/helpers/cells.ts");
var main_1 = __webpack_require__(/*! ../helpers/main */ "../ts-grid/sources/helpers/main.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-grid/sources/types.ts");
function handleMouse(col, config, type, e) {
    if (!type)
        return;
    var systemEvent = type.toLocaleLowerCase().includes("touch");
    if (systemEvent) {
        config._events.fire(type, [col, e]);
    }
    else {
        config.events.fire(type, [col, e]);
    }
}
function getHandlers(column, rowName, config) {
    return {
        onclick: [handleMouse, column, config, types_1.GridEvents[rowName + "CellClick"]],
        onmouseover: [handleMouse, column, config, types_1.GridEvents[rowName + "CellMouseOver"]],
        onmousedown: [handleMouse, column, config, types_1.GridEvents[rowName + "CellMouseDown"]],
        ontouchstart: [handleMouse, column, config, types_1.GridEvents[rowName + "CellMouseDown"]],
        ondblclick: [handleMouse, column, config, types_1.GridEvents[rowName + "CellDblClick"]],
        oncontextmenu: [handleMouse, column, config, types_1.GridEvents[rowName + "CellRightClick"]],
        ontouchmove: [handleMouse, column, config, types_1.GridSystemEvents[rowName + "CellTouchMove"]],
        ontouchend: [handleMouse, column, config, types_1.GridSystemEvents[rowName + "CelltouchEnd"]],
    };
}
function buildRows(columns, name) {
    var header = columns.map(function (col) { return col[name] || [{}]; });
    return main_1.transpose(header);
}
function getCustomContentCell(cell, column, config, rowName, css) {
    if (css === void 0) { css = ""; }
    var rowHeight = config[rowName + "RowHeight"] - 10 + 1 || 31;
    var type = column.type ? "dhx_" + column.type + "-cell" : "dhx_string_cell";
    // TODO: over with index of filter inside of header or footer
    return dom_1.el(".dhx_grid-" + rowName + "-cell.dhx_grid-custom-content-cell." + type, __assign({ class: css, style: {
            width: column.$width,
            lineHeight: rowHeight + "px",
        } }, getHandlers(column, rowName, config)), [config.content[cell.content] && config.content[cell.content].toHtml(column, config)]);
}
function getRows(config, rowsConfig) {
    if (!config.data || !config.columns) {
        return [];
    }
    var rowName = rowsConfig.name;
    var columns = config.currentColumns.filter(function (col) { return !col.hidden; });
    var rowHeight = config[rowName + "RowHeight"] || 40;
    var rows = buildRows(columns, rowName);
    return rows.map(function (row, j) {
        return dom_1.el(".dhx_" + rowName + "-row", { style: { height: rowHeight } }, row.map(function (cell, i) {
            var hiddenTitle = config.tooltip
                ? typeof columns[i].tooltip === "boolean"
                    ? columns[i].tooltip
                    : true
                : columns[i].tooltip;
            var css = cell.css || "";
            var column = columns[i];
            var sortIconCss = "dxi dxi-sort-variant dhx_grid-sort-icon";
            if (config.sortBy && "" + column.id === config.sortBy && !cell.content) {
                sortIconCss += " dhx_grid-sort-icon--" + (config.sortDir || "asc");
                css += " dhx_grid-" + rowName + "-cell--sorted ";
            }
            var sortIconVisible = main_1.isSortable(config, column) && cell.text && rowName !== "footer";
            if (sortIconVisible) {
                css += " dhx_grid-header-cell--sortable";
            }
            var isFirstCol = i === 0 ? "dhx_first-column-cell" : "";
            var isLastCol = i === columns.length - 1 ? "dhx_last-column-cell" : "";
            if (!cell.content) {
                css += " dhx_grid-header-cell--" + (column.type === "number" ? "align_right" : "align_left") + " ";
            }
            css += isFirstCol + " " + isLastCol;
            var resizable = column.resizable !== undefined ? column.resizable : config.resizable;
            if (resizable) {
                resizable = dom_1.el("div", { class: "dhx_resizer_grip_wrap" }, [
                    dom_1.el("div", {
                        class: "dhx_resizer_grip",
                        dhx_resized: column.id,
                        style: {
                            height: rows.length * 100 + "%",
                        },
                    }, [dom_1.el("div", { class: "dhx_resizer_grip_line" })]),
                ]);
                if (rowName === "footer" || j > 0) {
                    resizable = null;
                }
            }
            if (cell.align) {
                css += " dhx_align-" + cell.align;
            }
            if (cell.content) {
                return getCustomContentCell(cell, column, config, rowName, css);
            }
            return dom_1.el(".dhx_grid-" + rowName + "-cell", __assign(__assign({ class: css.trim(), dhx_id: column.id, _key: i, style: {
                    width: column.$width,
                    lineHeight: rowHeight + 1 + "px",
                } }, getHandlers(column, rowName, config)), { title: hiddenTitle ? main_1.removeHTMLTags(cell.text) : null }), [
                dom_1.el("div", {
                    class: "dhx_grid-header-cell-text",
                }, [
                    dom_1.el("div", {
                        ".innerHTML": cell.text,
                    }),
                    resizable || null,
                ]),
                sortIconVisible && dom_1.el("div", { class: sortIconCss }),
            ]);
        }));
    });
}
exports.getRows = getRows;
function getSpans(config, rowsConfig) {
    var cols = config.columns.filter(function (col) { return !col.hidden; });
    var rows = main_1.transpose(cols.map(function (col) { return col[rowsConfig.name] || []; }));
    var height = config[rowsConfig.name + "RowHeight"] || 40;
    var leftShift = 0;
    return rows.map(function (row, i) {
        leftShift = 0;
        return dom_1.el(".dhx_span-row", {
            style: { top: height * i + "px", height: height },
            class: "dhx_header-row",
        }, row
            .map(function (cell, cellIdx) {
            var col = cols[cellIdx];
            var hiddenTitle;
            config.spans &&
                config.spans.forEach(function (span) {
                    if (span.column === col.id) {
                        hiddenTitle = config.tooltip
                            ? typeof span.tooltip === "boolean"
                                ? span.tooltip
                                : true
                            : span.tooltip;
                    }
                });
            leftShift += col.hidden ? 0 : col.$width;
            var isFirstCol = cellIdx === 0 ? "dhx_first-column-cell" : "";
            var isLastCol = cellIdx === cols.length - 1 || (cell.colspan || 0) + (cellIdx - 1) >= cols.length - 1
                ? "dhx_last-column-cell"
                : "";
            var spanHeight = height;
            if (cell.rowspan) {
                spanHeight = spanHeight * cell.rowspan - 1;
            }
            var sortIconVisible = main_1.isSortable(config, col) && cell.rowspan && cell.text && rowsConfig.name !== "footer";
            var sortIconCss = "dxi dxi-sort-variant dhx_grid-sort-icon";
            if (config.sortBy && "" + col.id === config.sortBy && !cell.content) {
                sortIconCss += " dhx_grid-sort-icon--" + (config.sortDir || "asc");
            }
            var css = isFirstCol + " " + isLastCol + " " + (cell.rowspan ? "dhx_span-cell__rowspan" : "") + " " + (cell.align
                ? "dhx_align-" + cell.align
                : col.align
                    ? "dhx_align-" + col.align
                    : "dhx_align-left");
            if (sortIconVisible) {
                css += " dhx_grid-header-cell--sortable";
            }
            if (!cell.content) {
                css += " dhx_grid-header-cell--" + (col.type === "number" ? "align_right" : "align_left") + " ";
            }
            var borderLeft = "";
            if (leftShift - col.$width > 0) {
                borderLeft = "1px solid #e4e4e4";
            }
            return cell.colspan || cell.rowspan
                ? dom_1.el(".dhx_span-cell", {
                    style: {
                        width: cells_1.getWidth(cols, cell.colspan, cellIdx),
                        height: spanHeight,
                        left: leftShift - col.$width,
                        borderLeft: borderLeft,
                        top: height * i,
                        lineHeight: spanHeight + "px",
                    },
                    class: css.trim(),
                    title: hiddenTitle ? main_1.removeHTMLTags(cell.text) : null,
                    dhx_id: col.id,
                }, [
                    dom_1.el("div", { ".innerHTML": cell.text }),
                    sortIconVisible && dom_1.el("div", { class: sortIconCss }),
                ])
                : null;
        })
            .filter(function (cell) { return cell; }));
    });
}
exports.getSpans = getSpans;
function getFixedRows(config, rowsConfig) {
    var _a;
    var rows = getRows(config, rowsConfig);
    var spans = getSpans(config, rowsConfig);
    var fixedCols = null;
    if (rowsConfig.name === "footer" && !rowsConfig.sticky) {
        fixedCols =
            config.splitAt >= 0 &&
                getRows(__assign(__assign({}, config), { currentColumns: config.columns.filter(function (col) { return !col.hidden; }).slice(0, config.splitAt), $positions: __assign(__assign({}, config.$positions), { xStart: 0, xEnd: config.splitAt }) }), rowsConfig);
    }
    var styles = (_a = {
            position: "sticky"
        },
        _a[rowsConfig.position] = 0,
        _a);
    var left;
    if (!rowsConfig.sticky) {
        styles.left = -config.scroll.left;
        left = -config.scroll.left;
        styles.position = "relative";
    }
    var BORDERS = 2;
    return dom_1.el(".dhx_" + rowsConfig.name + "-wrapper", {
        class: rowsConfig.sticky ? "" : "dhx_compatible-" + rowsConfig.name,
        style: __assign(__assign({}, styles), { left: rowsConfig.sticky ? left : 0, height: config[rowsConfig.name + "Height"], width: rowsConfig.sticky ? config.$totalWidth : rowsConfig.wrapper.width - BORDERS }),
    }, [
        dom_1.el(".dhx_grid-" + rowsConfig.name, {
            style: {
                height: config[rowsConfig.name + "Height"],
                left: left,
                paddingLeft: rowsConfig.shifts.x,
                width: config.$totalWidth,
            },
        }, [
            dom_1.el(".dhx_" + rowsConfig.name + "-rows", __spreadArrays(rows)),
            dom_1.el(".dhx_" + rowsConfig.name + "-spans", {
                style: {
                    marginLeft: -rowsConfig.shifts.x,
                },
                class: ".dhx_" + rowsConfig.name + "-rows",
            }, spans),
            fixedCols &&
                dom_1.el(".dhx_" + rowsConfig.name + "-fixed-cols", {
                    style: {
                        position: "absolute",
                        top: 0,
                        left: config.scroll.left + "px",
                        height: "100%",
                    },
                }, fixedCols),
        ]),
        dom_1.el("div", { style: { width: config.$totalWidth } }),
    ]);
}
exports.getFixedRows = getFixedRows;


/***/ }),

/***/ "../ts-grid/sources/ui/content.ts":
/*!****************************************!*\
  !*** ../ts-grid/sources/ui/content.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var ts_combobox_1 = __webpack_require__(/*! @dhx/ts-combobox */ "../ts-combobox/index.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-grid/sources/types.ts");
var inputDelay;
function onInput(eventSystem, colId, filter, filterObj, e) {
    var inputHandler = function () {
        var val = e.path ? e.path[0].value : e.explicitOriginalTarget.value;
        filterObj.value[colId] = val;
        eventSystem.fire(types_1.GridEvents.filterChange, [val, colId, filter]);
        eventSystem.fire(types_1.GridEvents.headerInput, [val, colId, filter]); // TODO: remove sute_7.0
    };
    if (filter === "selectFilter") {
        inputHandler();
        return;
    }
    if (inputDelay) {
        clearTimeout(inputDelay);
    }
    inputDelay = setTimeout(inputHandler, 250);
}
function applyMathMethod(column, config, method, validate) {
    if (!column || !config || !method) {
        return;
    }
    var id = column.id;
    var columnData = validate
        ? validate(id, config.data)
        : config.data.reduce(function (items, item) {
            if (item[id] !== undefined && item[id] !== "" && !isNaN(item[id])) {
                items.push(parseFloat(item[id]));
            }
            return items;
        }, []);
    // [todo] move to treegrid
    var roots = columnData;
    if (config.type === "tree") {
        roots = config.data.reduce(function (total, item) {
            if (item.$level === 0) {
                if (item[id] !== undefined && item[id] !== "" && !isNaN(item[id])) {
                    total.push(parseFloat(item[id]) || 0);
                }
                else {
                    var value_1 = 0;
                    config.datacollection.eachChild(item.id, function (cell) {
                        if (!config.datacollection.haveItems(cell.id)) {
                            value_1 += parseFloat(cell[id]);
                        }
                    });
                    total.push(value_1);
                }
            }
            return total;
        }, []);
    }
    return method(columnData, roots);
}
function getContent() {
    var _this = this;
    return {
        inputFilter: {
            element: {},
            toHtml: function (column, config) {
                var colId = column.id.toString();
                this.element[colId] = dom_1.el("label.dhx_grid-filter__label.dxi.dxi-magnify", [
                    dom_1.el("input", {
                        type: "text",
                        class: "dhx_input dhx_grid-filter",
                        oninput: [onInput, config.events, column.id, "inputFilter", this],
                        _key: column.id,
                        value: this.value[column.id] || "",
                    }),
                ]);
                return this.element[colId];
            },
            match: function (value, match) { return new RegExp("" + match, "i").test(value); },
            value: {},
        },
        selectFilter: {
            element: {},
            toHtml: function (column, config) {
                var colId = column.id.toString();
                this.element[colId] = dom_1.el("label.dhx_grid-filter__label.dxi.dxi-menu-down", [
                    dom_1.el("select.dxi.dxi-menu-down", {
                        type: "text",
                        class: "dhx_input dhx_grid-filter dhx_grid-filter--select",
                        onchange: [onInput, config.events, column.id, "selectFilter", this],
                        _key: column.id,
                        value: this.value[column.id] || "",
                    }, __spreadArrays([
                        dom_1.el("option", { value: "" }, "")
                    ], column.$uniqueData.map(function (val) { return val && dom_1.el("option", { value: val }, val); }))),
                ]);
                return this.element[colId];
            },
            match: function (value, match) { return value === match; },
            value: {},
        },
        comboFilter: {
            element: {},
            toHtml: function (column, config) {
                var combo;
                var colId = column.id.toString();
                if (!this.element[colId]) {
                    var conf = column.header.filter(function (item) { return item.filterConfig !== undefined; })[0];
                    if (conf && conf.filterConfig) {
                        combo = new ts_combobox_1.Combobox(null, JSON.parse(JSON.stringify(conf.filterConfig)));
                    }
                    else {
                        combo = new ts_combobox_1.Combobox(null, {});
                    }
                    combo.data.parse(column.$uniqueData.map(function (value) { return ({ value: value }); }));
                    config.events.on(ts_data_1.DataEvents.load, function () {
                        combo.data.parse(column.$uniqueData.map(function (value) { return ({ value: value }); }));
                    });
                    this.element[colId] = combo;
                    combo.events.on("change", function (id) {
                        if (id) {
                            var item = void 0;
                            var value = void 0;
                            if (combo.data.getItem(id)) {
                                item = combo.list.selection.getItem();
                                value = item.value;
                                config.events.fire(types_1.GridEvents.filterChange, [value, colId, "comboFilter"]);
                                config.events.fire(types_1.GridEvents.headerInput, [value, colId, "comboFilter"]); // TODO: remove suite_7.0
                            }
                            else {
                                config.events.fire(types_1.GridEvents.filterChange, ["", colId, "comboFilter"]);
                                config.events.fire(types_1.GridEvents.headerInput, ["", colId, "comboFilter"]); // TODO: remove suite_7.0
                            }
                        }
                    });
                    combo.popup.events.on("afterHide", function () {
                        if (!combo.list.selection.getItem()) {
                            combo.clear();
                            config.events.fire(types_1.GridEvents.filterChange, ["", colId, "comboFilter"]);
                            config.events.fire(types_1.GridEvents.headerInput, ["", colId, "comboFilter"]); // TODO: remove suite_7.0
                        }
                    });
                }
                else {
                    combo = this.element[column.id];
                }
                return dom_1.inject(combo.getRootView());
            },
            match: function (value, match) {
                return new RegExp("" + match, "i").test(value) &&
                    new RegExp("" + match, "i").exec(value).index === 0;
            },
            destroy: function () {
                if (_this.content && _this.content.comboFilter.element) {
                    var comboFilters = _this.content.comboFilter.element;
                    for (var combo in comboFilters) {
                        comboFilters[combo].destructor();
                        delete comboFilters[combo];
                    }
                }
            },
            value: {},
        },
        sum: {
            calculate: function (_col, roots) { return roots.reduce(function (sum, c) { return (sum += parseFloat(c) || 0); }, 0).toFixed(3); },
            toHtml: function (column, config) {
                return applyMathMethod(column, config, this.calculate);
            },
        },
        avg: {
            calculate: function (_col, roots) { return (roots.reduce(function (sum, c) { return (sum += c); }, 0) / _col.length).toFixed(3); },
            toHtml: function (column, config) {
                return applyMathMethod(column, config, this.calculate);
            },
        },
        min: {
            calculate: function (col) { return Math.min.apply(Math, col).toFixed(3); },
            toHtml: function (column, config) {
                return applyMathMethod(column, config, this.calculate);
            },
        },
        max: {
            calculate: function (col) { return Math.max.apply(Math, col).toFixed(3); },
            toHtml: function (column, config) {
                return applyMathMethod(column, config, this.calculate);
            },
        },
        count: {
            calculate: function (_col, roots) {
                // [todo]
                return roots.reduce(function (count, c) { return (count += c); }, 0);
            },
            validate: function (colId, data) {
                return data.reduce(function (items, item) {
                    if (item[colId] !== undefined && item[colId] !== "") {
                        if (isNaN(item)) {
                            items.push(1);
                        }
                        else {
                            items.push(item);
                        }
                    }
                    return items;
                }, []);
            },
            toHtml: function (column, config) {
                return applyMathMethod(column, config, this.calculate, this.validate);
            },
        },
    };
}
exports.getContent = getContent;


/***/ }),

/***/ "../ts-grid/sources/ui/editors/CheckboxEditor.ts":
/*!*******************************************************!*\
  !*** ../ts-grid/sources/ui/editors/CheckboxEditor.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var types_1 = __webpack_require__(/*! ../../types */ "../ts-grid/sources/types.ts");
var CheckboxEditor = /** @class */ (function () {
    function CheckboxEditor(row, col, config) {
        this._config = config;
        this._cell = { row: row, col: col };
        this._initHandlers();
    }
    CheckboxEditor.prototype._startEdit = function (e) {
        if (!this._config.events.fire(types_1.GridEvents.beforeEditStart, [
            this._cell.row,
            this._cell.col,
            "checkbox",
        ])) {
            e.preventDefault();
            return;
        }
        this._config.events.fire(types_1.GridEvents.afterEditStart, [this._cell.row, this._cell.col, "checkbox"]);
    };
    CheckboxEditor.prototype.endEdit = function () {
        var value = this._checked;
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
    };
    CheckboxEditor.prototype.toHTML = function () {
        if (this._checked === undefined) {
            this._checked = this._cell.row[this._cell.col.id];
        }
        return dom_1.el("label.dhx_checkbox.dhx_cell-editor__checkbox", [
            dom_1.el("input.dhx_checkbox__input", {
                type: "checkbox",
                _hooks: {
                    didInsert: this._handlers.didInsert,
                },
                _key: "cell_editor",
                dhx_id: "cell_editor",
                checked: this._checked,
                style: {
                    userSelect: "none",
                },
                oninput: this._handlers.onClick,
            }),
            dom_1.el("span.dhx_checkbox__visual-input"),
        ]);
    };
    CheckboxEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onChange: function (e) {
                _this._checked = e.target.checked;
                _this.endEdit();
            },
            didInsert: function (node) {
                _this._checkbox = node.el.parentNode.lastChild;
                _this._input = node.el.parentNode.firstChild;
                _this._input.addEventListener("change", _this._handlers.onChange);
            },
            onClick: function (e) {
                _this._startEdit(e);
            },
        };
    };
    return CheckboxEditor;
}());
exports.CheckboxEditor = CheckboxEditor;


/***/ }),

/***/ "../ts-grid/sources/ui/editors/ComboboxEditor.ts":
/*!*******************************************************!*\
  !*** ../ts-grid/sources/ui/editors/ComboboxEditor.ts ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var types_1 = __webpack_require__(/*! ../../types */ "../ts-grid/sources/types.ts");
var ts_combobox_1 = __webpack_require__(/*! @dhx/ts-combobox */ "../ts-combobox/index.ts");
var ComboboxEditor = /** @class */ (function () {
    function ComboboxEditor(row, col, config) {
        this._config = config;
        this._cell = { row: row, col: col };
        this._initHandlers();
    }
    ComboboxEditor.prototype.endEdit = function (withoutSave) {
        var value;
        if (!withoutSave) {
            value = this._input.getValue();
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            this._input.popup.hide();
            document.removeEventListener("click", this._handlers.onOuterClick);
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.focus();
        }
    };
    ComboboxEditor.prototype.toHTML = function () {
        var _this = this;
        var content = this._cell.col.options.map(function (item) {
            return { id: "" + item, value: item };
        }) || [];
        if (!this._input) {
            this._input = new ts_combobox_1.Combobox(null, {
                readonly: true,
                cellHeight: 37,
                css: "dhx_cell-editor__combobox",
            });
            this._input.data.parse(content);
            this._input.setValue(this._cell.row[this._cell.col.id]);
        }
        document.addEventListener("click", this._handlers.onOuterClick);
        this._config.$editable.editor = this;
        dom_1.awaitRedraw().then(function () {
            var holderNode = _this._input.getRootView().refs.holder.el;
            _this._input.popup.getContainer().style.width = holderNode.offsetWidth + "px";
            _this._input.popup.show(holderNode);
        });
        return dom_1.inject(this._input.getRootView());
    };
    ComboboxEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onOuterClick: function (e) {
                if (!(e.target instanceof Node &&
                    _this._input.getRootNode() &&
                    _this._input.getRootNode().contains(e.target))) {
                    _this.endEdit();
                }
            },
        };
    };
    return ComboboxEditor;
}());
exports.ComboboxEditor = ComboboxEditor;


/***/ }),

/***/ "../ts-grid/sources/ui/editors/DateEditor.ts":
/*!***************************************************!*\
  !*** ../ts-grid/sources/ui/editors/DateEditor.ts ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var types_1 = __webpack_require__(/*! ../../types */ "../ts-grid/sources/types.ts");
var ts_calendar_1 = __webpack_require__(/*! @dhx/ts-calendar */ "../ts-calendar/index.ts");
var ts_popup_1 = __webpack_require__(/*! @dhx/ts-popup */ "../ts-popup/index.ts");
var DateEditor = /** @class */ (function () {
    function DateEditor(row, col, config) {
        var _this = this;
        this._config = config;
        this._cell = { row: row, col: col };
        this._calendar = new ts_calendar_1.Calendar(null, { dateFormat: col.dateFormat });
        var value = this._cell.row[this._cell.col.id];
        var dateFormat = this._calendar.config.dateFormat;
        if (ts_calendar_1.stringToDate(value, dateFormat, true) || value instanceof Date) {
            this._calendar.setValue(value);
            this._value = this._calendar.getValue();
            this._cell.row[this._cell.col.id] = this._value;
        }
        this._popup = new ts_popup_1.Popup({ css: "dhx_widget--bordered" });
        this._popup.attach(this._calendar);
        this._calendar.events.on(ts_calendar_1.CalendarEvents.change, function () {
            _this.endEdit(false, true);
        });
        this._popup.events.on(ts_popup_1.PopupEvents.afterHide, function () {
            _this.endEdit();
        });
        this._initHandlers();
    }
    DateEditor.prototype.endEdit = function (withoutSave, calendarChange) {
        if (!this._handlers) {
            return;
        }
        var dateFormat = this._calendar.config.dateFormat;
        var value = this._cell.row[this._cell.col.id];
        if (!withoutSave) {
            if (value instanceof Date || calendarChange) {
                this._value = this._calendar.getValue();
                this._input.value = this._value;
                this._popup.hide();
                return;
            }
            else if (ts_calendar_1.stringToDate(this._input.value, dateFormat, true) &&
                this._input.value.length === value.length) {
                this._value = this._input.value;
            }
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [this._value, this._cell.row, this._cell.col])) {
            this._input.removeEventListener("focus", this._handlers.onFocus);
            this._input.removeEventListener("change", this._handlers.onChange);
            this._popup.destructor();
            this._calendar.destructor();
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [this._value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.focus();
        }
    };
    DateEditor.prototype.toHTML = function () {
        var value = this._cell.row[this._cell.col.id];
        this._config.$editable.editor = this;
        return dom_1.el("input.dhx_cell-editor.dhx_cell-editor__input.dhx_cell-editor__datepicker", {
            _hooks: {
                didInsert: this._handlers.didInsert,
            },
            _key: "cell_editor",
            dhx_id: "cell_editor",
            value: value,
        });
    };
    DateEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onFocus: function () {
                dom_1.awaitRedraw().then(function () {
                    _this._popup.show(_this._input, {
                        centering: true,
                        mode: "bottom",
                    });
                });
            },
            onChange: function () {
                _this.endEdit();
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                _this._input.addEventListener("focus", _this._handlers.onFocus);
                _this._input.addEventListener("change", _this._handlers.onChange);
                input.focus();
                input.setSelectionRange(input.value.length, input.value.length);
            },
        };
    };
    return DateEditor;
}());
exports.DateEditor = DateEditor;


/***/ }),

/***/ "../ts-grid/sources/ui/editors/InputEditor.ts":
/*!****************************************************!*\
  !*** ../ts-grid/sources/ui/editors/InputEditor.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var types_1 = __webpack_require__(/*! ../../types */ "../ts-grid/sources/types.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var InputEditor = /** @class */ (function () {
    function InputEditor(row, col, config) {
        this._config = config;
        this._cell = { row: row, col: col };
        this._initHandlers();
    }
    InputEditor.prototype.endEdit = function (withoutSave) {
        var value;
        if (!withoutSave) {
            value = this._input.value;
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            this._input.removeEventListener("blur", this._handlers.onBlur);
            this._input.removeEventListener("change", this._handlers.onChange);
            if (this._cell.col.type !== "string" && core_1.isNumeric(value)) {
                value = parseFloat(value);
            }
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.focus();
        }
    };
    InputEditor.prototype.toHTML = function () {
        var content = this._cell.row[this._cell.col.id];
        if (this._input) {
            content = this._input.value;
        }
        this._config.$editable.editor = this;
        return dom_1.el("input.dhx_cell-editor.dhx_cell-editor__input", {
            _hooks: {
                didInsert: this._handlers.didInsert,
            },
            _key: "cell_editor",
            dhx_id: "cell_editor",
            value: content,
        });
    };
    InputEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onBlur: function () {
                _this.endEdit();
            },
            onChange: function () {
                _this.endEdit();
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                input.focus();
                input.setSelectionRange(0, input.value.length);
                input.addEventListener("change", _this._handlers.onChange);
                input.addEventListener("blur", _this._handlers.onBlur);
            },
        };
    };
    return InputEditor;
}());
exports.InputEditor = InputEditor;


/***/ }),

/***/ "../ts-grid/sources/ui/editors/SelectEditor.ts":
/*!*****************************************************!*\
  !*** ../ts-grid/sources/ui/editors/SelectEditor.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var types_1 = __webpack_require__(/*! ../../types */ "../ts-grid/sources/types.ts");
var SelectEditor = /** @class */ (function () {
    function SelectEditor(row, col, config) {
        this._config = config;
        this._cell = { row: row, col: col };
        this._initHandlers();
    }
    SelectEditor.prototype.endEdit = function (withoutSave) {
        var value;
        if (!withoutSave) {
            value = this._input.value;
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            this._input.removeEventListener("blur", this._handlers.onBlur);
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.focus();
        }
    };
    SelectEditor.prototype.toHTML = function () {
        var content = this._cell.col.options || [];
        var selected = this._cell.row[this._cell.col.id];
        if (this._input) {
            selected = this._input.options[this._input.selectedIndex].value;
        }
        var options = content.map(function (item) {
            return dom_1.el("option", {
                selected: item === selected,
            }, item);
        });
        this._config.$editable.editor = this;
        return dom_1.el("select.dhx_cell-editor.dhx_cell-editor__select", {
            _hooks: {
                didInsert: this._handlers.didInsert,
            },
            _key: "cell_editor",
            dhx_id: "cell_editor",
        }, options);
    };
    SelectEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onBlur: function () {
                _this.endEdit();
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                input.focus();
                input.addEventListener("blur", _this._handlers.onBlur);
            },
        };
    };
    return SelectEditor;
}());
exports.SelectEditor = SelectEditor;


/***/ }),

/***/ "../ts-grid/sources/ui/editors/editors.ts":
/*!************************************************!*\
  !*** ../ts-grid/sources/ui/editors/editors.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! ../../types */ "../ts-grid/sources/types.ts");
var InputEditor_1 = __webpack_require__(/*! ./InputEditor */ "../ts-grid/sources/ui/editors/InputEditor.ts");
var SelectEditor_1 = __webpack_require__(/*! ./SelectEditor */ "../ts-grid/sources/ui/editors/SelectEditor.ts");
var DateEditor_1 = __webpack_require__(/*! ./DateEditor */ "../ts-grid/sources/ui/editors/DateEditor.ts");
var CheckboxEditor_1 = __webpack_require__(/*! ./CheckboxEditor */ "../ts-grid/sources/ui/editors/CheckboxEditor.ts");
var ComboboxEditor_1 = __webpack_require__(/*! ./ComboboxEditor */ "../ts-grid/sources/ui/editors/ComboboxEditor.ts");
var lastEditor = {
    cell: {
        row: null,
        col: null,
    },
    editor: null,
    gridId: null,
};
var editHandler;
function getEditor(row, col, conf) {
    var type = col.type === "boolean" ? "checkbox" : conf.$editable.editorType;
    if (lastEditor.cell.row === row.id &&
        lastEditor.cell.col === col.id &&
        lastEditor.gridId === conf.gridId) {
        return lastEditor.editor;
    }
    lastEditor = {
        cell: {
            row: row.id,
            col: col.id,
        },
        editor: lastEditor.editor,
        gridId: conf.gridId,
    };
    if (!editHandler) {
        editHandler = function () {
            lastEditor = {
                cell: {
                    row: null,
                    col: null,
                },
                editor: null,
                gridId: null,
            };
        };
        conf.events.on(types_1.GridEvents.afterEditEnd, editHandler);
    }
    switch (type) {
        case "input":
            return (lastEditor.editor = new InputEditor_1.InputEditor(row, col, conf));
        case "select":
            return (lastEditor.editor = new SelectEditor_1.SelectEditor(row, col, conf));
        case "datePicker":
            return (lastEditor.editor = new DateEditor_1.DateEditor(row, col, conf));
        case "checkbox":
            return (lastEditor.editor = new CheckboxEditor_1.CheckboxEditor(row, col, conf));
        case "combobox":
            return (lastEditor.editor = new ComboboxEditor_1.ComboboxEditor(row, col, conf));
        default:
            return (lastEditor.editor = new InputEditor_1.InputEditor(row, col, conf));
    }
}
exports.getEditor = getEditor;


/***/ }),

/***/ "../ts-grid/sources/ui/render.ts":
/*!***************************************!*\
  !*** ../ts-grid/sources/ui/render.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var data_1 = __webpack_require__(/*! ../helpers/data */ "../ts-grid/sources/helpers/data.ts");
var main_1 = __webpack_require__(/*! ../helpers/main */ "../ts-grid/sources/helpers/main.ts");
var Cells_1 = __webpack_require__(/*! ./Cells */ "../ts-grid/sources/ui/Cells.ts");
var FixedCols_1 = __webpack_require__(/*! ./FixedCols */ "../ts-grid/sources/ui/FixedCols.ts");
var FixedRows_1 = __webpack_require__(/*! ./FixedRows */ "../ts-grid/sources/ui/FixedRows.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var BORDERS = 2;
function getRenderConfig(obj, data, wrapperSizes) {
    var config = obj.config;
    var columns = config.columns.filter(function (col) { return !col.hidden; });
    var positions = data_1.calculatePositions(wrapperSizes.width, wrapperSizes.height, obj._scroll, config);
    var currentColumns = columns.slice(positions.xStart, positions.xEnd);
    return __assign(__assign({}, config), { data: data, scroll: obj._scroll, $positions: positions, headerHeight: config.$headerLevel * config.headerRowHeight, footerHeight: config.$footerLevel * config.footerRowHeight, firstColId: columns[0].id, events: obj.events, _events: obj._events, currentColumns: currentColumns, sortBy: obj._sortBy, sortDir: obj._sortDir, content: obj.content, gridId: obj._uid });
}
function getElementSizes(element) {
    if (!element) {
        return;
    }
    var styles = element.currentStyle || window.getComputedStyle(element);
    var paddingsByWidth = parseFloat(styles.paddingLeft) + parseFloat(styles.paddingRight) || 0;
    var paddingsByHeight = parseFloat(styles.paddingTop) + parseFloat(styles.paddingBottom) || 0;
    return {
        width: element.clientWidth - paddingsByWidth,
        height: element.clientHeight - paddingsByHeight,
    };
}
function getGridData(renderConfig, shifts) {
    var content = Cells_1.getCells(renderConfig);
    var contentSpans = Cells_1.getSpans(renderConfig);
    var resizedLine;
    var colums = renderConfig.columns.filter(function (col) { return !col.hidden; });
    if (renderConfig.$resizing) {
        var colIndex = core_1.findIndex(colums, function (col) { return col.id === renderConfig.$resizing; });
        var firstCellLeft = colums.slice(0, colIndex).reduce(function (total, c) { return (total += c.$width); }, 0) + colums[colIndex].$width;
        resizedLine = dom_1.el(".dhx_grid-resize-line", {
            style: {
                top: 0,
                left: firstCellLeft,
                height: renderConfig.$totalHeight,
            },
        });
    }
    var selection = renderConfig.selection ? renderConfig.selection.toHTML() : null;
    selection =
        typeof selection === "string" ? dom_1.el("div.dhx_selection", { ".innerHTML": selection }) : selection;
    var pos = renderConfig.$positions;
    var events = {};
    function getCellInfo(e) {
        var rowId = html_1.locate(e, "dhx_id");
        var colId = html_1.locate(e, "dhx_col_id");
        var row = renderConfig.data.filter(function (item) { return item.id === rowId; })[0];
        var col = renderConfig.currentColumns.filter(function (item) { return item.id === colId; })[0];
        return {
            row: rowId ? row : {},
            col: colId ? col : {},
        };
    }
    if (renderConfig.eventHandlers) {
        for (var key in renderConfig.eventHandlers) {
            if (renderConfig.eventHandlers.hasOwnProperty(key)) {
                var event_1 = renderConfig.eventHandlers[key];
                events[key] = html_1.eventHandler(function (e) { return getCellInfo(e); }, __assign({}, event_1));
            }
        }
    }
    return dom_1.el(".dhx_data-wrap", __assign({ style: {
            height: renderConfig.$totalHeight,
            width: renderConfig.$totalWidth,
            "padding-left": shifts.x,
            "padding-top": shifts.y,
        } }, events), [
        dom_1.el(".dhx_grid_data", __assign({ _flags: dom_1.KEYED_LIST }, Cells_1.getHandlers(pos.yStart, pos.xStart, renderConfig)), content),
        dom_1.el(".dhx_span-spans", contentSpans),
        dom_1.el(".dhx_grid_selection", { _ref: "selection" }, [selection, resizedLine]),
    ]);
}
function getContentHeight(renderConfig, isSticky, wrapperSizes) {
    var contentHeight = wrapperSizes.height - BORDERS;
    contentHeight = isSticky ? contentHeight : contentHeight - renderConfig.headerHeight;
    var isFooter = renderConfig.$footer;
    return (contentHeight = isFooter
        ? isSticky
            ? contentHeight
            : contentHeight - renderConfig.footerHeight
        : contentHeight);
}
function render(vm, obj, data, htmlEvents, selection, uid) {
    if (!obj._container) {
        obj.config.width = 1;
        obj.config.height = 1;
    }
    // if grid placed inside another component, it will fit to its container
    if (vm && vm.node && vm.node.parent && vm.node.parent.el) {
        var parentNode = vm.node.parent.el;
        var parentSizes = getElementSizes(parentNode);
        obj.config.width = parentSizes.width;
        obj.config.height = parentSizes.height;
    }
    var config = obj.config;
    // when grid is destructing and user try to repaint it
    if (!config) {
        return dom_1.el("div");
    }
    if (!config.columns.length) {
        return dom_1.el(".dhx_grid");
    }
    if (!data || !obj.data) {
        data = [];
    }
    if (config.columns
        .filter(function (col) { return !col.hidden; })
        .reduce(function (check, col) { return (check = !col.hidden ? col.hidden : check); }, true)) {
        config.$totalHeight = 0;
    }
    else {
        config.$totalHeight = data.length * config.rowHeight;
    }
    var sizes = getElementSizes(obj._container);
    var wrapperSizes = {
        width: (config.width ? config.width : sizes && sizes.width) || 0,
        height: (config.height ? config.height : sizes && sizes.height) || 0,
    };
    // TODO: Remove scroll
    if (main_1.isAutoWidth(config)) {
        var scrollbarY = config.$totalHeight >= wrapperSizes.height - config.headerRowHeight ? html_1.getScrollbarWidth() : 0;
        var totalWidth_1 = wrapperSizes.width - BORDERS - scrollbarY;
        var growingColumns = config.columns.filter(function (col) { return !col.hidden && !col.width; });
        var nonGrowingColumnsWidth_1 = config.columns
            .filter(function (col) { return col.width; })
            .reduce(function (width, col) { return width + col.$width; }, 0);
        if (nonGrowingColumnsWidth_1 <= totalWidth_1) {
            config.$totalWidth = totalWidth_1;
            var fullGravity_1 = growingColumns.reduce(function (gravity, col) { return gravity + (col.gravity || 1); }, 0);
            growingColumns.forEach(function (col) {
                col.$width = (totalWidth_1 - nonGrowingColumnsWidth_1) * ((col.gravity || 1) / fullGravity_1);
            });
        }
    }
    config.width = wrapperSizes.width;
    config.height = wrapperSizes.height;
    var renderConfig = getRenderConfig(obj, data, wrapperSizes);
    renderConfig.selection = selection;
    renderConfig.datacollection = obj.data;
    var shifts = Cells_1.getShifts(renderConfig);
    var isSticky = main_1.isCssSupport("position", "sticky");
    var gridBodyHeight = getContentHeight(renderConfig, isSticky, wrapperSizes);
    var layoutState = {
        wrapper: wrapperSizes,
        sticky: isSticky,
        shifts: shifts,
        gridBodyHeight: gridBodyHeight,
    };
    var header = FixedRows_1.getFixedRows(renderConfig, __assign(__assign({}, layoutState), { name: "header", position: "top" }));
    var footer = renderConfig.$footer
        ? FixedRows_1.getFixedRows(renderConfig, __assign(__assign({}, layoutState), { name: "footer", position: "bottom" }))
        : null;
    var lessByWidth = renderConfig.$totalWidth + BORDERS < wrapperSizes.width ? "dhx_grid-less-width" : "";
    var lessByHeight = renderConfig.$totalHeight + BORDERS < wrapperSizes.height ? "dhx_grid-less-height" : "";
    // dirty: but work. Change checking of rendering Grid
    if (!vm.node) {
        var _a = obj.getScrollState(), x_1 = _a.x, y_1 = _a.y;
        dom_1.awaitRedraw().then(function () {
            obj.scroll(x_1, y_1);
        });
    }
    return dom_1.el(".dhx_grid.dhx_widget", {
        class: (renderConfig.css || "") +
            (!isSticky ? " dhx_grid_border" : "") +
            (config.multiselection ? " dhx_no-select--pointer" : ""),
        dhx_widget_id: uid,
    }, [
        dom_1.resizer(function () { return obj.paint(); }),
        dom_1.el(".dhx_grid-content", {
            style: __assign({}, wrapperSizes),
            onclick: htmlEvents.onclick,
            class: (lessByWidth + " " + lessByHeight).trim(),
        }, [
            isSticky ? null : header,
            dom_1.el(".dhx_grid-body", {
                style: {
                    height: gridBodyHeight,
                    width: wrapperSizes.width - BORDERS,
                },
                onscroll: htmlEvents.onscroll,
                _ref: "grid_body",
            }, [
                isSticky ? header : null,
                getGridData(renderConfig, shifts),
                isSticky ? footer : null,
            ]),
            FixedCols_1.getFixedColsHeader(renderConfig, layoutState),
            FixedCols_1.getFixedCols(renderConfig, layoutState),
            isSticky ? null : footer,
        ]),
    ]);
}
exports.render = render;


/***/ }),

/***/ "../ts-layout/index.ts":
/*!*****************************!*\
  !*** ../ts-layout/index.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Layout */ "../ts-layout/sources/Layout.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-layout/sources/types.ts"));


/***/ }),

/***/ "../ts-layout/sources/Cell.ts":
/*!************************************!*\
  !*** ../ts-layout/sources/Cell.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-layout/sources/types.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-layout/sources/helpers.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var CssManager_1 = __webpack_require__(/*! @dhx/ts-common/CssManager */ "../ts-common/CssManager.ts");
var Cell = /** @class */ (function (_super) {
    __extends(Cell, _super);
    function Cell(parent, config) {
        var _this = _super.call(this, parent, config) || this;
        _this._disabled = [];
        var p = parent;
        if (p && p.isVisible) {
            _this._parent = p;
        }
        if (_this._parent && _this._parent.events) {
            _this.events = _this._parent.events;
        }
        else {
            _this.events = new events_1.EventSystem(_this);
        }
        _this._cssManager = new CssManager_1.CssManager();
        _this.config.full =
            _this.config.full === undefined
                ? Boolean(_this.config.header ||
                    _this.config.collapsable ||
                    _this.config.headerHeight ||
                    _this.config.headerIcon ||
                    _this.config.headerImage)
                : _this.config.full;
        _this._initHandlers();
        _this.id = _this.config.id || core_1.uid();
        return _this;
    }
    Cell.prototype.paint = function () {
        if (this.isVisible()) {
            var view = this.getRootView();
            if (view) {
                view.redraw();
            }
            else {
                this._parent.paint();
            }
        }
    };
    Cell.prototype.isVisible = function () {
        // top level node
        if (!this._parent) {
            if (this._container && this._container.tagName) {
                return true;
            }
            return Boolean(this.getRootNode());
        }
        // check active view in case of multiview
        var active = this._parent.config.activeView;
        if (active && active !== this.id) {
            return false;
        }
        // check that all parents of the cell are visible as well
        return !this.config.hidden && (!this._parent || this._parent.isVisible());
    };
    Cell.prototype.hide = function () {
        if (!this.events.fire(types_1.LayoutEvents.beforeHide, [this.id])) {
            return;
        }
        this.config.hidden = true;
        if (this._parent && this._parent.paint) {
            this._parent.paint();
        }
        this.events.fire(types_1.LayoutEvents.afterHide, [this.id]);
    };
    Cell.prototype.show = function () {
        if (!this.events.fire(types_1.LayoutEvents.beforeShow, [this.id])) {
            return;
        }
        if (this._parent && this._parent.config && this._parent.config.activeView !== undefined) {
            this._parent.config.activeView = this.id;
        }
        else {
            this.config.hidden = false;
        }
        if (this._parent && !this._parent.isVisible()) {
            this._parent.show();
        }
        this.paint();
        this.events.fire(types_1.LayoutEvents.afterShow, [this.id]);
    };
    Cell.prototype.expand = function () {
        if (!this.events.fire(types_1.LayoutEvents.beforeExpand, [this.id])) {
            return;
        }
        this.config.collapsed = false;
        this.events.fire(types_1.LayoutEvents.afterExpand, [this.id]);
        this.paint();
    };
    Cell.prototype.collapse = function () {
        if (!this.events.fire(types_1.LayoutEvents.beforeCollapse, [this.id])) {
            return;
        }
        this.config.collapsed = true;
        this.events.fire(types_1.LayoutEvents.afterCollapse, [this.id]);
        this.paint();
    };
    Cell.prototype.toggle = function () {
        if (this.config.collapsed) {
            this.expand();
        }
        else {
            this.collapse();
        }
    };
    Cell.prototype.getParent = function () {
        return this._parent;
    };
    Cell.prototype.destructor = function () {
        this.config = null;
        this.unmount();
    };
    Cell.prototype.getWidget = function () {
        return this._ui;
    };
    Cell.prototype.getCellView = function () {
        return this._parent && this._parent.getRefs(this._uid);
    };
    Cell.prototype.attach = function (name, config) {
        this.config.html = null;
        if (typeof name === "object") {
            this._ui = name;
        }
        else if (typeof name === "string") {
            this._ui = new window.dhx[name](null, config);
        }
        else if (typeof name === "function") {
            if (name.prototype instanceof view_1.View) {
                this._ui = new name(null, config);
            }
            else {
                this._ui = {
                    getRootView: function () {
                        return name(config);
                    },
                };
            }
        }
        this.paint();
        return this._ui;
    };
    Cell.prototype.attachHTML = function (html) {
        this.config.html = html;
        this.paint();
    };
    Cell.prototype.toVDOM = function (nodes) {
        var _a;
        if (this.config === null) {
            this.config = {};
        }
        if (this.config.hidden) {
            return;
        }
        var style = this._calculateStyle();
        var stylePadding = core_1.isDefined(this.config.padding)
            ? !isNaN(Number(this.config.padding))
                ? { padding: this.config.padding + "px" }
                : { padding: this.config.padding }
            : "";
        var fullStyle = this.config.full || this.config.html ? style : __assign(__assign({}, style), stylePadding);
        var cssClassName = this._cssManager.add(fullStyle);
        var kids;
        if (this._ui) {
            var view = this._ui.getRootView();
            if (view.render) {
                view = dom_1.inject(view);
            }
            kids = [view];
        }
        else {
            kids = nodes || null;
        }
        var resizer = this.config.resizable && !this._isLastCell() && !this.config.collapsed
            ? dom_1.el(".dhx_layout-resizer." +
                (this._isXDirection() ? "dhx_layout-resizer--x" : "dhx_layout-resizer--y"), __assign(__assign({}, this._resizerHandlers), { _ref: "resizer_" + this._uid }), [
                dom_1.el("span.dhx_layout-resizer__icon", {
                    class: "dxi " +
                        (this._isXDirection() ? "dxi-dots-vertical" : "dxi-dots-horizontal"),
                }),
            ])
            : null;
        var handlers = {};
        if (this.config.on) {
            for (var key in this.config.on) {
                handlers["on" + key] = this.config.on[key];
            }
        }
        var typeClass = "";
        var isParent = this.config.cols || this.config.rows;
        if (this.config.type && isParent) {
            switch (this.config.type) {
                case "line":
                    typeClass = " dhx_layout-line";
                    break;
                case "wide":
                    typeClass = " dhx_layout-wide";
                    break;
                case "space":
                    typeClass = " dhx_layout-space";
                    break;
                default:
                    break;
            }
        }
        var cell = dom_1.el("div", __assign(__assign((_a = { _key: this._uid, _ref: this._uid }, _a["aria-labelledby"] = this.config.id ? "tab-content-" + this.config.id : null, _a), handlers), { class: this._getCss(false) +
                (this.config.css ? " " + this.config.css : "") +
                (fullStyle ? " " + cssClassName : "") +
                (this.config.collapsed ? " dhx_layout-cell--collapsed" : "") +
                (this.config.resizable ? " dhx_layout-cell--resizable" : "") +
                (this.config.type ? typeClass : "") }), this.config.full
            ? [
                dom_1.el("div", {
                    tabindex: this.config.collapsable ? "0" : "-1",
                    class: "dhx_layout-cell-header" +
                        (this._isXDirection()
                            ? " dhx_layout-cell-header--col"
                            : " dhx_layout-cell-header--row") +
                        (this.config.collapsable ? " dhx_layout-cell-header--collapseble" : "") +
                        (this.config.collapsed ? " dhx_layout-cell-header--collapsed" : "") +
                        (((this.getParent() || {}).config || {}).isAccordion
                            ? " dhx_layout-cell-header--accordion"
                            : ""),
                    style: {
                        height: this.config.headerHeight,
                    },
                    onclick: this._handlers.toggle,
                    onkeydown: this._handlers.enterCollapse,
                }, [
                    this.config.headerIcon &&
                        dom_1.el("span.dhx_layout-cell-header__icon", {
                            class: this.config.headerIcon,
                        }),
                    this.config.headerImage &&
                        dom_1.el(".dhx_layout-cell-header__image-wrapper", [
                            dom_1.el("img", {
                                src: this.config.headerImage,
                                class: "dhx_layout-cell-header__image",
                            }),
                        ]),
                    this.config.header &&
                        dom_1.el("h3.dhx_layout-cell-header__title", this.config.header),
                    this.config.collapsable
                        ? dom_1.el("div.dhx_layout-cell-header__collapse-icon", {
                            class: this._getCollapseIcon(),
                        })
                        : dom_1.el("div.dhx_layout-cell-header__collapse-icon", {
                            class: "dxi dxi-empty",
                        }),
                ]),
                !this.config.collapsed
                    ? dom_1.el("div", {
                        style: __assign(__assign({}, stylePadding), { height: "calc(100% - " + (this.config.headerHeight || 37) + "px)" }),
                        ".innerHTML": this.config.html,
                        class: this._getCss(true) + " dhx_layout-cell-content",
                    }, kids)
                    : null,
            ]
            : this.config.html && !kids
                ? [
                    dom_1.el(".dhx_layout-cell-content", {
                        ".innerHTML": this.config.html,
                        style: stylePadding,
                    }),
                ]
                : kids);
        return resizer ? [cell, resizer] : cell;
    };
    Cell.prototype._getCss = function (_content) {
        return "dhx_layout-cell";
    };
    Cell.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            enterCollapse: function (e) {
                if (e.keyCode === 13) {
                    _this._handlers.toggle();
                }
            },
            collapse: function () {
                if (!_this.config.collapsable) {
                    return;
                }
                _this.collapse();
            },
            expand: function () {
                if (!_this.config.collapsable) {
                    return;
                }
                _this.expand();
            },
            toggle: function () {
                if (!_this.config.collapsable) {
                    return;
                }
                _this.toggle();
            },
        };
        var blockOpts = {
            left: null,
            top: null,
            isActive: false,
            range: null,
            xLayout: null,
            nextCell: null,
            size: null,
            resizerLength: null,
            mode: null,
            percentsum: null,
            margin: null,
        };
        var resizeMove = function (event) {
            if (!blockOpts.isActive || blockOpts.mode === types_1.resizeMode.unknown) {
                return;
            }
            var clientX = event.targetTouches ? event.targetTouches[0].clientX : event.clientX;
            var clientY = event.targetTouches ? event.targetTouches[0].clientY : event.clientY;
            var newValue = blockOpts.xLayout
                ? clientX - blockOpts.range.min + window.pageXOffset
                : clientY - blockOpts.range.min + window.pageYOffset;
            var prop = blockOpts.xLayout ? "width" : "height";
            if (newValue < 0) {
                newValue = blockOpts.resizerLength / 2;
            }
            else if (newValue > blockOpts.size) {
                newValue = blockOpts.size - blockOpts.resizerLength;
            }
            switch (blockOpts.mode) {
                case types_1.resizeMode.pixels:
                    _this.config[prop] = newValue - blockOpts.resizerLength / 2 + "px";
                    blockOpts.nextCell.config[prop] =
                        blockOpts.size - newValue - blockOpts.resizerLength / 2 + "px";
                    break;
                case types_1.resizeMode.mixedpx1:
                    _this.config[prop] = newValue - blockOpts.resizerLength / 2 + "px";
                    break;
                case types_1.resizeMode.mixedpx2:
                    blockOpts.nextCell.config[prop] =
                        blockOpts.size - newValue - blockOpts.resizerLength / 2 + "px";
                    break;
                case types_1.resizeMode.percents:
                    _this.config[prop] = (newValue / blockOpts.size) * blockOpts.percentsum + "%";
                    blockOpts.nextCell.config[prop] =
                        ((blockOpts.size - newValue) / blockOpts.size) * blockOpts.percentsum + "%";
                    break;
                case types_1.resizeMode.mixedperc1:
                    _this.config[prop] = (newValue / blockOpts.size) * blockOpts.percentsum + "%";
                    break;
                case types_1.resizeMode.mixedperc2:
                    blockOpts.nextCell.config[prop] =
                        ((blockOpts.size - newValue) / blockOpts.size) * blockOpts.percentsum + "%";
                    break;
            }
            _this.paint();
            _this.events.fire(types_1.LayoutEvents.resize, [_this.id]);
        };
        var resizeEnd = function (event) {
            blockOpts.isActive = false;
            document.body.classList.remove("dhx_no-select--resize");
            if (!event.targetTouches) {
                document.removeEventListener("mouseup", resizeEnd);
                document.removeEventListener("mousemove", resizeMove);
            }
            else {
                document.removeEventListener("touchend", resizeEnd);
                document.removeEventListener("touchmove", resizeMove);
            }
            _this.events.fire(types_1.LayoutEvents.afterResizeEnd, [_this.id]);
        };
        var resizeStart = function (event) {
            event.targetTouches && event.preventDefault();
            if (event.which === 3) {
                return;
            }
            if (blockOpts.isActive) {
                resizeEnd(event);
            }
            if (!_this.events.fire(types_1.LayoutEvents.beforeResizeStart, [_this.id])) {
                return;
            }
            document.body.classList.add("dhx_no-select--resize");
            var block = _this.getCellView();
            var nextCell = _this._getNextCell();
            var nextBlock = nextCell.getCellView();
            var resizerBlock = _this._getResizerView();
            var blockOffsets = block.el.getBoundingClientRect();
            var resizerOffsets = resizerBlock.el.getBoundingClientRect();
            var nextBlockOffsets = nextBlock.el.getBoundingClientRect();
            blockOpts.xLayout = _this._isXDirection();
            blockOpts.left = blockOffsets.left + window.pageXOffset;
            blockOpts.top = blockOffsets.top + window.pageYOffset;
            blockOpts.margin = helpers_1.getMarginSize(_this.getParent().config, blockOpts.xLayout);
            blockOpts.range = helpers_1.getBlockRange(blockOffsets, nextBlockOffsets, blockOpts.xLayout);
            blockOpts.size = blockOpts.range.max - blockOpts.range.min - blockOpts.margin;
            blockOpts.isActive = true;
            blockOpts.nextCell = nextCell;
            blockOpts.resizerLength = blockOpts.xLayout ? resizerOffsets.width : resizerOffsets.height;
            blockOpts.mode = helpers_1.getResizeMode(blockOpts.xLayout, _this.config, nextCell.config);
            if (blockOpts.mode === types_1.resizeMode.percents) {
                var field = blockOpts.xLayout ? "width" : "height";
                blockOpts.percentsum =
                    parseFloat(_this.config[field].slice(0, -1)) +
                        parseFloat(nextCell.config[field].slice(0, -1));
            }
            if (blockOpts.mode === types_1.resizeMode.mixedperc1) {
                var field = blockOpts.xLayout ? "width" : "height";
                blockOpts.percentsum =
                    (1 / (blockOffsets[field] / (blockOpts.size - blockOpts.resizerLength))) *
                        parseFloat(_this.config[field].slice(0, -1));
            }
            if (blockOpts.mode === types_1.resizeMode.mixedperc2) {
                var field = blockOpts.xLayout ? "width" : "height";
                blockOpts.percentsum =
                    (1 / (nextBlockOffsets[field] / (blockOpts.size - blockOpts.resizerLength))) *
                        parseFloat(nextCell.config[field]);
            }
        };
        this._resizerHandlers = {
            onmousedown: function (e) {
                resizeStart(e);
                document.addEventListener("mouseup", resizeEnd);
                document.addEventListener("mousemove", resizeMove);
            },
            ontouchstart: function (e) {
                resizeStart(e);
                document.addEventListener("touchend", resizeEnd);
                document.addEventListener("touchmove", resizeMove);
            },
            ondragstart: function (e) { return e.preventDefault(); },
        };
    };
    Cell.prototype._getCollapseIcon = function () {
        if (this._isXDirection() && this.config.collapsed) {
            return "dxi dxi-chevron-right";
        }
        if (this._isXDirection() && !this.config.collapsed) {
            return "dxi dxi-chevron-left";
        }
        if (!this._isXDirection() && this.config.collapsed) {
            return "dxi dxi-chevron-up";
        }
        if (!this._isXDirection() && !this.config.collapsed) {
            return "dxi dxi-chevron-down";
        }
    };
    Cell.prototype._isLastCell = function () {
        var parent = this._parent;
        return parent && parent._cells.indexOf(this) === parent._cells.length - 1;
    };
    Cell.prototype._getNextCell = function () {
        var parent = this._parent;
        var index = parent._cells.indexOf(this);
        return parent._cells[index + 1];
    };
    Cell.prototype._getResizerView = function () {
        return this._parent.getRefs("resizer_" + this._uid);
    };
    Cell.prototype._isXDirection = function () {
        return this._parent && this._parent._xLayout;
    };
    Cell.prototype._calculateStyle = function () {
        var config = this.config;
        if (!config) {
            return;
        }
        var style = {};
        var autoWidth = false;
        var autoHeight = false;
        if (!isNaN(Number(config.width)))
            config.width = config.width + "px";
        if (!isNaN(Number(config.height)))
            config.height = config.height + "px";
        if (!isNaN(Number(config.minWidth)))
            config.minWidth = config.minWidth + "px";
        if (!isNaN(Number(config.minHeight)))
            config.minHeight = config.minHeight + "px";
        if (!isNaN(Number(config.maxWidth)))
            config.maxWidth = config.maxWidth + "px";
        if (!isNaN(Number(config.maxHeight)))
            config.maxHeight = config.maxHeight + "px";
        if (config.width === "content")
            autoWidth = true;
        if (config.height === "content")
            autoHeight = true;
        var _a = config, width = _a.width, height = _a.height, cols = _a.cols, rows = _a.rows, minWidth = _a.minWidth, minHeight = _a.minHeight, maxWidth = _a.maxWidth, maxHeight = _a.maxHeight, gravity = _a.gravity, collapsed = _a.collapsed;
        var gravityNumber = core_1.sign(gravity) === -1 ? 0 : gravity;
        if (typeof gravity === "boolean") {
            gravityNumber = gravity ? 1 : 0;
        }
        var fixed = typeof gravity === "boolean" ? !gravity : core_1.sign(gravity) === -1;
        if (this._isXDirection()) {
            if (width || (gravity === undefined && (minWidth || maxWidth))) {
                fixed = true;
            }
        }
        else {
            if (height || (gravity === undefined && (minHeight || maxHeight))) {
                fixed = true;
            }
        }
        var grow = fixed ? 0 : gravityNumber || 1;
        var fillSpace = this._isXDirection() ? "x" : "y";
        if (minWidth !== undefined)
            style.minWidth = minWidth;
        if (minHeight !== undefined)
            style.minHeight = minHeight;
        if (maxWidth !== undefined)
            style.maxWidth = maxWidth;
        if (maxHeight !== undefined)
            style.maxHeight = maxHeight;
        if (this._parent === undefined && !fillSpace !== undefined) {
            fillSpace = true;
        }
        if (width !== undefined && width !== "content") {
            style.width = width;
        }
        else {
            if (fillSpace === true) {
                style.width = "100%";
            }
            else if (fillSpace === "x") {
                if (autoWidth) {
                    style.flex = "0 0 auto";
                }
                else {
                    var isAuto = this._isXDirection() ? "1px" : "auto";
                    style.flex = grow + " " + (cols || rows ? "0 " + isAuto : "1 auto");
                }
            }
        }
        if (height !== undefined && height !== "content") {
            style.height = height;
        }
        else {
            if (fillSpace === true) {
                style.height = "100%";
            }
            else if (fillSpace === "y") {
                if (autoHeight) {
                    style.flex = "0 0 auto";
                }
                else {
                    var isAuto = !this._isXDirection() ? "1px" : "auto";
                    style.flex = grow + " " + (cols || rows ? "0 " + isAuto : "1 auto");
                }
            }
        }
        if (fillSpace === true && config.width === undefined && config.height === undefined) {
            style.flex = grow + " 1 auto";
        }
        if (collapsed) {
            if (this._isXDirection()) {
                style.width = "auto";
            }
            else {
                style.height = "auto";
            }
            style.flex = "0 0 auto";
        }
        return style;
    };
    return Cell;
}(view_1.View));
exports.Cell = Cell;


/***/ }),

/***/ "../ts-layout/sources/Layout.ts":
/*!**************************************!*\
  !*** ../ts-layout/sources/Layout.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Cell_1 = __webpack_require__(/*! ./Cell */ "../ts-layout/sources/Cell.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-layout/sources/types.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var Layout = /** @class */ (function (_super) {
    __extends(Layout, _super);
    function Layout(parent, config) {
        var _this = _super.call(this, parent, config) || this;
        // root layout
        _this._root = _this.config.parent || _this;
        _this._all = {};
        _this._parseConfig();
        if (_this.config.activeTab) {
            _this.config.activeView = _this.config.activeTab;
        }
        // Need replace to tabbar
        if (_this.config.views) {
            _this.config.activeView = _this.config.activeView || _this._cells[0].id;
            _this._isViewLayout = true;
        }
        if (!config.parent) {
            var view = dom_1.create({ render: function () { return _this.toVDOM(); } }, _this);
            _this.mount(parent, view);
        }
        return _this;
    }
    Layout.prototype.toVDOM = function () {
        if (this._isViewLayout) {
            var roots = [this.getCell(this.config.activeView).toVDOM()];
            return _super.prototype.toVDOM.call(this, roots);
        }
        var nodes = [];
        this._cells.forEach(function (cell) {
            var node = cell.toVDOM();
            if (Array.isArray(node)) {
                nodes = nodes.concat(node);
            }
            else {
                nodes.push(node);
            }
        });
        return _super.prototype.toVDOM.call(this, nodes);
    };
    Layout.prototype.removeCell = function (id) {
        if (!this.events.fire(types_1.LayoutEvents.beforeRemove, [id])) {
            return;
        }
        var root = this.config.parent || this;
        if (root !== this) {
            return root.removeCell(id);
        }
        // this === root layout
        var view = this.getCell(id);
        if (view) {
            var parent_1 = view.getParent();
            delete this._all[id];
            parent_1._cells = parent_1._cells.filter(function (cell) { return cell.id !== id; });
            parent_1.paint();
        }
        this.events.fire(types_1.LayoutEvents.afterRemove, [id]);
    };
    Layout.prototype.addCell = function (config, index) {
        if (index === void 0) { index = -1; }
        if (!this.events.fire(types_1.LayoutEvents.beforeAdd, [config.id])) {
            return;
        }
        var view = this._createCell(config);
        if (index < 0) {
            index = this._cells.length + index + 1;
        }
        this._cells.splice(index, 0, view);
        this.paint();
        if (!this.events.fire(types_1.LayoutEvents.afterAdd, [config.id])) {
            return;
        }
    };
    Layout.prototype.getId = function (index) {
        if (index < 0) {
            index = this._cells.length + index;
        }
        return this._cells[index] ? this._cells[index].id : undefined;
    };
    Layout.prototype.getRefs = function (name) {
        return this._root.getRootView().refs[name];
    };
    Layout.prototype.getCell = function (id) {
        return this._root._all[id];
    };
    Layout.prototype.forEach = function (cb, parent, level) {
        if (level === void 0) { level = Infinity; }
        if (!this._haveCells(parent) || level < 1) {
            return;
        }
        var array;
        if (parent) {
            array = this._root._all[parent]._cells;
        }
        else {
            array = this._root._cells;
        }
        for (var index = 0; index < array.length; index++) {
            var cell = array[index];
            cb.call(this, cell, index, array);
            if (this._haveCells(cell.id)) {
                cell.forEach(cb, cell.id, --level);
            }
        }
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Layout.prototype.cell = function (id) {
        return this.getCell(id);
    };
    Layout.prototype._getCss = function (content) {
        var layoutCss = this._xLayout ? "dhx_layout-columns" : "dhx_layout-rows";
        var directionCss = this.config.align ? " " + layoutCss + "--" + this.config.align : "";
        if (content) {
            return (layoutCss +
                " dhx_layout-cell" +
                (this.config.align ? " dhx_layout-cell--" + this.config.align : ""));
        }
        else {
            var cellCss = this.config.parent ? _super.prototype._getCss.call(this) : "dhx_widget dhx_layout";
            var fullModeCss = this.config.parent ? "" : " dhx_layout-cell";
            return cellCss + (this.config.full ? fullModeCss : " " + layoutCss) + directionCss;
        }
    };
    Layout.prototype._parseConfig = function () {
        var _this = this;
        var config = this.config;
        var cells = config.rows || config.cols || config.views || [];
        this._xLayout = !config.rows;
        this._cells = cells.map(function (a) { return _this._createCell(a); });
    };
    Layout.prototype._createCell = function (cell) {
        var view;
        if (cell.rows || cell.cols || cell.views) {
            cell.parent = this._root;
            if (!cell.type && cell.parent.config.type) {
                cell.type = cell.parent.config.type;
            }
            view = new Layout(this, cell);
            var viewParent = view.getParent();
            if (!view.config.type && viewParent && viewParent.config.type) {
                view.config.type = viewParent.config.type;
            }
        }
        else {
            view = new Cell_1.Cell(this, cell);
        }
        // FIxME
        this._root._all[view.id] = view;
        return view;
    };
    Layout.prototype._haveCells = function (id) {
        if (id) {
            var array = this._root._all[id];
            return array._cells && array._cells.length > 0;
        }
        return Object.keys(this._all).length > 0;
    };
    return Layout;
}(Cell_1.Cell));
exports.Layout = Layout;


/***/ }),

/***/ "../ts-layout/sources/helpers.ts":
/*!***************************************!*\
  !*** ../ts-layout/sources/helpers.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! ./types */ "../ts-layout/sources/types.ts");
function getResizeMode(isXLayout, conf1, conf2) {
    var field = isXLayout ? "width" : "height";
    var is1perc = conf1[field] && conf1[field].includes("%");
    var is2perc = conf2[field] && conf2[field].includes("%");
    var is1px = conf1[field] && conf1[field].includes("px");
    var is2px = conf2[field] && conf2[field].includes("px");
    if (is1perc && is2perc) {
        return types_1.resizeMode.percents;
    }
    if (is1px && is2px) {
        return types_1.resizeMode.pixels;
    }
    if (is1px && !is2px) {
        return types_1.resizeMode.mixedpx1;
    }
    if (is2px && !is1px) {
        return types_1.resizeMode.mixedpx2;
    }
    if (is1perc) {
        return types_1.resizeMode.mixedperc1;
    }
    if (is2perc) {
        return types_1.resizeMode.mixedperc2;
    }
    return types_1.resizeMode.unknown;
}
exports.getResizeMode = getResizeMode;
function getBlockRange(block1, block2, isXLayout) {
    if (isXLayout === void 0) { isXLayout = true; }
    if (isXLayout) {
        return {
            min: block1.left + window.pageXOffset,
            max: block2.right + window.pageXOffset,
        };
    }
    return {
        min: block1.top + window.pageYOffset,
        max: block2.bottom + window.pageYOffset,
    };
}
exports.getBlockRange = getBlockRange;
function getMarginSize(config, xLayout) {
    if (!config) {
        return 0;
    }
    if (config.type === "space" || (config.type === "wide" && xLayout)) {
        return 10;
    }
    return 0;
}
exports.getMarginSize = getMarginSize;


/***/ }),

/***/ "../ts-layout/sources/types.ts":
/*!*************************************!*\
  !*** ../ts-layout/sources/types.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var LayoutEvents;
(function (LayoutEvents) {
    LayoutEvents["beforeShow"] = "beforeShow";
    LayoutEvents["afterShow"] = "afterShow";
    LayoutEvents["beforeHide"] = "beforeHide";
    LayoutEvents["afterHide"] = "afterHide";
    LayoutEvents["beforeResizeStart"] = "beforeResizeStart";
    LayoutEvents["resize"] = "resize";
    LayoutEvents["afterResizeEnd"] = "afterResizeEnd";
    LayoutEvents["beforeAdd"] = "beforeAdd";
    LayoutEvents["afterAdd"] = "afterAdd";
    LayoutEvents["beforeRemove"] = "beforeRemove";
    LayoutEvents["afterRemove"] = "afterRemove";
    LayoutEvents["beforeCollapse"] = "beforeCollapse";
    LayoutEvents["afterCollapse"] = "afterCollapse";
    LayoutEvents["beforeExpand"] = "beforeExpand";
    LayoutEvents["afterExpand"] = "afterExpand";
})(LayoutEvents = exports.LayoutEvents || (exports.LayoutEvents = {}));
var resizeMode;
(function (resizeMode) {
    resizeMode[resizeMode["unknown"] = 0] = "unknown";
    resizeMode[resizeMode["percents"] = 1] = "percents";
    resizeMode[resizeMode["pixels"] = 2] = "pixels";
    resizeMode[resizeMode["mixedpx1"] = 3] = "mixedpx1";
    resizeMode[resizeMode["mixedpx2"] = 4] = "mixedpx2";
    resizeMode[resizeMode["mixedperc1"] = 5] = "mixedperc1";
    resizeMode[resizeMode["mixedperc2"] = 6] = "mixedperc2";
})(resizeMode = exports.resizeMode || (exports.resizeMode = {}));


/***/ }),

/***/ "../ts-list/index.ts":
/*!***************************!*\
  !*** ../ts-list/index.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/List */ "../ts-list/sources/List.ts"));
__export(__webpack_require__(/*! ./sources/Selection */ "../ts-list/sources/Selection.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-list/sources/types.ts"));


/***/ }),

/***/ "../ts-list/sources/List.ts":
/*!**********************************!*\
  !*** ../ts-list/sources/List.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var Keymanager_1 = __webpack_require__(/*! @dhx/ts-common/Keymanager */ "../ts-common/Keymanager.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var Selection_1 = __webpack_require__(/*! ./Selection */ "../ts-list/sources/Selection.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-list/sources/types.ts");
var editors_1 = __webpack_require__(/*! ./editors/editors */ "../ts-list/sources/editors/editors.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-list/sources/helpers.ts");
var List = /** @class */ (function (_super) {
    __extends(List, _super);
    function List(node, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, node, core_1.extend({
            itemHeight: config.virtual ? 37 : config.itemHeight || null,
            keyNavigation: false,
            selection: true,
            multiselectionMode: config.multiselectionMode ? config.multiselectionMode : "click",
            editable: false,
        }, config)) || this;
        _this._events = {};
        _this._touch = {
            duration: 350,
            dblDuration: 300,
            timer: null,
            start: false,
            timeStamp: null,
        };
        if (_this.config.multiselectionMode === "ctrlClick") {
            _this.config.multiselection = "ctrlClick"; // TODO: remove suite_7.0
        }
        _this.config.editable = _this.config.editable || _this.config.editing; // TODO: remove suite_7.0
        if (Array.isArray(_this.config.data)) {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.DataCollection({}, _this.events);
            _this.data.parse(_this.config.data);
        }
        else if (_this.config.data && _this.config.data.events) {
            _this.data = _this.config.data;
            _this.events = _this.data.events;
            _this.events.context = _this;
        }
        else {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.DataCollection({}, _this.events);
        }
        _this.selection = new Selection_1.Selection({
            multiselection: _this.config.multiselection,
            disable: !_this.config.selection,
        }, _this.data);
        _this._focusIndex = !_this.config.selection && _this.config.keyNavigation ? 0 : undefined;
        _this._getHotkeys();
        var updater = function (updateObj) { return function (_a) {
            var source = _a.source, target = _a.target, start = _a.start;
            if (source && source instanceof Array && source.length > 1) {
                source.map(function (selectedId) { return _this.data.exists(selectedId) && _this.data.update(selectedId, updateObj); });
                return;
            }
            if (_this.data.exists(target)) {
                _this.data.update(target, updateObj);
            }
            if (_this.data.exists(start)) {
                _this.data.update(start, updateObj);
            }
        }; };
        _this.events.on(ts_data_1.DataEvents.change, function () {
            _this.paint();
        });
        _this.events.on(ts_data_1.DataEvents.beforeRemove, function (obj) {
            var delIndex = _this.data.getIndex(obj.id);
            if (delIndex < _this._focusIndex) {
                _this._focusIndex--;
            }
        });
        _this.events.on(ts_data_1.DataEvents.afterRemove, function () {
            var id = _this.selection.getId();
            if (!id && !_this._focusIndex) {
                return;
            }
            if (!id && _this._focusIndex) {
                id = _this.data.getId(_this._focusIndex);
                _this.setFocus(id);
                return;
            }
            _this.setFocus(id[id.length - 1]);
        });
        _this.events.on(ts_data_1.DataEvents.load, function () {
            if (_this.config.virtual) {
                _this._updateVirtual(0);
            }
            _this.data.map(function (item) {
                if (item.$selected) {
                    _this.selection.add(item.id);
                    _this.events.fire(types_1.ListEvents.click, [item.id, null]);
                }
            });
        });
        _this.events.on(ts_data_1.DragEvents.canDrop, updater({ $drophere: true }));
        _this.events.on(ts_data_1.DragEvents.cancelDrop, updater({ $drophere: undefined }));
        _this.events.on(ts_data_1.DragEvents.dragStart, updater({ $dragtarget: true }));
        _this.events.on(ts_data_1.DragEvents.afterDrag, updater({ $dragtarget: undefined }));
        _this.events.on(types_1.ListEvents.afterEditEnd, function (value, id) {
            var item = _this.data.getItem(id);
            _this.data.update(id, __assign(__assign({}, item), { value: value }));
            _this._edited = null;
            _this._getHotkeys();
            _this.paint();
        });
        _this._handlers = {
            onmousedown: function (e) {
                _this._dragStart(e);
            },
            ontouchstart: function (e) {
                _this._touch.timer = setTimeout(function () {
                    _this._dragStart(e);
                }, _this._touch.duration);
                if (!_this._touch.timeStamp) {
                    _this._touch.timeStamp = +e.timeStamp.toFixed();
                }
                else {
                    var dblTap = _this._touch.dblDuration >= _this._touch.timeStamp - +e.timeStamp.toFixed();
                    if (dblTap) {
                        e.preventDefault();
                        _this._dblClick(e);
                    }
                    _this._touch.timeStamp = null;
                }
                setTimeout(function () {
                    _this._touch.timeStamp = null;
                }, _this._touch.dblDuration);
            },
            ontouchmove: function (e) {
                _this._touch.start && e.preventDefault();
                _this._clearTouchTimer();
            },
            ontouchend: function () {
                _this._touch.start = false;
                _this._clearTouchTimer();
            },
            ondragstart: function () { return (_this.config.dragMode && !_this._edited ? false : null); },
            oncontextmenu: function (e) {
                var id = !!html_1.locate(e) && _this.data.getItem(html_1.locate(e)).id;
                if (!id) {
                    return;
                }
                _this.events.fire(types_1.ListEvents.itemRightClick, [id, e]);
                _this.events.fire(types_1.ListEvents.contextmenu, [id, e]); // TODO: remove suite_7.0
            },
            onclick: function (e) {
                var id = !!html_1.locate(e) && _this.data.getItem(html_1.locate(e)).id;
                if (!id) {
                    return;
                }
                _this.setFocus(id);
                _this.selection.add(id, e.ctrlKey || e.metaKey, e.shiftKey);
                _this.events.fire(types_1.ListEvents.click, [id, e]);
            },
            ondblclick: function (e) {
                _this._dblClick(e);
            },
            onscroll: function (e) {
                if (_this.config.virtual) {
                    // [TODO] Hide loading data to render
                    _this._lazyLoad(e);
                    _this._updateVirtual(e.target.scrollTop);
                }
            },
            onmouseover: function (e) {
                var id = !!html_1.locate(e) && _this.data.getItem(html_1.locate(e)).id;
                var element = html_1.locateNode(e, "dhx_id", "relatedTarget");
                if (!element && id) {
                    _this.events.fire(types_1.ListEvents.itemMouseOver, [id, e]);
                    return;
                }
                else if (!element) {
                    return;
                }
                var attr = element.getAttribute("dhx_id") ? element.getAttribute("dhx_id") : null;
                var prevId = attr ? attr : "";
                if (!id || id === prevId) {
                    return;
                }
                _this.events.fire(types_1.ListEvents.itemMouseOver, [id, e]);
            },
        };
        if (_this.config.dragMode) {
            ts_data_1.dragManager.setItem(_this._uid, _this);
        }
        if (_this.config.virtual) {
            _this._range = [0, 0];
            _this._topOffset = 0;
        }
        if (_this.config.eventHandlers) {
            for (var key in _this.config.eventHandlers) {
                if (_this.config.eventHandlers.hasOwnProperty(key)) {
                    var events = _this.config.eventHandlers[key];
                    _this._events[key] = html_1.eventHandler(function (e) { return html_1.locate(e, "dhx_id"); }, __assign({}, events));
                }
            }
        }
        var view = dom_1.create({
            render: function () { return (_this.config.virtual ? _this._renderVirtualList() : _this._renderList()); },
            hooks: {
                didMount: function (vm) {
                    if (!_this.config.height) {
                        var element = vm.node.el;
                        _this.config.height =
                            (element &&
                                element.parentNode &&
                                element.parentNode.offsetHeight) ||
                                "100%";
                    }
                    if (_this.config.virtual) {
                        _this._visibleHeight = _this.config.height;
                        _this._updateVirtual(0);
                    }
                    _this.paint();
                },
            },
        });
        _this.mount(node, view);
        return _this;
    }
    List.prototype.editItem = function (id) {
        this._edited = id;
        if (!this.data.getItem(this._edited) || !this.events.fire(types_1.ListEvents.beforeEditStart, [id])) {
            this._edited = null;
            return;
        }
        this._getHotkeys();
        this.paint();
        this.events.fire(types_1.ListEvents.afterEditStart, [id]);
    };
    List.prototype.getFocusItem = function () {
        return this.data.getItem(this.data.getId(this._focusIndex));
    };
    List.prototype.setFocus = function (id) {
        var index = this.data.getIndex(id);
        this._setFocusIndex(index);
    };
    List.prototype.getFocus = function () {
        var id = this.data.getId(this._focusIndex);
        if (id) {
            return id;
        }
    };
    List.prototype.destructor = function () {
        if (this._navigationDestructor) {
            this._navigationDestructor();
        }
        if (this._documentClickDestuctor) {
            this._documentClickDestuctor();
        }
        this.unmount();
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    List.prototype.getFocusIndex = function () {
        return this._focusIndex;
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    List.prototype.setFocusIndex = function (index) {
        this._setFocusIndex(index);
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    List.prototype.edit = function (id) {
        this.editItem(id);
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    List.prototype.disableSelection = function () {
        this.selection.disable();
        this.paint();
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    List.prototype.enableSelection = function () {
        this.selection.enable();
        this.paint();
    };
    List.prototype._renderItem = function (item, index) {
        var html = (this.config.template && this.config.template(item)) || item.html;
        var focus = index === this._focusIndex;
        if (item.id === this._edited) {
            var editor = editors_1.getEditor(item, this);
            return editor.toHTML();
        }
        return html ? this._renderAsHtml(html, item, focus) : this._renderAsValue(item, focus);
    };
    List.prototype._renderAsHtml = function (html, item, focus) {
        var itemHeight = this.config.itemHeight;
        return dom_1.el("li", __assign(__assign({}, this._events), { class: "dhx_list-item" +
                (item.$selected ? " dhx_list-item--selected" : "") +
                (focus ? " dhx_list-item--focus" : "") +
                (item.$drophere && !this._edited ? " dhx_list-item--drophere" : "") +
                (item.$dragtarget && !this._edited ? " dhx_list-item--dragtarget" : "") +
                (this.config.dragMode && !this._edited ? " dhx_list-item--drag" : "") +
                // (this.selection.getItem() )
                (item.css ? " " + item.css : ""), dhx_id: item.id, _ref: item.id.toString(), style: {
                height: itemHeight,
            }, _key: item.id, ".innerHTML": html }));
    };
    List.prototype._renderAsValue = function (item, focus) {
        var itemHeight = this.config.itemHeight;
        return dom_1.el("li", {
            class: "dhx_list-item dhx_list-item--text" +
                (item.$selected ? " dhx_list-item--selected" : "") +
                (focus ? " dhx_list-item--focus" : "") +
                (item.$drophere && !this._edited ? " dhx_list-item--drophere" : "") +
                (item.$dragtarget && !this._edited ? " dhx_list-item--dragtarget" : "") +
                (this.config.dragMode && !this._edited ? " dhx_list-item--drag" : "") +
                (item.css ? " " + item.css : ""),
            dhx_id: item.id,
            _ref: item.id.toString(),
            style: {
                height: itemHeight,
            },
            _key: item.id,
        }, item.text || item.value);
    };
    List.prototype._renderList = function () {
        var _this = this;
        var kids = this.data.map(function (obj, index) { return _this._renderItem(obj, index); });
        return dom_1.el("ul.dhx_widget.dhx_list", __assign({ style: {
                "min-height": this.config.itemHeight,
                "max-height": this.config.height,
                position: "relative",
            }, class: (this.config.css ? this.config.css : "") +
                (this.config.multiselection && this.selection.getItem() ? " dhx_no-select--pointer" : ""), dhx_widget_id: this._uid }, this._handlers), kids);
    };
    List.prototype._renderVirtualList = function () {
        var _this = this;
        var kids = this.data.mapRange(this._range[0], this._range[1], function (obj, index) {
            return _this._renderItem(obj, index);
        });
        return dom_1.el(".dhx_widget.dhx_virtual-list-wrapper", __assign({ dhx_widget_id: this._uid, style: {
                "min-height": this.config.itemHeight,
                "max-height": this._visibleHeight,
            } }, this._handlers), [
            dom_1.el("ul.dhx_list.dhx_list--virtual", {
                class: (this.config.css ? this.config.css : "") +
                    (this.config.multiselection && this.selection.getItem()
                        ? " dhx_no-select--pointer"
                        : ""),
                style: {
                    height: this._getHeight() + helpers_1.defineUnit(this.config.itemHeight),
                    "padding-top": this._topOffset,
                },
            }, kids),
        ]);
    };
    List.prototype._dblClick = function (e) {
        var id = html_1.locate(e);
        if (!id) {
            return;
        }
        if (this.config.editable) {
            this.editItem(id);
        }
        this.events.fire(types_1.ListEvents.doubleClick, [id, e]);
    };
    List.prototype._clearTouchTimer = function () {
        if (this._touch.timer) {
            clearTimeout(this._touch.timer);
            this._touch.timer = null;
        }
    };
    List.prototype._dragStart = function (e) {
        var _this = this;
        this._touch.start = true;
        var itemsForGhost = [];
        var item = html_1.locateNode(e, "dhx_id");
        var itemId = item && item.getAttribute("dhx_id");
        var selectionIds = this.selection.getId();
        if (this.config.multiselection && selectionIds instanceof Array) {
            selectionIds.map(function (id) {
                if (id !== itemId && _this.getRootView().refs[id]) {
                    itemsForGhost.push(_this.getRootView().refs[id].el);
                }
            });
        }
        return this.config.dragMode && !this._edited
            ? ts_data_1.dragManager.onMouseDown(e, this.selection.getId() || itemId, itemsForGhost)
            : null;
    };
    List.prototype._setFocusIndex = function (index) {
        if (index < 0 || index > this.data.getLength() - 1) {
            return;
        }
        this._focusIndex = index;
        var rootView = this.getRootView();
        if (!rootView || !rootView.node || !rootView.node.el) {
            return;
        }
        var listEl = this.getRootNode();
        if (!listEl) {
            return;
        }
        if (this.config.virtual) {
            var position = index * helpers_1.defineValue(this.config.itemHeight);
            if (position >= helpers_1.defineValue(this._visibleHeight) + this._topOffset ||
                position < this._topOffset) {
                listEl.scrollTo(0, position);
            }
        }
        else {
            var listItem = listEl.children[index];
            if (!listItem) {
                return;
            }
            if (listItem.offsetTop >= listEl.scrollTop + listEl.clientHeight - listItem.clientHeight) {
                listEl.scrollTop = listItem.offsetTop - listEl.clientHeight + listItem.clientHeight;
            }
            else if (listItem.offsetTop < listEl.scrollTop) {
                listEl.scrollTop = listItem.offsetTop;
            }
        }
        this.events.fire(types_1.ListEvents.focusChange, [this._focusIndex, this.data.getId(this._focusIndex)]);
        this.paint();
    };
    List.prototype._updateVirtual = function (position) {
        var overscanCount = 5;
        var totalHeight = this._getHeight();
        if (position > totalHeight - helpers_1.defineValue(this._visibleHeight)) {
            position = totalHeight - helpers_1.defineValue(this._visibleHeight);
        }
        var count = Math.floor(helpers_1.defineValue(this._visibleHeight) / helpers_1.defineValue(this.config.itemHeight)) +
            overscanCount;
        var index = Math.floor(position / helpers_1.defineValue(this.config.itemHeight));
        this._range = [index, count + index];
        this._topOffset = position;
        this.paint();
    };
    List.prototype._getHeight = function () {
        return this.data.getLength() * helpers_1.defineValue(this.config.itemHeight);
    };
    List.prototype._getHotkeys = function () {
        var _this = this;
        if (this.config.keyNavigation) {
            if (this._edited) {
                if (this._navigationDestructor) {
                    this._navigationDestructor();
                }
            }
            else {
                var keyNavigation = this.config.keyNavigation;
                if (typeof this.config.keyNavigation !== "function") {
                    this._widgetInFocus = false;
                    keyNavigation = function () { return _this._widgetInFocus; };
                    this._documentClickDestuctor = core_1.detectWidgetClick(this._uid, function (isInnerClick) { return (_this._widgetInFocus = isInnerClick); });
                }
                var preventEvent = function (fn) { return function (e) {
                    e.preventDefault();
                    fn();
                }; };
                var handlers = {
                    arrowDown: preventEvent(function () { return _this.setFocusIndex(_this._focusIndex + 1); }),
                    arrowUp: preventEvent(function () { return _this.setFocusIndex(_this._focusIndex - 1); }),
                    enter: function (e) {
                        var id = _this.data.getId(_this._focusIndex);
                        _this.selection.add(id);
                        _this.events.fire(types_1.ListEvents.click, [id, e]);
                    },
                    "enter+shift": function (e) {
                        var id = _this.data.getId(_this._focusIndex);
                        _this.selection.add(id, false, true);
                        _this.events.fire(types_1.ListEvents.click, [id, e]);
                    },
                    "enter+ctrl": function (e) {
                        var id = _this.data.getId(_this._focusIndex);
                        _this.selection.add(id, true, false);
                        _this.events.fire(types_1.ListEvents.click, [id, e]);
                    },
                    "ctrl+a": function (e) {
                        if (_this.config.multiselection) {
                            e.preventDefault();
                            _this.selection.remove();
                            var ids = _this.data.map(function (i) { return i.id; });
                            ids.forEach(function (id) {
                                if (_this.config.multiselection === "ctrlClick") {
                                    _this.selection.add(id, true);
                                }
                                else {
                                    _this.selection.add(id);
                                }
                            });
                        }
                    },
                };
                if (html_1.isIE()) {
                    handlers = __assign({ up: handlers.arrowUp, down: handlers.arrowDown }, handlers);
                    delete handlers.arrowUp;
                    delete handlers.arrowDown;
                }
                this._navigationDestructor = Keymanager_1.addHotkeys(handlers, keyNavigation);
            }
        }
    };
    List.prototype._lazyLoad = function (e) {
        var y = e.target.scrollTop;
        var from = Math.round(y / helpers_1.defineValue(this.config.itemHeight));
        var onScreenCount = this.config.height / helpers_1.defineValue(this.config.itemHeight);
        var proxy = this.data.dataProxy;
        if (proxy &&
            proxy.config &&
            !this.data.isDataLoaded(from, onScreenCount + from + proxy.config.prepare)) {
            proxy.updateUrl(null, { from: from, limit: proxy.config.limit });
            this.data.load(proxy);
        }
    };
    return List;
}(view_1.View));
exports.List = List;


/***/ }),

/***/ "../ts-list/sources/Selection.ts":
/*!***************************************!*\
  !*** ../ts-list/sources/Selection.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(/*! @dhx/ts-common/types */ "../ts-common/types.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var Selection = /** @class */ (function () {
    function Selection(config, data) {
        var _this = this;
        this._disable = false;
        this.config = config;
        this.events = data.events;
        this._data = data;
        this._disable = this.config.disable;
        this._selected = [];
        this._lastShiftSelectedIndexes = [];
        this._data.events.on(ts_data_1.DataEvents.removeAll, function () {
            _this._selected = [];
        });
        if (typeof this.config.multiselection === "string") {
            var types = ["click", "ctrlClick"];
            if (!types.includes(this.config.multiselection)) {
                this.config.multiselection = false;
            }
        }
        this._data.events.on(ts_data_1.DataEvents.afterRemove, function (obj) {
            _this.remove(obj && obj.id);
            if (_this.config.multiselection && _this.getId().length !== 0) {
                _this._lastSelectedIndex = _this._data.getIndex(_this._selected[_this._selected.length - 1]);
                return;
            }
            var id = _this._data.getId(_this._lastSelectedIndex);
            if (id && id === _this._selected[0]) {
                _this.add(id);
            }
            else if (!id && _this._data.getLength() - _this._lastSelectedIndex === 0) {
                var lastItemId = _this._data.getId(_this._data.getLength() - 1);
                if (lastItemId) {
                    _this.add(lastItemId);
                }
            }
            else if (id && !_this._selected.length) {
                _this.add(id);
            }
            return;
        });
    }
    Selection.prototype.getId = function () {
        if (this.config.multiselection) {
            return this._selected;
        }
        return this._selected[0];
    };
    Selection.prototype.getItem = function () {
        var _this = this;
        if (this._selected.length) {
            var items = this._selected.map(function (id) { return _this._data.getItem(id); });
            return this.config.multiselection ? items : items[0];
        }
        return null;
    };
    Selection.prototype.contains = function (id) {
        if (this._disable)
            return;
        if (id) {
            return this._selected.includes(id);
        }
        return this._selected.length > 0;
    };
    Selection.prototype.remove = function (id) {
        var _this = this;
        if (this._disable)
            return;
        if (id) {
            return this._unselectItem(id);
        }
        this._selected.forEach(function (selectedId) { return _this._unselectItem(selectedId); });
        return true;
    };
    Selection.prototype.add = function (id, isCtrl, isShift, silent) {
        var multiselection = this.config.multiselection;
        if (this._disable || !this._data.exists(id) || (!multiselection && this._selected.includes(id))) {
            return;
        }
        !multiselection && this.remove();
        var silentEvent = silent ? null : !this.events.fire(types_1.SelectionEvents.beforeSelect, [id]);
        if (!this._selected.includes(id) && silentEvent) {
            return;
        }
        if (multiselection) {
            this._addMulti(id, isCtrl, isShift, silent);
        }
        else {
            this._addSingle(id, isCtrl, silent);
        }
    };
    Selection.prototype.enable = function () {
        if (!this.events.fire(types_1.SelectionEvents.beforeEnable, []))
            return;
        this._disable = false;
        this.events.fire(types_1.SelectionEvents.afterEnable, []);
    };
    Selection.prototype.disable = function () {
        if (!this.events.fire(types_1.SelectionEvents.beforeDisable, []))
            return;
        this.remove();
        this._disable = true;
        this.events.fire(types_1.SelectionEvents.afterDisable, []);
    };
    Selection.prototype.isDisabled = function () {
        return this._disable;
    };
    Selection.prototype._addMulti = function (id, isCtrl, isShift, silent) {
        var currentSelectedItemIndex = this._data.getIndex(id);
        if (this.config.multiselection === "click" || this.config.multiselection === true) {
            if (isShift) {
                this._addWithShift(currentSelectedItemIndex);
                this.events.fire(types_1.SelectionEvents.afterSelect, [id]);
            }
            else {
                this._isSelected(id) ? this._unselectItem(id) : this._selectItem(id, silent);
                this._lastSelectedIndex = this._data.getIndex(this._selected[this._selected.length - 1]);
                this._lastShiftSelectedIndexes = [];
            }
        }
        if (this.config.multiselection === "ctrlClick") {
            if (!isShift && !isCtrl) {
                this.remove();
                this._isSelected(id) ? this._unselectItem(id) : this._selectItem(id, silent);
                this._lastSelectedIndex = this._data.getIndex(this._selected[this._selected.length - 1]);
                this._lastShiftSelectedIndexes = [];
            }
            if (isShift) {
                this._addWithShift(currentSelectedItemIndex);
                this.events.fire(types_1.SelectionEvents.afterSelect, [id]);
            }
            if (isCtrl) {
                this._isSelected(id) ? this._unselectItem(id) : this._selectItem(id, silent);
                this._lastSelectedIndex = this._data.getIndex(this._selected[this._selected.length - 1]);
                this._lastShiftSelectedIndexes = [];
            }
        }
    };
    Selection.prototype._addWithShift = function (currentSelectedItemIndex) {
        var _this = this;
        if (currentSelectedItemIndex >= this._lastSelectedIndex) {
            // remove last selection with shift
            this._data.map(function (item, index) {
                if (_this._lastShiftSelectedIndexes.includes(index)) {
                    item.$selected = false;
                    _this._selected = _this._selected.filter(function (i) { return i !== _this._data.getId(index); });
                    _this._lastShiftSelectedIndexes = _this._lastShiftSelectedIndexes.filter(function (i) {
                        return i !== index && i !== _this._lastSelectedIndex;
                    });
                }
            });
            // add new selection with shift
            this._data.map(function (item, index) {
                if (index >= _this._lastSelectedIndex && index <= currentSelectedItemIndex) {
                    item.$selected = true;
                    if (!_this._selected.includes(item.id)) {
                        _this._selected.push(item.id);
                    }
                    if (index !== _this._lastSelectedIndex) {
                        if (!_this._lastShiftSelectedIndexes.includes(index)) {
                            _this._lastShiftSelectedIndexes.push(index);
                        }
                    }
                }
            });
        }
        if (currentSelectedItemIndex <= this._lastSelectedIndex) {
            // remove last selection with shift
            this._data.map(function (item, index) {
                if (_this._lastShiftSelectedIndexes.includes(index)) {
                    item.$selected = false;
                    _this._selected = _this._selected.filter(function (i) { return i !== _this._data.getId(index); });
                    _this._lastShiftSelectedIndexes = _this._lastShiftSelectedIndexes.filter(function (i) {
                        return i !== index && i !== _this._lastSelectedIndex;
                    });
                }
            });
            // add new selection with shift
            this._data.map(function (item, index) {
                if (index <= _this._lastSelectedIndex && index >= currentSelectedItemIndex) {
                    item.$selected = true;
                    if (!_this._selected.includes(item.id)) {
                        _this._selected.push(item.id);
                    }
                    if (index !== _this._lastSelectedIndex) {
                        if (!_this._lastShiftSelectedIndexes.includes(index)) {
                            _this._lastShiftSelectedIndexes.push(index);
                        }
                    }
                }
            });
        }
    };
    Selection.prototype._addSingle = function (id, isCtrl, silent) {
        this.remove();
        if (this.config && this.config.multiselection !== "ctrlClick") {
            this._selectItem(id, silent);
        }
        else {
            if (isCtrl) {
                this._selectItem(id, silent);
            }
        }
    };
    Selection.prototype._isSelected = function (id) {
        return this._selected.includes(id);
    };
    Selection.prototype._selectItem = function (id, silent) {
        this._selected.push(id);
        this._data.update(id, { $selected: true }, silent);
        this._lastSelectedIndex = this._data.getIndex(id);
        !silent && this.events.fire(types_1.SelectionEvents.afterSelect, [id]);
    };
    Selection.prototype._unselectItem = function (id) {
        if (this.events.fire(types_1.SelectionEvents.beforeUnSelect, [id])) {
            this._selected = this._selected.filter(function (selectedId) { return selectedId !== id; });
            this.events.fire(types_1.SelectionEvents.afterUnSelect, [id]);
            if (this._data.exists(id)) {
                this._data.update(id, { $selected: false });
            }
            return true;
        }
        return false;
    };
    return Selection;
}());
exports.Selection = Selection;


/***/ }),

/***/ "../ts-list/sources/editors/InputEditor.ts":
/*!*************************************************!*\
  !*** ../ts-list/sources/editors/InputEditor.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-list/sources/types.ts");
var InputEditor = /** @class */ (function () {
    function InputEditor(item, list) {
        var _this = this;
        this._list = list;
        this._config = list.config;
        this._item = item;
        this._list.events.on(types_1.ListEvents.focusChange, function (index, id) {
            if (_this._mode && id !== _this._item.id) {
                _this.endEdit();
            }
        });
        this._initHandlers();
    }
    InputEditor.prototype.endEdit = function () {
        if (this._input) {
            var value = this._input.value;
            if (this._list.events.fire(types_1.ListEvents.beforeEditEnd, [value, this._item.id])) {
                this._input.removeEventListener("blur", this._handlers.onBlur);
                this._input.removeEventListener("change", this._handlers.onChange);
                this._handlers = {};
                this._mode = false;
                this._list.events.fire(types_1.ListEvents.afterEditEnd, [value, this._item.id]);
            }
            else {
                this._input.focus();
            }
        }
    };
    InputEditor.prototype.toHTML = function () {
        this._mode = true;
        var itemHeight = this._config.itemHeight;
        return dom_1.el(".dhx_input__wrapper", {}, [
            dom_1.el("div.dhx_input__container", {}, [
                dom_1.el("input.dhx_input", {
                    class: this._item.css ? " " + this._item.css : "",
                    style: {
                        height: itemHeight,
                        width: "100%",
                        padding: "8px, 12px",
                    },
                    _hooks: {
                        didInsert: this._handlers.didInsert,
                    },
                    _key: this._item.id,
                    dhx_id: this._item.id,
                }),
            ]),
        ]);
    };
    InputEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onBlur: function () {
                _this.endEdit();
            },
            onChange: function () {
                _this.endEdit();
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                input.focus();
                input.value = _this._item.value;
                input.setSelectionRange(0, input.value.length);
                input.addEventListener("change", _this._handlers.onChange);
                input.addEventListener("blur", _this._handlers.onBlur);
            },
        };
    };
    return InputEditor;
}());
exports.InputEditor = InputEditor;


/***/ }),

/***/ "../ts-list/sources/editors/editors.ts":
/*!*********************************************!*\
  !*** ../ts-list/sources/editors/editors.ts ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var InputEditor_1 = __webpack_require__(/*! ./InputEditor */ "../ts-list/sources/editors/InputEditor.ts");
function getEditor(item, list) {
    return new InputEditor_1.InputEditor(item, list);
}
exports.getEditor = getEditor;


/***/ }),

/***/ "../ts-list/sources/helpers.ts":
/*!*************************************!*\
  !*** ../ts-list/sources/helpers.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function defineValue(property) {
    if (property) {
        var prop = property.toString().trim();
        if (!prop.includes("calc")) {
            return parseInt(prop.split(/\D+/g)[0], null);
        }
    }
}
exports.defineValue = defineValue;
function defineUnit(property) {
    if (property) {
        var prop = property.toString().trim();
        if (!prop.includes("calc")) {
            return prop.slice(prop.split(/\D+/g)[0].length);
        }
    }
}
exports.defineUnit = defineUnit;


/***/ }),

/***/ "../ts-list/sources/types.ts":
/*!***********************************!*\
  !*** ../ts-list/sources/types.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ListEvents;
(function (ListEvents) {
    ListEvents["click"] = "click";
    ListEvents["doubleClick"] = "doubleclick";
    ListEvents["focusChange"] = "focuschange";
    ListEvents["beforeEditStart"] = "beforeEditStart";
    ListEvents["afterEditStart"] = "afterEditStart";
    ListEvents["beforeEditEnd"] = "beforeEditEnd";
    ListEvents["afterEditEnd"] = "afterEditEnd";
    ListEvents["itemRightClick"] = "itemRightClick";
    ListEvents["itemMouseOver"] = "itemMouseOver";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ListEvents["contextmenu"] = "contextmenu";
})(ListEvents = exports.ListEvents || (exports.ListEvents = {}));


/***/ }),

/***/ "../ts-menu/index.ts":
/*!***************************!*\
  !*** ../ts-menu/index.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/ContextMenu */ "../ts-menu/sources/ContextMenu.ts"));
__export(__webpack_require__(/*! ./sources/Menu */ "../ts-menu/sources/Menu.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-menu/sources/types.ts"));


/***/ }),

/***/ "../ts-menu/sources/ContextMenu.ts":
/*!*****************************************!*\
  !*** ../ts-menu/sources/ContextMenu.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var ts_navbar_1 = __webpack_require__(/*! @dhx/ts-navbar */ "../ts-navbar/index.ts");
var ContextMenu = /** @class */ (function (_super) {
    __extends(ContextMenu, _super);
    function ContextMenu() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._isContextMenu = true;
        return _this;
    }
    ContextMenu.prototype.showAt = function (elem, showAt) {
        if (showAt === void 0) { showAt = "bottom"; }
        if (elem instanceof MouseEvent) {
            this._changeActivePosition({
                left: window.pageXOffset + elem.x + 1,
                right: window.pageXOffset + elem.x + 1,
                top: window.pageYOffset + elem.y,
                bottom: window.pageYOffset + elem.y,
            }, showAt);
        }
        else {
            var node = html_1.toNode(elem);
            this._changeActivePosition(html_1.getRealPosition(node), showAt);
        }
    };
    ContextMenu.prototype._getFactory = function () {
        return ts_navbar_1.createFactory({
            widget: this,
            defaultType: "menuItem",
            allowedTypes: [
                "menuItem",
                "spacer",
                "separator",
                "customHTML",
                // TODO: deprecated
                "customHTMLButton",
            ],
            widgetName: "context-menu",
        });
    };
    ContextMenu.prototype._close = function (e) {
        _super.prototype._close.call(this, e);
        this._activeMenu = null;
        this._changeActivePosition(null, null);
    };
    ContextMenu.prototype._getMode = function (_item, _root, active) {
        return active ? this._mode : "right";
    };
    ContextMenu.prototype._changeActivePosition = function (position, mode) {
        this._activePosition = position;
        this._mode = mode;
        this._listenOuterClick();
        this.paint();
    };
    return ContextMenu;
}(ts_navbar_1.Navbar));
exports.ContextMenu = ContextMenu;


/***/ }),

/***/ "../ts-menu/sources/Menu.ts":
/*!**********************************!*\
  !*** ../ts-menu/sources/Menu.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var ts_navbar_1 = __webpack_require__(/*! @dhx/ts-navbar */ "../ts-navbar/index.ts");
var Menu = /** @class */ (function (_super) {
    __extends(Menu, _super);
    function Menu(element, config) {
        var _this = _super.call(this, element, config) || this;
        var render = function () { return _this._draw(); };
        _this.mount(element, dom_1.create({ render: render }));
        return _this;
    }
    Menu.prototype._getFactory = function () {
        return ts_navbar_1.createFactory({
            widget: this,
            defaultType: "menuItem",
            allowedTypes: [
                "menuItem",
                "spacer",
                "separator",
                "customHTML",
                // TODO: deprecated
                "customHTMLButton",
            ],
            widgetName: "menu-nav",
        });
    };
    Menu.prototype._draw = function () {
        return dom_1.el("ul.dhx_widget", {
            dhx_widget_id: this._uid,
            onmousemove: this._handlers.onmousemove,
            onmouseleave: this._handlers.onmouseleave,
            onclick: this._handlers.onclick,
            onmousedown: this._handlers.onmousedown,
            class: "dhx_menu-nav " + (this.config.css ? this.config.css : ""),
        }, this._drawMenuItems(this.data.getRoot(), false));
    };
    return Menu;
}(ts_navbar_1.Navbar));
exports.Menu = Menu;


/***/ }),

/***/ "../ts-menu/sources/types.ts":
/*!***********************************!*\
  !*** ../ts-menu/sources/types.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ts_navbar_1 = __webpack_require__(/*! @dhx/ts-navbar */ "../ts-navbar/index.ts");
exports.NavigationBarEvents = ts_navbar_1.NavigationBarEvents;


/***/ }),

/***/ "../ts-message/index.ts":
/*!******************************!*\
  !*** ../ts-message/index.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/message */ "../ts-message/sources/message.ts"));
__export(__webpack_require__(/*! ./sources/alert */ "../ts-message/sources/alert.ts"));
__export(__webpack_require__(/*! ./sources/confirm */ "../ts-message/sources/confirm.ts"));
__export(__webpack_require__(/*! ./sources/tooltip */ "../ts-message/sources/tooltip.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-message/sources/types.ts"));


/***/ }),

/***/ "../ts-message/sources/alert.ts":
/*!**************************************!*\
  !*** ../ts-message/sources/alert.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-message/sources/locales/en.ts");
var common_1 = __webpack_require__(/*! ./common */ "../ts-message/sources/common.ts");
function alert(props) {
    var apply = props.buttons && props.buttons[0] ? props.buttons[0] : en_1.default.apply;
    var unblock = common_1.blockScreen(props.blockerCss);
    return new Promise(function (res) {
        var alertBox = document.createElement("div");
        alertBox.className = "dhx_widget dhx_alert " + (props.css || "");
        alertBox.innerHTML = "\n\t\t\t" + (props.header ? "<div class=\"dhx_alert__header\"> " + props.header + " </div>" : "") + "\n\t\t\t" + (props.text ? "<div class=\"dhx_alert__content\">" + props.text + "</div>" : "") + "\n\t\t\t<div class=\"dhx_alert__footer " + (props.buttonsAlignment ? "dhx_alert__footer--" + props.buttonsAlignment : "") + "\">\n\t\t\t\t<button class=\"dhx_alert__apply-button dhx_button dhx_button--view_flat dhx_button--color_primary dhx_button--size_medium\">" + apply + "</button>\n\t\t\t</div>";
        document.body.appendChild(alertBox);
        alertBox.querySelector(".dhx_alert__apply-button").focus();
        alertBox.querySelector("button").addEventListener("click", function () {
            unblock();
            document.body.removeChild(alertBox);
            res(true);
        });
    });
}
exports.alert = alert;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promiz */ "../node_modules/promiz/promiz.js")))

/***/ }),

/***/ "../ts-message/sources/common.ts":
/*!***************************************!*\
  !*** ../ts-message/sources/common.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function blockKeys(e) {
    var active = document.activeElement;
    if (!active.classList.contains("dhx_alert__confirm-reject") &&
        !active.classList.contains("dhx_alert__confirm-aply")) {
        e.preventDefault();
    }
}
function blockScreen(css) {
    var blocker = document.createElement("div");
    blocker.className = "dhx_alert__overlay " + (css || "");
    document.body.appendChild(blocker);
    document.addEventListener("keydown", blockKeys);
    return function () {
        document.body.removeChild(blocker);
        document.removeEventListener("keydown", blockKeys);
    };
}
exports.blockScreen = blockScreen;


/***/ }),

/***/ "../ts-message/sources/confirm.ts":
/*!****************************************!*\
  !*** ../ts-message/sources/confirm.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-message/sources/locales/en.ts");
var common_1 = __webpack_require__(/*! ./common */ "../ts-message/sources/common.ts");
function confirm(props) {
    var apply = props.buttons && props.buttons[0] ? props.buttons[0] : en_1.default.apply;
    var reject = props.buttons && props.buttons[1] ? props.buttons[1] : en_1.default.reject;
    var unblock = common_1.blockScreen(props.blockerCss);
    return new Promise(function (res) {
        var confirmBox = document.createElement("div");
        var answer = function (val) {
            unblock();
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            confirmBox.removeEventListener("click", clickHandler);
            document.body.removeChild(confirmBox);
            res(val);
        };
        var clickHandler = function (e) {
            if (e.target.tagName === "BUTTON") {
                answer(e.target.classList.contains("dhx_alert__confirm-aply"));
            }
        };
        confirmBox.className = "dhx_widget dhx_alert dhx_alert--confirm" + (props.css ? " " + props.css : "");
        confirmBox.innerHTML = "\n\t\t" + (props.header ? "<div class=\"dhx_alert__header\"> " + props.header + " </div>" : "") + "\n\t\t" + (props.text ? "<div class=\"dhx_alert__content\">" + props.text + "</div>" : "") + "\n\t\t\t<div class=\"dhx_alert__footer " + (props.buttonsAlignment ? "dhx_alert__footer--" + props.buttonsAlignment : "") + "\">\n\t\t\t\t<button class=\"dhx_alert__confirm-aply dhx_button dhx_button--view_link dhx_button--color_primary dhx_button--size_medium\">" + apply + "</button>\n\t\t\t\t<button class=\"dhx_alert__confirm-reject dhx_button dhx_button--view_flat dhx_button--color_primary dhx_button--size_medium\">" + reject + "</button>\n\t\t\t</div>";
        document.body.appendChild(confirmBox);
        confirmBox.querySelector(".dhx_alert__confirm-reject").focus();
        confirmBox.addEventListener("click", clickHandler);
    });
}
exports.confirm = confirm;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promiz */ "../node_modules/promiz/promiz.js")))

/***/ }),

/***/ "../ts-message/sources/locales/en.ts":
/*!*******************************************!*\
  !*** ../ts-message/sources/locales/en.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var locale = {
    apply: "apply",
    reject: "reject",
};
exports.default = locale;


/***/ }),

/***/ "../ts-message/sources/message.ts":
/*!****************************************!*\
  !*** ../ts-message/sources/message.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-message/sources/types.ts");
var nodeTimeout = new WeakMap();
var containers = new Map();
function createMessageContainer(parent, position) {
    var messageContainer = document.createElement("div");
    messageContainer.setAttribute("data-position", position);
    messageContainer.className =
        "dhx_message-container " +
            "dhx_message-container--" +
            position +
            (parent === document.body ? " dhx_message-container--in-body" : "");
    return messageContainer;
}
function onExpire(node, fromClick) {
    if (fromClick) {
        clearTimeout(nodeTimeout.get(node));
    }
    var container = node.parentNode;
    var position = container.getAttribute("data-position");
    var parent = container.parentNode;
    var messageContainerInfo = containers.get(parent);
    if (!messageContainerInfo) {
        return;
    }
    var positionInfo = messageContainerInfo[position];
    if (!positionInfo) {
        return;
    }
    var stack = positionInfo.stack;
    var index = stack.indexOf(node);
    if (index !== -1) {
        container.removeChild(node);
        stack.splice(index, 1);
        if (stack.length === 0) {
            parent.removeChild(container);
        }
        return;
    }
}
function message(props) {
    var _a;
    if (typeof props === "string") {
        props = { text: props };
    }
    props.position = props.position || types_1.MessageContainerPosition.topRight;
    var messageBox = document.createElement("div");
    messageBox.className = "dhx_widget dhx_message " + (props.css || "");
    if (props.html) {
        messageBox.innerHTML = props.html;
    }
    else {
        messageBox.innerHTML = "<span class=\"dhx_message__text\">" + props.text + "</span>\n\t\t" + (props.icon ? "<span class=\"dhx_message__icon dxi " + props.icon + "\"></span>" : "");
    }
    var parent = props.node ? html_1.toNode(props.node) : document.body;
    var position = getComputedStyle(parent).position;
    if (position === "static") {
        parent.style.position = "relative";
    }
    var messageContainerInfo = containers.get(parent);
    if (!messageContainerInfo) {
        containers.set(parent, (_a = {},
            _a[props.position] = {
                stack: [],
                container: createMessageContainer(parent, props.position),
            },
            _a));
    }
    else if (!messageContainerInfo[props.position]) {
        messageContainerInfo[props.position] = {
            stack: [],
            container: createMessageContainer(parent, props.position),
        };
    }
    var _b = containers.get(parent)[props.position], stack = _b.stack, container = _b.container;
    if (stack.length === 0) {
        parent.appendChild(container);
    }
    stack.push(messageBox);
    container.appendChild(messageBox);
    if (props.expire) {
        var timeout = setTimeout(function () { return onExpire(messageBox); }, props.expire);
        nodeTimeout.set(messageBox, timeout);
    }
    messageBox.onclick = function () { return onExpire(messageBox, true); };
}
exports.message = message;


/***/ }),

/***/ "../ts-message/sources/tooltip.ts":
/*!****************************************!*\
  !*** ../ts-message/sources/tooltip.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-message/sources/types.ts");
var DEFAULT_SHOW_DELAY = 750;
var DEFAULT_HIDE_DELAY = 200;
function findPosition(targetRect, position, width, height) {
    var margin = 8; // margin top/bot, left/right
    var pos;
    var left;
    var top;
    switch (position) {
        case types_1.Position.center:
            left = targetRect.left + window.pageXOffset + (targetRect.width - width) / 2;
            if (left + margin < window.pageXOffset) {
                left = targetRect.left + window.pageXOffset;
            }
            top = targetRect.top + window.pageYOffset + (targetRect.height - height) / 2;
            pos = types_1.RealPosition.center;
            return { left: left, top: top, pos: pos };
        case types_1.Position.right:
            pos = types_1.RealPosition.right;
            left = targetRect.right + window.pageXOffset;
            if (left + width + margin > window.innerWidth + window.pageXOffset) {
                // set left
                left = window.pageXOffset + targetRect.left - width;
                pos = types_1.RealPosition.left;
            }
            top = window.pageYOffset + targetRect.top + (targetRect.height - height) / 2;
            return { left: left, top: top, pos: pos };
        case types_1.Position.bottom:
        default:
            left = window.pageXOffset + targetRect.left + (targetRect.width - width) / 2;
            if (left + width > window.innerWidth + window.pageXOffset) {
                left = window.innerWidth + window.pageXOffset - width;
            }
            else if (left < 0) {
                left = 0;
            }
            pos = types_1.RealPosition.bottom;
            top = window.pageYOffset + targetRect.bottom;
            if (top + height + margin > window.innerHeight + window.pageYOffset) {
                // set top
                top = window.pageYOffset + targetRect.top - height;
                pos = types_1.RealPosition.top;
            }
            return { left: left, top: top, pos: pos };
    }
}
exports.findPosition = findPosition;
// tooltip init
var tooltipBox = document.createElement("div");
var tooltipText = document.createElement("span");
tooltipText.className = "dhx_tooltip__text";
tooltipBox.appendChild(tooltipText);
tooltipBox.style.position = "absolute";
var lastNode = null;
var isActive = false;
var hideTimeout = null;
var showTimeout = null;
var activeListenersDestructor;
function showTooltip(node, text, position, css, force) {
    if (force === void 0) { force = false; }
    var rects = node.getBoundingClientRect();
    tooltipText.textContent = text;
    document.body.appendChild(tooltipBox);
    tooltipBox.className = "dhx_widget dhx_tooltip" + (force ? " dhx_tooltip--forced" : "");
    var _a = tooltipBox.getBoundingClientRect(), width = _a.width, height = _a.height;
    var _b = findPosition(rects, position, width, height), left = _b.left, top = _b.top, pos = _b.pos;
    switch (pos) {
        case types_1.RealPosition.bottom:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
        case types_1.RealPosition.top:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
        case types_1.RealPosition.left:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
        case types_1.RealPosition.right:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
        case types_1.RealPosition.center:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
    }
    tooltipBox.className += " dhx_tooltip--" + pos + " " + (css || "");
    isActive = true;
    if (!force) {
        setTimeout(function () {
            tooltipBox.className += " dhx_tooltip--animate";
        });
    }
}
function hideTooltip(delay) {
    if (lastNode) {
        hideTimeout = setTimeout(function () {
            document.body.removeChild(tooltipBox);
            isActive = false;
            hideTimeout = null;
        }, delay || DEFAULT_HIDE_DELAY);
    }
}
function addListeners(node, text, config) {
    var force = config.force, showDelay = config.showDelay, hideDelay = config.hideDelay, position = config.position, css = config.css;
    if (!force) {
        showTimeout = setTimeout(function () {
            showTooltip(node, text, position || types_1.Position.bottom, css);
        }, showDelay || DEFAULT_SHOW_DELAY);
    }
    var hide = function () {
        if (isActive) {
            hideTooltip(hideDelay);
        }
        clearTimeout(showTimeout);
        node.removeEventListener("mouseleave", hide);
        node.removeEventListener("blur", hide);
        document.removeEventListener("mousedown", hide);
        lastNode = null;
        activeListenersDestructor = null;
    };
    if (force) {
        showTooltip(node, text, position, css, force);
    }
    node.addEventListener("mouseleave", hide);
    node.addEventListener("blur", hide);
    document.addEventListener("mousedown", hide);
    activeListenersDestructor = hide;
}
// default
function tooltip(text, config) {
    var node = html_1.toNode(config.node);
    if (node === lastNode) {
        return;
    }
    if (activeListenersDestructor) {
        activeListenersDestructor();
        activeListenersDestructor = null;
    }
    lastNode = node;
    if (hideTimeout) {
        clearTimeout(hideTimeout);
        hideTimeout = null;
        addListeners(node, text, __assign(__assign({}, config), { force: true }));
    }
    else {
        addListeners(node, text, config);
    }
}
exports.tooltip = tooltip;
function _mousemove(e) {
    var node = html_1.locateNode(e, "dhx_tooltip_text");
    if (!node) {
        return;
    }
    tooltip(node.getAttribute("dhx_tooltip_text"), {
        position: node.getAttribute("dhx_tooltip_position") || types_1.Position.bottom,
        node: node,
    });
}
function enableTooltip() {
    document.addEventListener("mousemove", _mousemove);
}
exports.enableTooltip = enableTooltip;
function disableTooltip() {
    document.removeEventListener("mousemove", _mousemove);
}
exports.disableTooltip = disableTooltip;


/***/ }),

/***/ "../ts-message/sources/types.ts":
/*!**************************************!*\
  !*** ../ts-message/sources/types.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RealPosition;
(function (RealPosition) {
    RealPosition["left"] = "left";
    RealPosition["right"] = "right";
    RealPosition["top"] = "top";
    RealPosition["bottom"] = "bottom";
    RealPosition["center"] = "center";
})(RealPosition = exports.RealPosition || (exports.RealPosition = {}));
var Position;
(function (Position) {
    Position["right"] = "right";
    Position["bottom"] = "bottom";
    Position["center"] = "center";
})(Position = exports.Position || (exports.Position = {}));
var MessageContainerPosition;
(function (MessageContainerPosition) {
    MessageContainerPosition["topLeft"] = "top-left";
    MessageContainerPosition["topRight"] = "top-right";
    MessageContainerPosition["bottomLeft"] = "bottom-left";
    MessageContainerPosition["bottomRight"] = "bottom-right";
})(MessageContainerPosition = exports.MessageContainerPosition || (exports.MessageContainerPosition = {}));


/***/ }),

/***/ "../ts-navbar/index.ts":
/*!*****************************!*\
  !*** ../ts-navbar/index.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Navbar */ "../ts-navbar/sources/Navbar.ts"));
__export(__webpack_require__(/*! ./sources/itemfactory */ "../ts-navbar/sources/itemfactory.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-navbar/sources/types.ts"));


/***/ }),

/***/ "../ts-navbar/sources/Navbar.ts":
/*!**************************************!*\
  !*** ../ts-navbar/sources/Navbar.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var Keymanager_1 = __webpack_require__(/*! @dhx/ts-common/Keymanager */ "../ts-common/Keymanager.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-navbar/sources/types.ts");
function addInGroups(groups, item) {
    if (groups[item.group]) {
        if (item.active) {
            groups[item.group].active = item.id;
        }
        groups[item.group].elements.push(item.id);
    }
    else {
        groups[item.group] = {
            active: item.active ? item.id : null,
            elements: [item.id],
        };
    }
}
var Navbar = /** @class */ (function (_super) {
    __extends(Navbar, _super);
    function Navbar(element, config) {
        var _this = _super.call(this, element, core_1.extend({}, config)) || this;
        _this._isContextMenu = false;
        _this._documentHaveListener = false;
        _this._rootItem = {};
        if (Array.isArray(_this.config.data)) {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.TreeCollection({}, _this.events);
        }
        else if (_this.config.data && _this.config.data.events) {
            _this.data = _this.config.data;
            _this.events = _this.data.events;
            _this.events.context = _this;
        }
        else {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.TreeCollection({}, _this.events);
        }
        _this._documentClick = function (e) {
            if (_this._documentHaveListener) {
                var element_1 = html_1.locateNode(e);
                var supportsTouch = "ontouchstart" in window || navigator.msMaxTouchPoints;
                document.removeEventListener("click", _this._documentClick);
                _this._documentHaveListener = false;
                if ((supportsTouch && !element_1) || !_this._isContextMenu) {
                    _this._close(e);
                }
            }
        };
        _this._currentRoot = _this.data.getRoot();
        _this._factory = _this._getFactory();
        _this._initHandlers();
        _this._init();
        _this._initEvents();
        if (Array.isArray(_this.config.data)) {
            _this.data.parse(_this.config.data);
        }
        return _this;
    }
    Navbar.prototype.paint = function () {
        _super.prototype.paint.call(this);
        this._vpopups.redraw();
    };
    Navbar.prototype.disable = function (ids) {
        this._setProp(ids, "disabled", true);
    };
    Navbar.prototype.enable = function (ids) {
        this._setProp(ids, "disabled", false);
    };
    Navbar.prototype.isDisabled = function (id) {
        var item = this.data.getItem(id);
        if (item) {
            return item.disabled || false;
        }
    };
    Navbar.prototype.show = function (ids) {
        this._setProp(ids, "hidden", false);
    };
    Navbar.prototype.hide = function (ids) {
        this._setProp(ids, "hidden", true);
    };
    Navbar.prototype.destructor = function () {
        this.unmount();
        Keymanager_1.keyManager.removeHotKey(null, this);
        this._vpopups.unmount();
    };
    Navbar.prototype.select = function (id, unselect) {
        var _this = this;
        if (unselect === void 0) { unselect = true; }
        if (!id) {
            throw new Error("Function argument cannot be empty, for more info check documentation https://docs.dhtmlx.com");
        }
        unselect && this.unselect();
        this.data.update(id, { active: true });
        this.data.eachParent(id, function (parent) {
            _this.data.update(parent.id, { active: true });
        });
    };
    Navbar.prototype.unselect = function (id) {
        var _this = this;
        if (!id) {
            this.data.forEach(function (item) {
                _this.data.update(item.id, { active: false });
            });
        }
        else {
            this.data.update(id, { active: false });
            this.data.eachChild(id, function (parent) {
                _this.data.update(parent.id, { active: false });
            });
        }
    };
    Navbar.prototype.isSelected = function (id) {
        if (!id || !this.data.getItem(id)) {
            return;
        }
        return !!this.data.getItem(id).active;
    };
    Navbar.prototype.getSelected = function () {
        var selected = [];
        this.data.forEach(function (item) {
            item.active && selected.push(item.id);
        });
        return selected;
    };
    Navbar.prototype._customHandlers = function () {
        return {};
    };
    Navbar.prototype._close = function (e) {
        var _this = this;
        if (!this._popupActive || !this.events.fire(types_1.NavigationBarEvents.beforeHide, [this._activeMenu, e])) {
            return;
        }
        if (this._activeParents) {
            this._activeParents.forEach(function (parentId) { return _this.data.exists(parentId) && _this.data.update(parentId, { $activeParent: false }); });
        }
        if (this.config.navigationType === "click") {
            this._isActive = false;
        }
        clearTimeout(this._currentTimeout);
        this._popupActive = false;
        this._activeMenu = null;
        this.events.fire(types_1.NavigationBarEvents.afterHide, [e]);
        this.paint();
    };
    Navbar.prototype._init = function () {
        var _this = this;
        var render = function () {
            return dom_1.el("div", {
                dhx_widget_id: _this._uid,
                class: (_this._isContextMenu ? " dhx_context-menu" : "") + " " + (_this.config.css
                    ? _this.config.css
                        .split(" ")
                        .map(function (i) { return i + "--context-menu"; })
                        .join(" ")
                    : ""),
                onmousemove: _this._handlers.onmousemove,
                onmouseleave: _this._handlers.onmouseleave,
                onclick: _this._handlers.onclick,
                onmousedown: _this._handlers.onmousedown,
            }, _this._drawPopups());
        };
        this._vpopups = dom_1.create({
            render: render,
        });
        this._vpopups.mount(document.body);
    };
    Navbar.prototype._initHandlers = function () {
        var _this = this;
        /*
            for navigation type click:
            first click open menu, _isActive = true
            after navigation use mousemove
            can be closed after outer click or menu leaf item click
        */
        this._isActive = this.config.navigationType !== "click";
        this._handlers = __assign({ onmousemove: function (e) {
                if (!_this._isActive) {
                    return;
                }
                var elem = html_1.locateNode(e);
                if (!elem) {
                    return;
                }
                var id = elem.getAttribute("dhx_id");
                if (_this._activeMenu !== id) {
                    if (_this.data.haveItems(id)) {
                        var position = html_1.getRealPosition(elem);
                        _this.data.update(id, { $position: position }, false);
                    }
                    _this._activeItemChange(id, e);
                }
            }, onmouseleave: function (e) {
                if (_this.config.navigationType !== "click") {
                    // maybe all time when mouse leave close menu
                    if (_this._popupActive) {
                        var element = html_1.locateNode(e, "dhx_id", "relatedTarget");
                        if (element) {
                            var id = element.getAttribute("dhx_id");
                            if (!_this.data.getItem(id)) {
                                _this._close(e);
                            }
                        }
                        else {
                            _this._close(e);
                        }
                    }
                    _this._activeItemChange(null, e);
                }
            }, onclick: function (e) {
                var element = html_1.locateNode(e);
                if (!element) {
                    return;
                }
                var id = element.getAttribute("dhx_id");
                var item = _this.data.getItem(id);
                if (item.multiClick) {
                    return;
                }
                if (_this.data.haveItems(id)) {
                    if (id === _this._currentRoot) {
                        return;
                    }
                    if (!_this._isActive) {
                        _this._isActive = true;
                    }
                    _this._setRoot(id);
                    var position = html_1.getRealPosition(element);
                    _this.data.update(id, { $position: position }, false);
                    _this._activeItemChange(id, e);
                }
                else {
                    switch (item.type) {
                        case "input":
                        case "title":
                            break;
                        case "menuItem":
                        case "selectButton":
                            _this._onMenuItemClick(id, e);
                            break;
                        case "imageButton":
                        case "button":
                        case "customButton":
                        case "customHTML":
                        case "navItem":
                            if (item.twoState) {
                                _this.data.update(item.id, { active: !item.active });
                            }
                            _this.events.fire(types_1.NavigationBarEvents.click, [id, e]);
                            _this._close(e);
                            break;
                        default:
                            _this._close(e);
                    }
                }
            }, onmousedown: function (e) {
                var element = html_1.locateNode(e);
                if (!element) {
                    return;
                }
                var id = element.getAttribute("dhx_id");
                var item = _this.data.getItem(id);
                if (!item.multiClick) {
                    return;
                }
                var fireTime = 365;
                var timeout;
                var fireAction = function () {
                    _this.events.fire(types_1.NavigationBarEvents.click, [id, e]);
                    if (fireTime > 50) {
                        fireTime -= 55;
                    }
                    timeout = setTimeout(fireAction, fireTime);
                };
                var mouseup = function () {
                    clearTimeout(timeout);
                    document.removeEventListener("mouseup", mouseup);
                };
                fireAction();
                document.addEventListener("mouseup", mouseup);
            } }, this._customHandlers());
    };
    Navbar.prototype._initEvents = function () {
        var _this = this;
        var timeout = null;
        this.data.events.on(types_1.DataEvents.change, function () {
            _this.paint();
            if (timeout) {
                clearTimeout(timeout);
            }
            timeout = setTimeout(function () {
                var groups = {};
                _this.data.eachChild(_this.data.getRoot(), function (item) {
                    if (item.group) {
                        item.twoState = true;
                        addInGroups(groups, item);
                    }
                }, true);
                _this._groups = groups;
                _this._resetHotkeys();
                timeout = null;
                _this.paint();
            }, 100);
        });
        this.events.on(types_1.NavigationBarEvents.click, function (id) {
            var item = _this.data.getItem(id);
            var parent = _this.data.getItem(item.parent);
            if (parent && parent.type === "selectButton") {
                _this.data.update(item.parent, { value: item.value, icon: item.icon });
            }
            if (item.group) {
                var group = _this._groups[item.group];
                if (group.active) {
                    _this.data.update(group.active, { active: false });
                }
                group.active = item.id;
                _this.data.update(item.id, { active: true });
            }
        });
        this._customInitEvents();
    };
    Navbar.prototype._getMode = function (item, root, _active) {
        if (_active === void 0) { _active = false; }
        return item.parent === root ? "bottom" : "right";
    };
    Navbar.prototype._drawMenuItems = function (id, asMenuItem) {
        var _this = this;
        if (asMenuItem === void 0) { asMenuItem = true; }
        return this.data.map(function (item) { return _this._factory(item, asMenuItem); }, id, false);
    };
    Navbar.prototype._setRoot = function (_id) {
        return; // need only for toolbar
    };
    Navbar.prototype._getParents = function (id, root) {
        var parentIds = [];
        var afterRoot = false;
        var currentItem = this.data.getItem(id);
        var disabled = currentItem && currentItem.disabled;
        this.data.eachParent(id, function (item) {
            if (item.id === root) {
                parentIds.push(item.id);
                afterRoot = true;
            }
            else if (!afterRoot) {
                parentIds.push(item.id);
            }
        }, !disabled);
        if (this._isContextMenu && this._activePosition) {
            parentIds.push(root);
        }
        return parentIds;
    };
    Navbar.prototype._listenOuterClick = function () {
        if (this._documentHaveListener) {
            return;
        }
        document.addEventListener("click", this._documentClick, true);
        this._documentHaveListener = true;
    };
    Navbar.prototype._customInitEvents = function () {
        return;
    };
    Navbar.prototype._drawPopups = function () {
        var _this = this;
        var id = this._activeMenu;
        if (!this._isContextMenu && !id) {
            return null;
        }
        var root = this._currentRoot;
        if (this._isContextMenu && !this._activePosition) {
            return null;
        }
        var parentIds = this._getParents(id, root);
        this._activeParents = parentIds;
        parentIds.forEach(function (parentId) {
            return _this.data.exists(parentId) && _this.data.update(parentId, { $activeParent: true }, false);
        });
        return parentIds
            .map(function (itemId) {
            if (!_this.data.haveItems(itemId)) {
                return null;
            }
            var item = _this.data.getItem(itemId) || _this._rootItem; // for root item
            _this._popupActive = true;
            return dom_1.el("ul", {
                class: "dhx_widget dhx_menu" + (_this.config.menuCss ? " " + _this.config.menuCss : ""),
                _key: itemId,
                _hooks: {
                    didInsert: function (vnode) {
                        var _a = vnode.el.getBoundingClientRect(), width = _a.width, height = _a.height;
                        var position = _this._isContextMenu && _this._activePosition && itemId === root
                            ? _this._activePosition
                            : item.$position;
                        var mode = _this._getMode(item, root, position === _this._activePosition);
                        var style = html_1.calculatePosition(position, {
                            mode: mode,
                            width: width,
                            height: height,
                        });
                        item.$style = style;
                        vnode.patch({ style: style });
                    },
                    didRecycle: function (_, vnode) {
                        if (_this._isContextMenu && _this._activePosition && itemId === root) {
                            var _a = vnode.el.getBoundingClientRect(), width = _a.width, height = _a.height;
                            var style = html_1.calculatePosition(_this._activePosition, {
                                mode: _this._getMode(item, root, true),
                                width: width,
                                height: height,
                            });
                            item.$style = style;
                            vnode.patch({ style: style });
                        }
                    },
                },
                tabindex: 0,
                style: item.$style || {
                    position: "absolute",
                },
            }, _this._drawMenuItems(itemId));
        })
            .reverse();
    };
    Navbar.prototype._onMenuItemClick = function (id, e) {
        var item = this.data.getItem(id);
        if (item.disabled) {
            return;
        }
        if (item.twoState) {
            this.data.update(item.id, { active: !item.active });
        }
        this.events.fire(types_1.NavigationBarEvents.click, [id, e]);
        this._close(e);
    };
    Navbar.prototype._activeItemChange = function (id, e) {
        var _this = this;
        if (this._activeParents) {
            var parentIds_1 = this._getParents(id, this._currentRoot);
            this._activeParents.forEach(function (parentId) {
                if (_this.data.exists(parentId) && !parentIds_1.includes(parentId)) {
                    _this.data.update(parentId, { $activeParent: false }, false);
                }
            });
        }
        if (id && !this._documentHaveListener) {
            this._listenOuterClick();
        }
        if (id && this.data.haveItems(id)) {
            if (this._activeMenu !== id || !this._popupActive) {
                this.events.fire(types_1.NavigationBarEvents.openMenu, [id]);
            }
            this._activeMenu = id;
            clearTimeout(this._currentTimeout);
            this.paint();
        }
        else {
            clearTimeout(this._currentTimeout);
            this._currentTimeout = setTimeout(function () { return _this.paint(); }, 400);
        }
    };
    Navbar.prototype._resetHotkeys = function () {
        var _this = this;
        Keymanager_1.keyManager.removeHotKey(null, this);
        this.data.map(function (item) {
            if (item.hotkey) {
                Keymanager_1.keyManager.addHotKey(item.hotkey, function () { return _this._onMenuItemClick(item.id, null); }, _this);
            }
        });
    };
    Navbar.prototype._setProp = function (id, key, value) {
        var _a;
        var _this = this;
        if (Array.isArray(id)) {
            id.forEach(function (itemId) {
                var _a;
                return _this.data.update(itemId, (_a = {}, _a[key] = value, _a));
            });
        }
        else {
            this.data.update(id, (_a = {}, _a[key] = value, _a));
        }
    };
    return Navbar;
}(view_1.View));
exports.Navbar = Navbar;


/***/ }),

/***/ "../ts-navbar/sources/elements/button.ts":
/*!***********************************************!*\
  !*** ../ts-navbar/sources/elements/button.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-navbar/sources/elements/helpers.ts");
function button(item, widgetName) {
    var isIconButton = item.icon && !item.value;
    var counterClass = isIconButton ? " dhx_navbar-count--absolute" : " dhx_navbar-count--button-inline";
    return dom_1.el("button.dhx_button", {
        class: helpers_1.getNavbarButtonCSS(item, widgetName),
        dhx_id: item.id,
        disabled: item.disabled,
        type: "button",
    }, [
        item.icon ? helpers_1.getIcon(item.icon, "button") : null,
        item.html
            ? dom_1.el("div.dhx_button__text", { ".innerHTML": item.html })
            : item.value && dom_1.el("span.dhx_button__text", item.value),
        item.count > 0 && helpers_1.getCount(item, counterClass, isIconButton),
        item.value && item.$openIcon
            ? dom_1.el("span.dhx_button__icon.dhx_button__icon--menu.dxi.dxi-menu-right")
            : null,
        item.loading &&
            dom_1.el("span.dhx_button__loading", [dom_1.el("span.dhx_button__loading-icon.dxi.dxi-loading")]),
    ]);
}
exports.button = button;


/***/ }),

/***/ "../ts-navbar/sources/elements/customHTMLButton.ts":
/*!*********************************************************!*\
  !*** ../ts-navbar/sources/elements/customHTMLButton.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
function customHTMLButton(item, widgetName, asMenuItem) {
    var baseClass = asMenuItem ? " dhx_button dhx_menu-button" : " dhx_button dhx_nav-menu-button";
    return dom_1.el("button", {
        class: "dhx_custom-button" + baseClass + (item.$activeParent ? baseClass + "--active" : ""),
        dhx_id: item.id,
        type: "button",
        ".innerHTML": item.html,
    }, item.html ? "" : item.value);
}
exports.customHTMLButton = customHTMLButton;


/***/ }),

/***/ "../ts-navbar/sources/elements/helpers.ts":
/*!************************************************!*\
  !*** ../ts-navbar/sources/elements/helpers.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
function getCount(item, widgetClass, isLimited) {
    var countColor = {
        danger: " dhx_navbar-count--color_danger",
        secondary: " dhx_navbar-count--color_secondary",
        primary: " dhx_navbar-count--color_primary",
        success: " dhx_navbar-count--color_success",
    }[item.countColor] || " dhx_navbar-count--color_danger";
    return dom_1.el(".dhx_navbar-count", {
        class: widgetClass +
            countColor +
            (!isLimited && parseInt(item.count, 10) > 99 ? " dhx_navbar-count--overlimit" : ""),
    }, isLimited && parseInt(item.count, 10) > 99 ? "99+" : item.count);
}
exports.getCount = getCount;
function getIcon(iconName, type) {
    if (iconName === void 0) { iconName = ""; }
    if (iconName.startsWith("dxi")) {
        iconName = "dxi " + iconName;
    }
    return dom_1.el("span", {
        class: "dhx_" + type + "__icon " + iconName,
    });
}
exports.getIcon = getIcon;
var getNavbarItemClass = function (widgetName, item, asMenuItem) {
    var baseClassName = "";
    var resultClassName = "";
    if (asMenuItem) {
        baseClassName = "dhx_menu-item";
    }
    else {
        baseClassName = "dhx_" + widgetName + "__item";
    }
    resultClassName = baseClassName + (item.css ? " " + item.css : "");
    if (item.type === "spacer" || item.type === "separator") {
        resultClassName += " " + baseClassName + "--" + item.type;
    }
    if (item.type === "button" && widgetName === "sidebar" && !item.icon) {
        resultClassName += " dhx_navbar-item--colapse_hidden";
    }
    return resultClassName;
};
function navbarComponentMixin(widgetName, item, asMenuItem, body) {
    var itemClass = getNavbarItemClass(widgetName, item, asMenuItem);
    var hasRibbonSize = widgetName === "ribbon" && (item.type === "navItem" || item.type === "imageButton");
    return dom_1.el("li", {
        _key: item.id,
        class: itemClass +
            (item.icon && !item.value && hasRibbonSize ? " dhx_ribbon__item--icon" : "") +
            (item.src && !item.value && hasRibbonSize ? " dhx_ribbon__item--icon" : "") +
            (item.size && hasRibbonSize ? " dhx_ribbon__item--" + item.size : ""),
        ".innerHTML": item.type === "customHTML" ? item.html : undefined,
        dhx_id: item.type === "customHTML" ? item.id : undefined,
    }, item.type !== "customHTML" ? [body] : undefined);
}
exports.navbarComponentMixin = navbarComponentMixin;
function getNavbarButtonCSS(_a, widgetName) {
    var color = _a.color, size = _a.size, view = _a.view, full = _a.full, icon = _a.icon, circle = _a.circle, loading = _a.loading, value = _a.value, active = _a.active;
    var colorsCss = {
        danger: " dhx_button--color_danger",
        secondary: " dhx_button--color_secondary",
        primary: " dhx_button--color_primary",
        success: " dhx_button--color_success",
    }[color] || " dhx_button--color_primary";
    var sizeCss = {
        small: " dhx_button--size_small",
        medium: " dhx_button--size_medium",
    }[size] || " dhx_button--size_medium";
    var viewCss = {
        flat: " dhx_button--view_flat",
        link: " dhx_button--view_link",
    }[view] || " dhx_button--view_flat";
    var fullCss = full ? " dhx_button--width_full" : "";
    var circleCss = circle ? " dhx_button--circle" : "";
    var loadingCss = loading ? " dhx_button--loading" : "";
    var iconViewCss = icon && !value ? " dhx_button--icon" : "";
    var activeCss = active ? " dhx_button--active" : "";
    return colorsCss + sizeCss + viewCss + fullCss + circleCss + loadingCss + activeCss + iconViewCss;
}
exports.getNavbarButtonCSS = getNavbarButtonCSS;


/***/ }),

/***/ "../ts-navbar/sources/elements/imageButton.ts":
/*!****************************************************!*\
  !*** ../ts-navbar/sources/elements/imageButton.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-navbar/sources/elements/helpers.ts");
function imageButton(item, widgetName) {
    var baseClass = "dhx_" + widgetName + "-button-image";
    var isRibbon = widgetName === "ribbon";
    return dom_1.el("button.dhx_button", {
        class: baseClass +
            (item.size ? " " + baseClass + "--" + item.size : "") +
            (!item.value && item.src ? " " + baseClass + "--icon" : "") +
            (isRibbon && item.$openIcon ? " " + baseClass + "--select" : "") +
            (item.active ? " " + baseClass + "--active" : ""),
        dhx_id: item.id,
        type: "button",
    }, [
        isRibbon &&
            item.value &&
            item.$openIcon &&
            dom_1.el("span.dxi.dxi-menu-right", {
                class: baseClass + "__caret",
            }),
        item.html
            ? dom_1.el("div", {
                class: baseClass + "__text",
                ".innerHTML": item.html,
            })
            : item.value &&
                dom_1.el("span", {
                    class: baseClass + "__text",
                }, item.value),
        item.src &&
            dom_1.el("span", {
                class: baseClass + "__image",
                style: { backgroundImage: "url(" + item.src + ")" },
            }),
        item.count > 0 && helpers_1.getCount(item, baseClass + "__count", true),
    ]);
}
exports.imageButton = imageButton;


/***/ }),

/***/ "../ts-navbar/sources/elements/input.ts":
/*!**********************************************!*\
  !*** ../ts-navbar/sources/elements/input.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var types_1 = __webpack_require__(/*! ../types */ "../ts-navbar/sources/types.ts");
function onBlur(events, id) {
    events.fire(types_1.NavigationBarEvents.inputBlur, [id]);
}
function onFocus(events, id) {
    events.fire(types_1.NavigationBarEvents.inputFocus, [id]);
}
function input(item, events, widgetName) {
    return dom_1.el(".dhx_form-group.dhx_form-group--no-message-holder.dhx_form-group--label_sr" +
        (".dhx_" + widgetName + "__input"), {
        style: {
            width: item.width ? item.width : "200px",
        },
    }, [
        dom_1.el("label.dhx_label", { for: item.id }, item.label),
        dom_1.el(".dhx_input__wrapper", [
            dom_1.el("input.dhx_input", {
                placeholder: item.placeholder,
                class: item.icon ? "dhx_input--icon-padding" : "",
                value: item.value,
                onblur: [onBlur, events, item.id],
                onfocus: [onFocus, events, item.id],
                dhx_id: item.id,
                _hooks: {
                    didInsert: function (node) {
                        if (events) {
                            events.fire(types_1.NavigationBarEvents.inputCreated, [item.id, node.el]);
                        }
                    },
                },
                _key: item.id,
            }),
            item.icon
                ? dom_1.el(".dhx_input__icon", {
                    class: item.icon,
                })
                : null,
        ]),
    ]);
}
exports.input = input;


/***/ }),

/***/ "../ts-navbar/sources/elements/menuItem.ts":
/*!*************************************************!*\
  !*** ../ts-navbar/sources/elements/menuItem.ts ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-navbar/sources/elements/helpers.ts");
function menuItem(item, widgetName, asMenuItem) {
    var baseClass = asMenuItem ? " dhx_menu-button" : " dhx_nav-menu-button";
    return dom_1.el("button", {
        class: "dhx_button" +
            baseClass +
            (item.disabled ? baseClass + "--disabled" : "") +
            (item.active || item.$activeParent ? baseClass + "--active" : ""),
        disabled: item.disabled,
        dhx_id: item.id,
        type: "button",
    }, asMenuItem
        ? [
            item.icon || item.value || item.html
                ? dom_1.el("span.dhx_menu-button__block.dhx_menu-button__block--left", [
                    item.icon &&
                        dom_1.el("span.dhx_menu-button__icon", {
                            class: item.icon,
                        }),
                    item.html
                        ? dom_1.el("div.dhx_menu-button__text", { ".innerHTML": item.html })
                        : item.value && dom_1.el("span.dhx_menu-button__text", item.value),
                ])
                : null,
            item.count > 0 || item.hotkey || item.items
                ? dom_1.el("span.dhx_menu-button__block.dhx_menu-button__block--right", [
                    item.count > 0 && helpers_1.getCount(item, " dhx_menu-button__count", false),
                    item.hotkey && dom_1.el("span.dhx_menu-button__hotkey", item.hotkey),
                    item.items && dom_1.el("span.dhx_menu-button__caret.dxi.dxi-menu-right"),
                ])
                : null,
        ]
        : [
            item.icon &&
                dom_1.el("span.dhx_menu-button__icon", {
                    class: item.icon,
                }),
            item.html
                ? dom_1.el("div.dhx_menu-button__text", { ".innerHTML": item.html })
                : item.value && dom_1.el("span.dhx_nav-menu-button__text", item.value),
        ]);
}
exports.menuItem = menuItem;


/***/ }),

/***/ "../ts-navbar/sources/elements/navItem.ts":
/*!************************************************!*\
  !*** ../ts-navbar/sources/elements/navItem.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var helpers_1 = __webpack_require__(/*! ./helpers */ "../ts-navbar/sources/elements/helpers.ts");
function navItem(item, widgetName, collapsed) {
    var baseClass = " dhx_" + widgetName + "-button";
    return dom_1.el("button", {
        class: "dhx_button" +
            baseClass +
            (item.active || item.$activeParent ? baseClass + "--active" : "") +
            (item.disabled ? baseClass + "--disabled" : "") +
            (item.$openIcon ? baseClass + "--select" : "") +
            (item.circle ? baseClass + "--circle" : "") +
            (item.size ? " " + baseClass + "--" + item.size : "") +
            (!item.value && item.icon ? baseClass + "--icon" : "") +
            (item.css ? " " + item.css : ""),
        dhx_id: item.id,
        disabled: item.disabled,
        type: "button",
    }, [
        item.icon &&
            dom_1.el("span", {
                class: item.icon + baseClass + "__icon",
            }),
        item.html &&
            dom_1.el("div", {
                class: baseClass.trim() + "__html",
                ".innerHTML": item.html,
            }),
        !item.html &&
            item.value &&
            dom_1.el("span", {
                class: baseClass.trim() + "__text",
            }, item.value),
        item.count > 0 && helpers_1.getCount(item, baseClass + "__count", collapsed),
        item.$openIcon &&
            dom_1.el("span.dxi.dxi-menu-right", {
                class: baseClass + "__caret",
            }),
    ]);
}
exports.navItem = navItem;


/***/ }),

/***/ "../ts-navbar/sources/elements/separator.ts":
/*!**************************************************!*\
  !*** ../ts-navbar/sources/elements/separator.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function separator(item, widgetName) {
    return null;
}
exports.separator = separator;


/***/ }),

/***/ "../ts-navbar/sources/elements/spacer.ts":
/*!***********************************************!*\
  !*** ../ts-navbar/sources/elements/spacer.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function spacer(item, widgetName) {
    return null;
}
exports.spacer = spacer;


/***/ }),

/***/ "../ts-navbar/sources/elements/title.ts":
/*!**********************************************!*\
  !*** ../ts-navbar/sources/elements/title.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
function title(item, widgetName) {
    return dom_1.el("span", {
        class: "dhx_navbar-title" + " dhx_navbar-title--" + widgetName,
        ".innerHTML": item.html,
    }, !item.html ? item.value : null);
}
exports.title = title;


/***/ }),

/***/ "../ts-navbar/sources/itemfactory.ts":
/*!*******************************************!*\
  !*** ../ts-navbar/sources/itemfactory.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var button_1 = __webpack_require__(/*! ./elements/button */ "../ts-navbar/sources/elements/button.ts");
var navItem_1 = __webpack_require__(/*! ./elements/navItem */ "../ts-navbar/sources/elements/navItem.ts");
var customHTMLButton_1 = __webpack_require__(/*! ./elements/customHTMLButton */ "../ts-navbar/sources/elements/customHTMLButton.ts");
var imageButton_1 = __webpack_require__(/*! ./elements/imageButton */ "../ts-navbar/sources/elements/imageButton.ts");
var input_1 = __webpack_require__(/*! ./elements/input */ "../ts-navbar/sources/elements/input.ts");
var menuItem_1 = __webpack_require__(/*! ./elements/menuItem */ "../ts-navbar/sources/elements/menuItem.ts");
var separator_1 = __webpack_require__(/*! ./elements/separator */ "../ts-navbar/sources/elements/separator.ts");
var spacer_1 = __webpack_require__(/*! ./elements/spacer */ "../ts-navbar/sources/elements/spacer.ts");
var title_1 = __webpack_require__(/*! ./elements/title */ "../ts-navbar/sources/elements/title.ts");
var helpers_1 = __webpack_require__(/*! ./elements/helpers */ "../ts-navbar/sources/elements/helpers.ts");
function itemfactory(item, events, widgetName, props) {
    switch (item.type) {
        case "navItem":
        case "selectButton":
            return navItem_1.navItem(item, widgetName, props.collapsed);
        case "button":
            return button_1.button(item, widgetName);
        case "title":
            return title_1.title(item, widgetName);
        case "separator":
            return separator_1.separator(item, widgetName);
        case "spacer":
            return spacer_1.spacer(item, widgetName);
        case "input":
            return input_1.input(item, events, widgetName);
        case "imageButton":
            return imageButton_1.imageButton(item, widgetName);
        case "menuItem":
            return menuItem_1.menuItem(item, widgetName, props.asMenuItem);
        case "customHTMLButton":
            return customHTMLButton_1.customHTMLButton(item, widgetName, props.asMenuItem);
        case "block":
        default:
            throw new Error("unknown item type " + item.type);
    }
}
function normalizeOpenIcon(widgetName, item, data) {
    switch (widgetName) {
        case "sidebar":
        case "context-menu":
            item.$openIcon = "right";
            break;
        case "toolbar":
            if (item.parent === data.getRoot()) {
                item.$openIcon = "right";
            }
            else {
                item.$openIcon = "bottom";
            }
            break;
        case "menu":
            if (item.parent !== this.data.getRoot()) {
                item.$openIcon = "right";
            }
            break;
        case "ribbon": {
            var parent_1 = data.getItem(item.parent);
            if (parent_1 && item.type !== "block") {
                if (parent_1.type === "block") {
                    item.$openIcon = "bottom";
                }
                else {
                    item.$openIcon = "right";
                }
            }
            break;
        }
    }
}
function createFactory(_a) {
    var defaultType = _a.defaultType, allowedTypes = _a.allowedTypes, widgetName = _a.widgetName, widget = _a.widget;
    var allowedSet = new Set();
    for (var _i = 0, allowedTypes_1 = allowedTypes; _i < allowedTypes_1.length; _i++) {
        var type = allowedTypes_1[_i];
        allowedSet.add(type);
    }
    var config = widget.config, events = widget.events, data = widget.data;
    return function (item, asMenuItem) {
        if (item.hidden) {
            return null;
        }
        if (!item.type || item.type === "button" || item.type === "navItem" || item.type === "menuItem") {
            if (!item.value && !item.icon && !item.html) {
                return null;
            }
        }
        item.type = item.type || defaultType;
        if (allowedSet && !allowedSet.has(item.type)) {
            item.type = defaultType;
        }
        if (item.type === "imageButton" && widgetName !== "ribbon") {
            item.active = false;
        }
        if (asMenuItem && item.type !== "spacer" && item.type !== "separator" && item.type !== "customHTML") {
            item.type = "menuItem";
        }
        if (data.haveItems(item.id)) {
            normalizeOpenIcon(widgetName, item, data);
        }
        if (widgetName === "toolbar" && item.items) {
            item.items.forEach(function (element) {
                if (!element.type) {
                    element.type = "menuItem";
                }
            });
        }
        var itemVNode = item.type !== "customHTML" &&
            itemfactory(item, events, widgetName, {
                asMenuItem: asMenuItem,
                collapsed: widgetName !== "sidebar" || config.collapsed,
            });
        return helpers_1.navbarComponentMixin(widgetName, item, asMenuItem, itemVNode);
    };
}
exports.createFactory = createFactory;


/***/ }),

/***/ "../ts-navbar/sources/types.ts":
/*!*************************************!*\
  !*** ../ts-navbar/sources/types.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
exports.DataEvents = ts_data_1.DataEvents;
var NavigationBarEvents;
(function (NavigationBarEvents) {
    NavigationBarEvents["inputCreated"] = "inputCreated";
    NavigationBarEvents["click"] = "click";
    NavigationBarEvents["openMenu"] = "openmenu";
    NavigationBarEvents["beforeHide"] = "beforeHide";
    NavigationBarEvents["afterHide"] = "afterHide";
    NavigationBarEvents["inputFocus"] = "inputfocus";
    NavigationBarEvents["inputBlur"] = "inputblur";
})(NavigationBarEvents = exports.NavigationBarEvents || (exports.NavigationBarEvents = {}));


/***/ }),

/***/ "../ts-popup/index.ts":
/*!****************************!*\
  !*** ../ts-popup/index.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Popup */ "../ts-popup/sources/Popup.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-popup/sources/types.ts"));


/***/ }),

/***/ "../ts-popup/sources/Popup.ts":
/*!************************************!*\
  !*** ../ts-popup/sources/Popup.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-popup/sources/types.ts");
var Popup = /** @class */ (function (_super) {
    __extends(Popup, _super);
    function Popup(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, null, core_1.extend({}, config)) || this;
        var popup = (_this._popup = document.createElement("div"));
        popup.className = "dhx_widget dhx_popup" + (_this.config.css ? " " + _this.config.css : "");
        popup.style.position = "absolute";
        _this.mount(popup, dom_1.create({
            render: function () { return _this.toVDOM(); },
        }));
        _this._clickEvent = function (e) { return _this.events.fire(types_1.PopupEvents.click, [e]); };
        _this.events = config.events || new events_1.EventSystem(_this);
        _this._isActive = false;
        return _this;
    }
    Popup.prototype.show = function (node, config, attached) {
        var _this = this;
        if (config === void 0) { config = {}; }
        if (!this.events.fire(types_1.PopupEvents.beforeShow, [node])) {
            return;
        }
        node = html_1.toNode(node);
        if (this._isActive) {
            this._setPopupSize(node, config);
            return;
        }
        if (attached) {
            this.attach(attached);
        }
        this._popup.style.left = "0";
        this._popup.style.top = "0";
        dom_1.awaitRedraw()
            .then(function () {
            _this._setPopupSize(node, config);
            _this._popup.style.position = "fixed";
            document.body.appendChild(_this._popup);
            _this._isActive = true;
        })
            .then(function () {
            _this._popup.style.position = "absolute";
            _this.events.fire(types_1.PopupEvents.afterShow, [node]);
            _this._outerClickDestructor = _this._detectOuterClick(node);
        });
    };
    Popup.prototype.hide = function () {
        this._hide(false, null);
    };
    Popup.prototype.isVisible = function () {
        return this._isActive;
    };
    Popup.prototype.attach = function (name, config) {
        this._html = null;
        if (typeof name === "object") {
            this._ui = name;
        }
        else if (typeof name === "string") {
            this._ui = new window.dhx[name](null, config);
        }
        else if (typeof name === "function") {
            if (name.prototype instanceof view_1.View) {
                this._ui = new name(null, config);
            }
            else {
                this._ui = {
                    getRootView: function () {
                        return name(config);
                    },
                };
            }
        }
        this.paint();
        return this._ui;
    };
    Popup.prototype.attachHTML = function (html) {
        this._html = html;
        this.paint();
    };
    Popup.prototype.getWidget = function () {
        return this._ui;
    };
    Popup.prototype.getContainer = function () {
        return this.getRootView().refs.content.el;
    };
    Popup.prototype.toVDOM = function () {
        var view;
        if (this._html) {
            view = dom_1.el(".dhx_popup__inner-html-content", {
                ".innerHTML": this._html,
            });
        }
        else {
            view = this._ui ? this._ui.getRootView() : null;
            if (view && view.render) {
                view = dom_1.inject(view);
            }
        }
        return dom_1.el("div", {
            class: "dhx_popup-content",
            onclick: this._clickEvent,
            _key: this._uid,
            _ref: "content",
        }, [view]);
    };
    Popup.prototype.destructor = function () {
        this.hide();
        if (this._outerClickDestructor) {
            this._outerClickDestructor();
        }
        this._popup = null;
    };
    Popup.prototype._setPopupSize = function (node, config, calls) {
        var _this = this;
        if (calls === void 0) { calls = 3; }
        var _a = this._popup.getBoundingClientRect(), width = _a.width, height = _a.height;
        // TODO: IE popup height = 0
        if (this._timeout) {
            clearTimeout(this._timeout);
            this._timeout = null;
        }
        if (calls && (width === 0 || height === 0)) {
            this._timeout = setTimeout(function () {
                if (!_this._isActive) {
                    return;
                }
                _this._setPopupSize(node, config, calls - 1);
                _this._timeout = null;
            });
            return;
        }
        var _b = html_1.fitPosition(node, __assign(__assign({ centering: true, mode: "bottom" }, config), { width: width,
            height: height })), left = _b.left, top = _b.top;
        this._popup.style.left = left;
        this._popup.style.top = top;
        if (config.indent && config.indent !== 0) {
            switch (config.mode) {
                case "top":
                    this._popup.style.top =
                        parseInt(this._popup.style.top.slice(0, -2), null) -
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
                case "bottom":
                    this._popup.style.top =
                        parseInt(this._popup.style.top.slice(0, -2), null) +
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
                case "left":
                    this._popup.style.left =
                        parseInt(this._popup.style.left.slice(0, -2), null) -
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
                case "right":
                    this._popup.style.left =
                        parseInt(this._popup.style.left.slice(0, -2), null) +
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
                default:
                    this._popup.style.top =
                        parseInt(this._popup.style.top.slice(0, -2), null) +
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
            }
        }
    };
    Popup.prototype._detectOuterClick = function (node) {
        var _this = this;
        var outerClick = function (e) {
            var target = e.target;
            while (target) {
                if (target === node || target === _this._popup) {
                    return;
                }
                target = target.parentNode;
            }
            if (_this._hide(true, e)) {
                document.removeEventListener("click", outerClick);
            }
        };
        document.addEventListener("click", outerClick);
        return function () { return document.removeEventListener("click", outerClick); };
    };
    Popup.prototype._hide = function (fromOuterClick, e) {
        if (this._isActive) {
            if (!this.events.fire(types_1.PopupEvents.beforeHide, [fromOuterClick, e])) {
                return false;
            }
            document.body.removeChild(this._popup);
            this._isActive = false;
            if (this._outerClickDestructor) {
                this._outerClickDestructor();
                this._outerClickDestructor = null;
            }
            this.events.fire(types_1.PopupEvents.afterHide, [e]);
            return true;
        }
    };
    return Popup;
}(view_1.View));
exports.Popup = Popup;


/***/ }),

/***/ "../ts-popup/sources/types.ts":
/*!************************************!*\
  !*** ../ts-popup/sources/types.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PopupEvents;
(function (PopupEvents) {
    PopupEvents["beforeHide"] = "beforeHide";
    PopupEvents["beforeShow"] = "beforeShow";
    PopupEvents["afterHide"] = "afterHide";
    PopupEvents["afterShow"] = "afterShow";
    PopupEvents["click"] = "click";
})(PopupEvents = exports.PopupEvents || (exports.PopupEvents = {}));


/***/ }),

/***/ "../ts-ribbon/index.ts":
/*!*****************************!*\
  !*** ../ts-ribbon/index.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Ribbon */ "../ts-ribbon/sources/Ribbon.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-ribbon/sources/types.ts"));


/***/ }),

/***/ "../ts-ribbon/sources/Ribbon.ts":
/*!**************************************!*\
  !*** ../ts-ribbon/sources/Ribbon.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var ts_navbar_1 = __webpack_require__(/*! @dhx/ts-navbar */ "../ts-navbar/index.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var ts_message_1 = __webpack_require__(/*! @dhx/ts-message */ "../ts-message/index.ts");
var Ribbon = /** @class */ (function (_super) {
    __extends(Ribbon, _super);
    function Ribbon(element, config) {
        var _this = _super.call(this, element, core_1.extend({
            navigationType: "click",
        }, config)) || this;
        _this._listeners = {
            input: function (e) {
                var id = html_1.locate(e);
                _this.data.update(id, { value: e.target.value });
            },
            tooltip: function (e) {
                var elem = html_1.locateNode(e);
                if (!elem) {
                    return;
                }
                var id = elem.getAttribute("dhx_id");
                var item = _this.data.getItem(id);
                if (item.tooltip) {
                    ts_message_1.tooltip(item.tooltip, {
                        node: elem,
                        position: ts_message_1.Position.bottom,
                    });
                }
            },
        };
        _this._currentRoot = null;
        var render = function () { return _this._draw(); };
        _this.mount(element, dom_1.create({ render: render }));
        return _this;
    }
    Ribbon.prototype.getState = function () {
        var state = {};
        this.data.eachChild(this.data.getRoot(), function (item) {
            if (item.twoState && !item.group) {
                state[item.id] = item.active;
            }
            else if (item.type === "input" || item.type === "selectButton") {
                state[item.id] = item.value;
            }
        }, true);
        for (var key in this._groups) {
            if (this._groups[key].active) {
                state[key] = this._groups[key].active;
            }
        }
        return state;
    };
    Ribbon.prototype.setState = function (state) {
        for (var key in state) {
            if (this._groups && this._groups[key]) {
                if (this._groups[key].active) {
                    this.data.update(this._groups[key].active, { active: false });
                    this._groups[key].active = state[key];
                    this.data.update(state[key], { active: true });
                }
            }
            else {
                var item = this.data.getItem(key);
                if (item.type === "input" || item.type === "selectButton") {
                    this.data.update(key, { value: state[key] });
                }
                else {
                    this.data.update(key, { active: state[key] });
                }
            }
        }
    };
    Ribbon.prototype._getFactory = function () {
        return ts_navbar_1.createFactory({
            widget: this,
            defaultType: "navItem",
            allowedTypes: [
                "navItem",
                "button",
                "customHTMLButton",
                "customHTML",
                "imageButton",
                "input",
                "selectButton",
                "separator",
                "spacer",
                "title",
            ],
            widgetName: "ribbon",
        });
    };
    Ribbon.prototype._getMode = function (item, root) {
        return item.id === root ? "bottom" : "right";
    };
    Ribbon.prototype._close = function (e) {
        this._activePosition = null;
        this._currentRoot = null;
        _super.prototype._close.call(this, e);
    };
    Ribbon.prototype._draw = function () {
        var _this = this;
        return dom_1.el("ul.dhx_ribbon.dhx_widget", {
            dhx_widget_id: this._uid,
            class: this.config.css ? this.config.css : "",
            tabindex: 0,
            onclick: this._handlers.onclick,
            onmousedown: this._handlers.onmousedown,
            oninput: this._listeners.input,
            onmouseover: this._listeners.tooltip,
            _hooks: {
                didInsert: function (node) {
                    node.el.addEventListener("keyup", function (e) {
                        if (e.which !== 9) {
                            return;
                        }
                        var elem = html_1.locateNode(document.activeElement);
                        if (!elem) {
                            return;
                        }
                        var id = elem.getAttribute("dhx_id");
                        var item = _this.data.getItem(id);
                        if (item.tooltip) {
                            ts_message_1.tooltip(item.tooltip, {
                                node: elem,
                                position: ts_message_1.Position.bottom,
                                force: true,
                            });
                        }
                    }, true);
                },
            },
        }, [
            dom_1.el("li", {
                class: "dhx_ribbon-block dhx_ribbon-block--root",
            }, [
                dom_1.el("ul.dhx_ribbon-content.dhx_ribbon-content--full-width", this.data.map(function (block) {
                    return block.type === "block"
                        ? _this._drawBlock(block, true)
                        : _this._factory(block);
                }, this.data.getRoot(), false)),
            ]),
        ]);
    };
    Ribbon.prototype._setRoot = function (id) {
        var parentId = this.data.getParent(id);
        if (this.data.getItem(parentId).type === "block") {
            this._currentRoot = id;
        }
    };
    Ribbon.prototype._drawBlock = function (block, isFirst) {
        var _this = this;
        if (!block || block.hidden) {
            return null;
        }
        var classNames = "dhx_ribbon-block" +
            (" dhx_ribbon-block" + (block.direction === "col" ? "--col" : "--row")) +
            (block.title ? " dhx_ribbon-block--title" : "") +
            (block.css ? " " + block.css : "") +
            (isFirst ? " dhx_ribbon-block--indented" : "");
        var childs = this.data.map(function (child) {
            if (child.type === "block") {
                return _this._drawBlock(child);
            }
            if (child.type !== "separator" && child.type !== "spacer") {
                return _this._factory(child);
            }
            return null;
        }, block.id, false);
        return dom_1.el("li", {
            class: classNames,
        }, [
            dom_1.el("ul.dhx_ribbon-content", childs),
            block.title
                ? dom_1.el("span.dhx_ribbon-content-label-wrapper", [
                    dom_1.el("span.dhx_ribbon-content-label", block.title),
                ])
                : null,
        ]);
    };
    return Ribbon;
}(ts_navbar_1.Navbar));
exports.Ribbon = Ribbon;


/***/ }),

/***/ "../ts-ribbon/sources/types.ts":
/*!*************************************!*\
  !*** ../ts-ribbon/sources/types.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ts_navbar_1 = __webpack_require__(/*! @dhx/ts-navbar */ "../ts-navbar/index.ts");
exports.NavigationBarEvents = ts_navbar_1.NavigationBarEvents;


/***/ }),

/***/ "../ts-sidebar/index.ts":
/*!******************************!*\
  !*** ../ts-sidebar/index.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Sidebar */ "../ts-sidebar/sources/Sidebar.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-sidebar/sources/types.ts"));


/***/ }),

/***/ "../ts-sidebar/sources/Sidebar.ts":
/*!****************************************!*\
  !*** ../ts-sidebar/sources/Sidebar.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-sidebar/sources/types.ts");
var ts_message_1 = __webpack_require__(/*! @dhx/ts-message */ "../ts-message/index.ts");
var ts_navbar_1 = __webpack_require__(/*! @dhx/ts-navbar */ "../ts-navbar/index.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var Sidebar = /** @class */ (function (_super) {
    __extends(Sidebar, _super);
    function Sidebar(element, config) {
        var _this = _super.call(this, element, core_1.extend({
            navigationType: "click",
            width: "200",
            minWidth: "44",
            collapsed: false,
        }, config)) || this;
        _this._currentRoot = null;
        var render = function () { return _this._draw(); };
        _this.mount(element, dom_1.create({ render: render }));
        return _this;
    }
    Sidebar.prototype.toggle = function () {
        if (this.config.collapsed) {
            this.expand();
        }
        else {
            this.collapse();
        }
        this.events.fire(types_1.SidebarEvents.toggle, [this.config.collapsed]); // TODO: remove suite_7.0
        this.paint();
    };
    Sidebar.prototype.collapse = function () {
        if (!this.events.fire(types_1.SidebarEvents.beforeCollapse, [])) {
            return;
        }
        this.config.collapsed = true;
        this.events.fire(types_1.SidebarEvents.afterCollapse, []);
        this.paint();
    };
    Sidebar.prototype.expand = function () {
        if (!this.events.fire(types_1.SidebarEvents.beforeExpand, [])) {
            return;
        }
        this.config.collapsed = false;
        this.events.fire(types_1.SidebarEvents.afterExpand, []);
        this.paint();
    };
    Sidebar.prototype.isCollapsed = function () {
        return this.config.collapsed;
    };
    Sidebar.prototype._getFactory = function () {
        return ts_navbar_1.createFactory({
            widget: this,
            defaultType: "navItem",
            allowedTypes: [
                "navItem",
                "menuItem",
                "customHTMLButton",
                "customHTML",
                "separator",
                "spacer",
                "title",
            ],
            widgetName: "sidebar",
        });
    };
    Sidebar.prototype._close = function (e) {
        this._activePosition = null;
        this._currentRoot = null;
        _super.prototype._close.call(this, e);
    };
    Sidebar.prototype._setRoot = function (id) {
        if (this.data.getParent(id) === this.data.getRoot()) {
            this._currentRoot = id;
        }
    };
    Sidebar.prototype._customHandlers = function () {
        var _this = this;
        return {
            tooltip: function (e) {
                var elem = html_1.locateNode(e);
                if (!elem) {
                    return;
                }
                var id = elem.getAttribute("dhx_id");
                var item = _this.data.getItem(id);
                if (item.tooltip || (_this.config.collapsed && item.value)) {
                    ts_message_1.tooltip(item.tooltip || item.value, {
                        node: elem,
                        position: ts_message_1.Position.right,
                    });
                }
            },
        };
    };
    Sidebar.prototype._draw = function () {
        var _this = this;
        var _a = this.config, width = _a.width, minWidth = _a.minWidth;
        var actualWidth = this.config.collapsed ? minWidth : width;
        return dom_1.el("nav.dhx_widget.dhx_sidebar", {
            class: (this.config.css ? this.config.css : "") +
                (this.config.collapsed ? " dhx_sidebar--minimized" : ""),
            style: { width: actualWidth + "px" },
        }, [
            dom_1.el("ul.dhx_navbar.dhx_navbar--vertical", {
                dhx_widget_id: this._uid,
                tabindex: 0,
                onclick: this._handlers.onclick,
                onmousedown: this._handlers.onmousedown,
                oninput: this._handlers.input,
                onmouseover: this._handlers.tooltip,
                _hooks: {
                    didInsert: function (node) {
                        node.el.addEventListener("keyup", function (e) {
                            if (e.which !== 9) {
                                return;
                            }
                            var elem = html_1.locateNode(document.activeElement);
                            if (!elem) {
                                return;
                            }
                            var id = elem.getAttribute("dhx_id");
                            var item = _this.data.getItem(id);
                            if (item.tooltip || (_this.config.collapsed && item.value)) {
                                ts_message_1.tooltip(item.tooltip || item.value, {
                                    node: elem,
                                    position: ts_message_1.Position.right,
                                    force: true,
                                });
                            }
                        }, true);
                    },
                },
            }, this.data.map(function (item) { return _this._factory(item); }, this.data.getRoot(), false)),
        ]);
    };
    Sidebar.prototype._getMode = function () {
        return "right";
    };
    Sidebar.prototype._customInitEvents = function () {
        var _this = this;
        this.events.on(ts_navbar_1.NavigationBarEvents.inputBlur, function () {
            if (_this._waitRestore) {
                _this.toggle();
                _this._waitRestore = false;
            }
        });
        this.events.on(ts_navbar_1.NavigationBarEvents.inputFocus, function () {
            if (_this.config.collapsed) {
                _this._waitRestore = true;
                _this.toggle();
            }
        });
    };
    return Sidebar;
}(ts_navbar_1.Navbar));
exports.Sidebar = Sidebar;


/***/ }),

/***/ "../ts-sidebar/sources/types.ts":
/*!**************************************!*\
  !*** ../ts-sidebar/sources/types.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SidebarEvents;
(function (SidebarEvents) {
    SidebarEvents["beforeCollapse"] = "beforeCollapse";
    SidebarEvents["afterCollapse"] = "afterCollapse";
    SidebarEvents["beforeExpand"] = "beforeExpand";
    SidebarEvents["afterExpand"] = "afterExpand";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    SidebarEvents["toggle"] = "toggle";
})(SidebarEvents = exports.SidebarEvents || (exports.SidebarEvents = {}));


/***/ }),

/***/ "../ts-slider/index.ts":
/*!*****************************!*\
  !*** ../ts-slider/index.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Slider */ "../ts-slider/sources/Slider.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-slider/sources/types.ts"));


/***/ }),

/***/ "../ts-slider/sources/Slider.ts":
/*!**************************************!*\
  !*** ../ts-slider/sources/Slider.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var Keymanager_1 = __webpack_require__(/*! @dhx/ts-common/Keymanager */ "../ts-common/Keymanager.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_popup_1 = __webpack_require__(/*! @dhx/ts-popup */ "../ts-popup/index.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-slider/sources/types.ts");
function normalizeValue(value, min, max) {
    if (value < min) {
        return min;
    }
    if (value > max) {
        return max;
    }
    return value;
}
function parseValue(value, min, max) {
    var values;
    if (value === undefined) {
        values = [];
    }
    else if (Array.isArray(value)) {
        values = value;
    }
    else if (typeof value === "string") {
        values = value.split(",").map(function (v) { return parseInt(v, 10); });
    }
    else {
        values = [value];
    }
    values[0] = values[0] === undefined ? min : normalizeValue(values[0], min, max);
    values[1] = values[1] === undefined ? max : normalizeValue(values[1], min, max);
    return values;
}
var Slider = /** @class */ (function (_super) {
    __extends(Slider, _super);
    function Slider(container, config) {
        var _this = _super.call(this, container, core_1.extend({
            mode: "horizontal",
            min: 0,
            max: 100,
            step: 1,
            tooltip: true,
        }, config)) || this;
        _this._disabled = false;
        _this.config.helpMessage = _this.config.helpMessage || _this.config.help; // TODO: remove suite_7.0
        if (_this.config.thumbLabel !== undefined) {
            _this.config.tooltip = _this.config.thumbLabel; // TODO: remove suite_7.0
        }
        if (_this.config.labelInline) {
            _this.config.labelPosition = "left"; // TODO: remove suite_7.0
        }
        _this.events = new events_1.EventSystem(_this);
        _this._axis = _this.config.mode === "horizontal" ? "clientX" : "clientY";
        _this._initStartPosition();
        _this._initHotkeys();
        var vNode = dom_1.create({
            render: function () { return _this._draw(); },
            hooks: {
                didMount: function () { return _this._calcSliderPosition(); },
                didRedraw: function () { return _this._calcSliderPosition(); },
            },
        });
        _this._initHandlers();
        _this.mount(container, vNode);
        return _this;
    }
    Slider.prototype.disable = function () {
        this._disabled = true;
        this.paint();
    };
    Slider.prototype.enable = function () {
        this._disabled = false;
        this.paint();
    };
    Slider.prototype.isDisabled = function () {
        return this._disabled;
    };
    Slider.prototype.focus = function (extra) {
        this.getRootView().refs[extra ? "extraRunner" : "runner"].el.focus();
    };
    Slider.prototype.getValue = function () {
        var res;
        if (this.config.range) {
            var a = this._getValue(this._currentPosition);
            var b = this._getValue(this._extraCurrentPosition);
            res = a < b ? [a, b] : [b, a];
        }
        else {
            res = [this._getValue(this._currentPosition)];
        }
        return res;
    };
    Slider.prototype.setValue = function (value) {
        var old = this._getValue(this._currentPosition);
        if (Array.isArray(value) && value.length > 1) {
            var oldExtra = this._getValue(this._extraCurrentPosition);
            this._setValue(value[0], false);
            this.events.fire(types_1.SliderEvents.change, [value[0], old, false]);
            this._setValue(value[1], true);
            this.events.fire(types_1.SliderEvents.change, [value[1], oldExtra, true]);
        }
        else {
            value = parseFloat(value);
            if (!isNaN(value)) {
                this._setValue(value);
                this.events.fire(types_1.SliderEvents.change, [value, old, false]);
            }
            else {
                throw new Error("Wrong value type, for more info check documentation https://docs.dhtmlx.com/suite/slider__api__slider_setvalue_method.html");
            }
        }
        this.paint();
    };
    Slider.prototype.destructor = function () {
        this._hotkeysDestructor();
        this.unmount();
    };
    Slider.prototype._calcSliderPosition = function () {
        var root = this.getRootView();
        if (!root) {
            return;
        }
        var tracker = root.refs.track.el;
        var rect = tracker.getBoundingClientRect();
        this._offsets = {
            left: rect.left + window.pageXOffset,
            top: rect.top + window.pageYOffset,
        };
        this._length = this.config.mode === "horizontal" ? rect.width : rect.height;
    };
    Slider.prototype._initHotkeys = function () {
        var _this = this;
        var isRunnersInFocus = function () {
            var activeEl = document.activeElement;
            var refs = _this.getRootView().refs;
            if (!refs) {
                return false;
            }
            var runner = refs.runner;
            if (runner && runner.el === activeEl) {
                return true;
            }
            if (_this.config.range && refs.extraRunner && refs.extraRunner.el === activeEl) {
                return true;
            }
            return false;
        };
        this._hotkeysDestructor = Keymanager_1.addHotkeys({
            arrowleft: function (e) {
                if (_this.config.mode === "vertical") {
                    return;
                }
                e.preventDefault();
                _this._move(-_this.config.step, e.target.classList.contains("dhx_slider__thumb--extra"));
            },
            arrowright: function (e) {
                if (_this.config.mode === "vertical") {
                    return;
                }
                e.preventDefault();
                _this._move(_this.config.step, e.target.classList.contains("dhx_slider__thumb--extra"));
            },
            arrowup: function (e) {
                if (_this.config.mode === "horizontal") {
                    return;
                }
                e.preventDefault();
                _this._move(_this.config.step, e.target.classList.contains("dhx_slider__thumb--extra"));
            },
            arrowdown: function (e) {
                if (_this.config.mode === "horizontal") {
                    return;
                }
                e.preventDefault();
                _this._move(-_this.config.step, e.target.classList.contains("dhx_slider__thumb--extra"));
            },
        }, isRunnersInFocus);
    };
    Slider.prototype._move = function (value, forExtra) {
        if (this.config.inverse) {
            value = -value;
        }
        var _a = this.config, max = _a.max, min = _a.min;
        var oldValue = forExtra
            ? this._getValue(this._extraCurrentPosition)
            : this._getValue(this._currentPosition);
        var newValue = oldValue + value;
        this._setValue(oldValue + value, forExtra);
        if (newValue > max || newValue < min) {
            newValue = oldValue;
        }
        this.events.fire(types_1.SliderEvents.change, [newValue, oldValue, forExtra]);
        this.paint();
    };
    Slider.prototype._initStartPosition = function () {
        var _a = this.config, max = _a.max, min = _a.min, range = _a.range;
        var _b = parseValue(this.config.value, this.config.min, this.config.max), value = _b[0], extraValue = _b[1];
        this._currentPosition = ((value - min) / (max - min)) * 100;
        if (range) {
            this._extraCurrentPosition = ((max - extraValue) / (max - min)) * 100;
        }
        this._currentPosition = ((value - min) / (max - min)) * 100;
        if (range) {
            this._extraCurrentPosition = ((extraValue - min) / (max - min)) * 100;
        }
        if (this._isInverse()) {
            this._currentPosition = 100 - this._currentPosition;
            if (range) {
                this._extraCurrentPosition = 100 - this._extraCurrentPosition;
            }
        }
    };
    Slider.prototype._getValue = function (value) {
        if (this._isInverse()) {
            value = 100 - value;
        }
        var _a = this.config, min = _a.min, max = _a.max, step = _a.step;
        if (value === 100) {
            return max;
        }
        if (value === 0) {
            return min;
        }
        var val = (value * (max - min)) / 100;
        var remain = val % step;
        var rounder = remain >= step / 2 ? step : 0;
        var result = Number(min) + Number(val) - remain + rounder;
        return +result.toFixed(5);
    };
    Slider.prototype._setValue = function (val, forExtra) {
        if (forExtra === void 0) { forExtra = false; }
        var _a = this.config, max = _a.max, min = _a.min;
        if (val > max || val < min) {
            return false;
        }
        var rawValue = ((val - min) / (max - min)) * 100;
        var newValue = this._isInverse() ? 100 - rawValue : rawValue;
        if (forExtra) {
            this._extraCurrentPosition = newValue;
        }
        else {
            this._currentPosition = newValue;
        }
    };
    Slider.prototype._initHandlers = function () {
        var _this = this;
        var sliderMove = function (e) {
            !e.targetTouches && e.preventDefault();
            var currentPosition = e.targetTouches ? e.targetTouches[0][_this._axis] : e[_this._axis];
            var x = ((currentPosition - _this._getBegining()) / _this._length) * 100;
            if (_this._findNewDirection) {
                if (Math.abs(_this._currentPosition - x) < 1) {
                    return;
                }
                if (x > _this._currentPosition) {
                    _this._possibleRange = [_this._currentPosition, 100];
                }
                else {
                    _this._possibleRange = [0, _this._currentPosition];
                }
                _this._findNewDirection = null;
            }
            if (_this._inSide(x)) {
                _this._updatePosition(x, _this._isExtraActive);
            }
            _this.paint();
        };
        var sliderEnd = function (e) {
            _this.events.fire(types_1.SliderEvents.mouseup, [e]);
            setTimeout(function () {
                _this._isMouseMoving = false;
                _this.paint();
            }, 4);
            if (!e.targetTouches) {
                document.removeEventListener("mouseup", sliderEnd);
                document.removeEventListener("mousemove", sliderMove);
            }
            else {
                document.removeEventListener("touchend", sliderEnd);
                document.removeEventListener("touchmove", sliderMove);
            }
        };
        var sliderStart = function (e) {
            if (_this._disabled || e.which === 3) {
                return;
            }
            _this.events.fire(types_1.SliderEvents.mousedown, [e]);
            _this._isMouseMoving = true;
            var active;
            if (e.target.classList.contains("dhx_slider__thumb--extra")) {
                _this._isExtraActive = true;
                active = _this._extraCurrentPosition;
            }
            else {
                _this._isExtraActive = false;
                active = _this._currentPosition;
            }
            _this._findNewDirection = null;
            // define possible range
            if (_this.config.range) {
                var _a = _this._currentPosition > _this._extraCurrentPosition
                    ? [_this._currentPosition, _this._extraCurrentPosition]
                    : [_this._extraCurrentPosition, _this._currentPosition], more = _a[0], less = _a[1];
                if (_this._currentPosition === _this._extraCurrentPosition) {
                    _this._findNewDirection = active;
                    _this._possibleRange = [0, 100];
                }
                else if (active < more) {
                    _this._possibleRange = [0, more];
                }
                else {
                    _this._possibleRange = [less, 100];
                }
            }
            else {
                _this._possibleRange = [0, 100];
            }
        };
        if (this.config.helpMessage) {
            this._helper = new ts_popup_1.Popup({
                css: "dhx_tooltip dhx_tooltip--forced dhx_tooltip--light",
            });
            this._helper.attachHTML(this.config.helpMessage);
        }
        this._handlers = {
            showHelper: function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this._helper.show(e.target);
            },
            onmousedown: function (e) {
                sliderStart(e);
                document.addEventListener("mousemove", sliderMove);
                document.addEventListener("mouseup", sliderEnd);
            },
            ontouchstart: function (e) {
                sliderStart(e);
                document.addEventListener("touchmove", sliderMove);
                document.addEventListener("touchend", sliderEnd);
            },
            onlabelClick: function () {
                var refs = _this.getRootView().refs;
                refs.runner.el.focus();
            },
            onclick: function (e) {
                if (_this._disabled || _this._isMouseMoving || e.which === 3) {
                    return;
                }
                var x = ((e[_this._axis] - _this._getBegining()) / _this._length) * 100;
                var refs = _this.getRootView().refs;
                if (_this.config.range) {
                    var dist = Math.abs(_this._currentPosition - x);
                    var extraDist = Math.abs(_this._extraCurrentPosition - x);
                    if (dist < extraDist) {
                        _this._updatePosition(x, false);
                        refs.runner.el.focus();
                    }
                    else {
                        _this._updatePosition(x, true);
                        refs.extraRunner.el.focus();
                    }
                }
                else {
                    _this._updatePosition(x, false);
                    refs.runner.el.focus();
                }
                _this.paint();
            },
            onmouseover: function () {
                _this._mouseIn = true;
                _this.paint();
            },
            onmouseout: function () {
                _this._mouseIn = false;
                _this.paint();
            },
            onfocus: function () {
                _this._focusIn = true;
                _this.paint();
            },
            onblur: function () {
                _this._focusIn = false;
                _this.paint();
            },
        };
    };
    Slider.prototype._getBegining = function () {
        return this.config.mode === "horizontal"
            ? this._offsets.left - window.pageXOffset
            : this._offsets.top - window.pageYOffset;
    };
    Slider.prototype._inSide = function (x) {
        var range = this._possibleRange;
        if (x < range[0]) {
            this._updatePosition(range[0], this._isExtraActive);
            return false;
        }
        if (x > range[1]) {
            this._updatePosition(range[1], this._isExtraActive);
            return false;
        }
        return true;
    };
    Slider.prototype._updatePosition = function (x, extra) {
        if (extra === void 0) { extra = false; }
        if (x > 100) {
            x = 100;
        }
        if (x < 0) {
            x = 0;
        }
        var _a = this.config, max = _a.max, min = _a.min;
        var position = extra ? this._extraCurrentPosition : this._currentPosition;
        var oldValue = this._getValue(position);
        var newValue = this._getValue(x);
        if (oldValue === newValue) {
            return;
        }
        var rawValue = ((newValue - min) / (max - min)) * 100;
        var value = this._isInverse() ? 100 - rawValue : rawValue;
        if (extra) {
            this._extraCurrentPosition = value;
        }
        else {
            this._currentPosition = value;
        }
        this.events.fire(types_1.SliderEvents.change, [newValue, oldValue, extra]);
    };
    Slider.prototype._getRunnerStyle = function (forExtra) {
        var _a;
        if (forExtra === void 0) { forExtra = false; }
        var direction = this.config.mode === "horizontal" ? "left" : "top";
        var pos = forExtra ? this._extraCurrentPosition : this._currentPosition;
        return _a = {},
            _a[direction] = pos + "%",
            _a;
    };
    Slider.prototype._isInverse = function () {
        return ((this.config.inverse && this.config.mode === "horizontal") ||
            (!this.config.inverse && this.config.mode === "vertical"));
    };
    Slider.prototype._getRunnerCss = function (forExtra) {
        if (forExtra === void 0) { forExtra = false; }
        return ("dhx_slider__thumb" +
            (forExtra ? " dhx_slider__thumb--extra" : "") +
            (this._isMouseMoving && ((forExtra && this._isExtraActive) || (!forExtra && !this._isExtraActive))
                ? " dhx_slider__thumb--active"
                : "") +
            (this._disabled ? " dhx_slider__thumb--disabled" : "") +
            (this._isNullable(forExtra ? this._extraCurrentPosition : this._currentPosition) &&
                !this.config.range
                ? " dhx_slider__thumb--nullable"
                : ""));
    };
    Slider.prototype._draw = function () {
        var _a = this.config, labelPosition = _a.labelPosition, labelWidth = _a.labelWidth, mode = _a.mode, label = _a.label, hiddenLabel = _a.hiddenLabel, tick = _a.tick, majorTick = _a.majorTick, css = _a.css, helpMessage = _a.helpMessage;
        var width = labelPosition === "left" && labelWidth ? labelWidth : "";
        return dom_1.el("div", {
            class: "dhx_slider" +
                " dhx_slider--mode_" +
                mode +
                (label && labelPosition === "left" ? " dhx_slider--label-inline" : "") +
                (hiddenLabel ? " dhx_slider--label_sr" : "") +
                (tick ? " dhx_slider--ticks" : "") +
                (majorTick ? " dhx_slider--major-ticks" : "") +
                (css ? " " + css : "") +
                (this._disabled ? " dhx_slider--disabled" : ""),
        }, [
            label
                ? dom_1.el("label.dhx_label.dhx_slider__label", {
                    style: { minWidth: width, maxWidth: width },
                    class: helpMessage ? "dhx_label--with-help" : "",
                    onclick: this._handlers.onlabelClick,
                }, helpMessage
                    ? [
                        dom_1.el("span.dhx_label__holder", label),
                        dom_1.el("span.dhx_label-help.dxi.dxi-help-circle-outline", {
                            tabindex: "0",
                            role: "button",
                            onclick: this._handlers.showHelper,
                        }),
                    ]
                    : label)
                : null,
            this._drawSlider(),
        ]);
    };
    Slider.prototype._drawSlider = function () {
        return dom_1.el(".dhx_widget.dhx_slider__track-holder", 
        // (this.config.mode === Direction.vertical ? ".dhx_slider--vertical" : ".dhx_slider--horizontal"),
        {
            dhx_widget_id: this._uid,
        }, [
            dom_1.el(".dhx_slider__track", {
                _ref: "track",
                onmouseover: this._handlers.onmouseover,
                onmouseout: this._handlers.onmouseout,
                onclick: this._handlers.onclick,
            }, [
                this._getDetector(),
                dom_1.el("div", {
                    _ref: "runner",
                    class: this._getRunnerCss(),
                    ontouchstart: this._handlers.ontouchstart,
                    onmousedown: this._handlers.onmousedown,
                    onfocus: this._handlers.onfocus,
                    onblur: this._handlers.onblur,
                    style: this._getRunnerStyle(),
                    tabindex: 0,
                }),
                this.config.tooltip && (this._mouseIn || this._focusIn || this._isMouseMoving)
                    ? this._drawTooltip()
                    : null,
                this.config.tooltip &&
                    this.config.range &&
                    (this._mouseIn || this._focusIn || this._isMouseMoving)
                    ? this._drawTooltip(true)
                    : null,
                this.config.range
                    ? dom_1.el("div", {
                        _ref: "extraRunner",
                        class: this._getRunnerCss(true),
                        ontouchstart: this._handlers.ontouchstart,
                        onmousedown: this._handlers.onmousedown,
                        onfocus: this._handlers.onfocus,
                        onblur: this._handlers.onblur,
                        style: this._getRunnerStyle(true),
                        tabindex: 0,
                    })
                    : null,
            ]),
            this.config.tick ? this._drawTicks() : null,
        ]);
    };
    Slider.prototype._getDetector = function () {
        var _a, _b, _c;
        if (this._disabled) {
            return dom_1.el(".dhx_slider__range");
        }
        var direction = this.config.mode === "horizontal" ? "left" : "top";
        var size = this.config.mode === "horizontal" ? "width" : "height";
        if (this.config.range) {
            var _d = this._currentPosition > this._extraCurrentPosition
                ? [this._currentPosition, this._extraCurrentPosition]
                : [this._extraCurrentPosition, this._currentPosition], more = _d[0], less = _d[1];
            return dom_1.el(".dhx_slider__range", {
                style: (_a = {},
                    _a[direction] = less + "%",
                    _a[size] = more - less + "%",
                    _a),
            });
        }
        if (this._isInverse()) {
            return dom_1.el(".dhx_slider__range", {
                style: (_b = {},
                    _b[direction] = this._currentPosition + "%",
                    _b[size] = 100 - this._currentPosition + "%",
                    _b),
            });
        }
        return dom_1.el(".dhx_slider__range", {
            style: (_c = {},
                _c[direction] = 0,
                _c[size] = this._currentPosition + "%",
                _c),
        });
    };
    Slider.prototype._drawTooltip = function (forExtra) {
        var _a;
        if (forExtra === void 0) { forExtra = false; }
        var pos = forExtra ? this._extraCurrentPosition : this._currentPosition;
        var direction = this.config.mode === "horizontal" ? "left" : "top";
        var classNameModifiers = this.config.mode === "horizontal"
            ? ".dhx_slider__thumb-label--horizontal"
            : ".dhx_slider__thumb-label--vertical";
        if ((forExtra && this._isExtraActive) || (!forExtra && !this._isExtraActive)) {
            classNameModifiers += ".dhx_slider__thumb-label--active";
        }
        var style = (_a = {},
            _a[direction] = pos + "%",
            _a);
        return dom_1.el(".dhx_slider__thumb-label" + classNameModifiers, {
            style: style,
        }, this._getValue(pos));
    };
    Slider.prototype._getTicks = function () {
        var _a = this.config, max = _a.max, min = _a.min, step = _a.step, tick = _a.tick, majorTick = _a.majorTick;
        var len = max - min;
        var tickLength = (step * tick) / len;
        var positions = [];
        var length = 0;
        var index = 0;
        while (length < 1) {
            var tickValue = +(Number(min) + length * len).toFixed(5);
            var isMultiple = index % majorTick === 0;
            positions.push({
                position: (this._isInverse() ? (1 - length) * 100 : length * 100) + "%",
                isMultiple: isMultiple,
                label: isMultiple && typeof this.config.tickTemplate === "function"
                    ? this.config.tickTemplate(tickValue)
                    : null,
            });
            length += tickLength;
            index++;
        }
        positions.push({
            position: (this._isInverse() ? 0 : 100) + "%",
            isMultiple: true,
            label: typeof this.config.tickTemplate === "function" ? this.config.tickTemplate(max) : null,
        });
        return positions;
    };
    Slider.prototype._drawTicks = function () {
        var direction = this.config.mode === "horizontal" ? "left" : "top";
        return dom_1.el(".dhx_slider__ticks-holder", this._getTicks().map(function (tick) {
            var _a;
            return dom_1.el("div", {
                class: "dhx_slider__tick" + (tick.isMultiple ? " dhx_slider__tick--major" : ""),
                style: (_a = {},
                    _a[direction] = tick.position,
                    _a),
            }, tick.label !== undefined ? [dom_1.el(".dhx_slider__tick-label", tick.label)] : null);
        }));
    };
    Slider.prototype._isNullable = function (value) {
        if (this._isInverse()) {
            return value === 100;
        }
        else {
            return value === 0;
        }
    };
    return Slider;
}(view_1.View));
exports.Slider = Slider;


/***/ }),

/***/ "../ts-slider/sources/types.ts":
/*!*************************************!*\
  !*** ../ts-slider/sources/types.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SliderEvents;
(function (SliderEvents) {
    SliderEvents["change"] = "change";
    SliderEvents["mousedown"] = "mousedown";
    SliderEvents["mouseup"] = "mouseup";
})(SliderEvents = exports.SliderEvents || (exports.SliderEvents = {}));


/***/ }),

/***/ "../ts-tabbar/index.ts":
/*!*****************************!*\
  !*** ../ts-tabbar/index.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Tabbar */ "../ts-tabbar/sources/Tabbar.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-tabbar/sources/types.ts"));


/***/ }),

/***/ "../ts-tabbar/sources/Tabbar.ts":
/*!**************************************!*\
  !*** ../ts-tabbar/sources/Tabbar.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var Keymanager_1 = __webpack_require__(/*! @dhx/ts-common/Keymanager */ "../ts-common/Keymanager.ts");
var CssManager_1 = __webpack_require__(/*! @dhx/ts-common/CssManager */ "../ts-common/CssManager.ts");
var ts_layout_1 = __webpack_require__(/*! @dhx/ts-layout */ "../ts-layout/index.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-tabbar/sources/types.ts");
var Tabbar = /** @class */ (function (_super) {
    __extends(Tabbar, _super);
    function Tabbar(container, config) {
        var _this = _super.call(this, container, core_1.extend({ mode: "top" }, config)) || this;
        _this._cssManager = new CssManager_1.CssManager();
        if (_this.config.disabled) {
            var disabled = _this.config.disabled;
            var exsistId_1 = _this._cells.map(function (tab) {
                return tab.id;
            });
            if (Array.isArray(disabled)) {
                disabled.forEach(function (tab) {
                    if (exsistId_1.includes(tab) && !_this._disabled.includes(tab)) {
                        _this._disabled.push(tab);
                    }
                });
            }
            else if (exsistId_1.includes(disabled) && !_this._disabled.includes(disabled)) {
                _this._disabled.push(disabled);
            }
            _this.paint();
        }
        _this.events = new events_1.EventSystem(_this);
        return _this;
    }
    Tabbar.prototype.toVDOM = function () {
        var _this = this;
        if (!this._tabsContainer) {
            dom_1.awaitRedraw().then(function () {
                _this._tabsContainer = _this.getRootView().data.getRootNode();
                _this.paint();
            });
        }
        var activeView = null;
        if (!this.config.noContent) {
            activeView = this.getCell(this.config.activeView);
            if (activeView) {
                var disabled = this._disabled.includes(this.config.activeView)
                    ? " dhx_tabbar-content--disabled"
                    : "";
                if (activeView.config.css) {
                    if (activeView.config.css.indexOf("dhx_tabbar-content--disabled") !== -1) {
                        activeView.config.css = activeView.config.css.replace("dhx_tabbar-content--disabled", "");
                    }
                    else {
                        activeView.config.css = activeView.config.css + disabled;
                    }
                }
                else {
                    activeView.config.css = disabled;
                }
            }
        }
        return dom_1.el("div", {
            class: "dhx_widget dhx_tabbar" +
                (this.config.mode ? " dhx_tabbar--" + this.config.mode : "") +
                (this.config.css ? " " + this.config.css : ""),
        }, this._tabsContainer ? __spreadArrays(this._drawTabs(), [activeView ? activeView.toVDOM() : null]) : []);
    };
    Tabbar.prototype.destructor = function () {
        this._hotkeysDestructor();
        _super.prototype.destructor.call(this);
    };
    Tabbar.prototype.getWidget = function () {
        var _this = this;
        var activeCell = this._cells.filter(function (cell) { return _this.getActive() === cell.id; });
        return activeCell[0].getWidget();
    };
    Tabbar.prototype.setActive = function (id) {
        var exsistId = this._cells.map(function (tab) {
            return tab.id;
        });
        if (exsistId.includes(id) && !this._disabled.includes(id)) {
            var prev = this.config.activeView;
            this.config.activeView = id;
            this.getCell(id).show();
            this._focusTab(id);
            this.events.fire(types_1.TabbarEvents.change, [id, prev]);
        }
    };
    Tabbar.prototype.getActive = function () {
        return this.config ? this.config.activeView : null;
    };
    Tabbar.prototype.addTab = function (config, index) {
        this.addCell(config, index);
        if (this._cells.length === 1 && !config.disabled) {
            this.setActive(this._cells[0].id);
        }
    };
    Tabbar.prototype.removeTab = function (id) {
        var _this = this;
        if (!this.events.fire(types_1.TabbarEvents.beforeClose, [id])) {
            return;
        }
        if (id === this.config.activeView) {
            var cellLength = this._getEnableTabs().length;
            var index = core_1.findIndex(this._getEnableTabs(), function (cell) { return cell.id === _this.config.activeView; });
            if (index < 0) {
                return;
            }
            if (index === cellLength - 1) {
                index = index - 1;
            }
            _super.prototype.removeCell.call(this, id);
            if (cellLength === 1) {
                this.config.activeView = null;
            }
            else {
                this.setActive(this._getEnableTabs()[index].id);
            }
        }
        else {
            _super.prototype.removeCell.call(this, id);
        }
        this.events.fire(types_1.TabbarEvents.afterClose, [id]);
        this.events.fire(types_1.TabbarEvents.close, [id]); // TODO: remove suite_7.0
    };
    Tabbar.prototype.disableTab = function (id) {
        var exsistId = this._cells.map(function (tab) {
            return tab.id;
        });
        if (exsistId.includes(id) && !this._disabled.includes(id)) {
            this._disabled.push(id);
            this.paint();
            return true;
        }
        return false;
    };
    Tabbar.prototype.enableTab = function (id) {
        if (this._disabled.includes(id)) {
            var sort = this._disabled.filter(function (tab) { return tab !== id; });
            this._disabled = __spreadArrays(sort);
            this.paint();
        }
    };
    Tabbar.prototype.isDisabled = function (id) {
        return this._disabled.includes(id ? id : this.config.activeView);
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Tabbar.prototype.removeCell = function (id) {
        this.removeTab(id);
    };
    Tabbar.prototype._initHandlers = function () {
        var _this = this;
        _super.prototype._initHandlers.call(this);
        this._handlers = __assign(__assign({}, this._handlers), { onTabClick: function (e) {
                var tabId = html_1.locate(e, "dhx_tabid");
                if (!tabId || _this._disabled.includes(tabId)) {
                    return;
                }
                var prev = _this.config.activeView;
                if (e.target.classList.contains("dhx_tabbar-tab__close")) {
                    _this.removeTab(tabId);
                }
                else {
                    _this.config.activeView = tabId;
                    _this.events.fire(types_1.TabbarEvents.change, [_this.config.activeView, prev]);
                }
                _this.paint();
            }, onScrollClick: function (e) {
                var mode = html_1.locate(e, "mode");
                var options = {
                    behavior: "smooth",
                };
                if (_this._isHorizontalMode()) {
                    var firstCellWidth_1 = _this._normalizeSize({
                        width: _this._getSizes(_this._cells[0].config).width,
                    }).width;
                    var lastCellWidth_1 = _this._normalizeSize({
                        width: _this._getSizes(_this._cells[_this._cells.length - 1].config).width,
                    }).width;
                    var totalWidth_1;
                    if (_this._tabsContainer) {
                        totalWidth_1 = _this._tabsContainer.clientWidth;
                        _this._cells.reduce(function (sum, tab, i) {
                            if (sum >= _this._tabsContainer.scrollLeft && i !== 0 && mode === "left") {
                                firstCellWidth_1 = Math.abs(_this._normalizeSize({
                                    width: _this._getSizes(_this._cells[i - 1].config).width,
                                }).width -
                                    (sum - _this._tabsContainer.scrollLeft));
                            }
                            else if (sum > totalWidth_1 + _this._tabsContainer.scrollLeft &&
                                mode === "right") {
                                lastCellWidth_1 = Math.abs(totalWidth_1 + _this._tabsContainer.scrollLeft - sum);
                            }
                            else {
                                return (sum +
                                    _this._normalizeSize({ width: _this._getSizes(tab.config).width }).width);
                            }
                        }, 0);
                    }
                    options.left =
                        mode === "left"
                            ? _this._tabsContainer.scrollLeft - firstCellWidth_1
                            : _this._tabsContainer.scrollLeft + lastCellWidth_1;
                }
                else {
                    var firstCellHeight_1 = _this._normalizeSize({
                        height: _this._getSizes(_this._cells[0].config).height,
                    }).height;
                    var lastCellHeight_1 = _this._normalizeSize({
                        height: _this._getSizes(_this._cells[_this._cells.length - 1].config).height,
                    }).height;
                    var totalHeight_1;
                    if (_this._tabsContainer) {
                        totalHeight_1 = _this._tabsContainer.clientHeight;
                        _this._cells.reduce(function (sum, tab, i) {
                            if (sum >= _this._tabsContainer.scrollTop && i !== 0 && mode === "up") {
                                firstCellHeight_1 = Math.abs(_this._normalizeSize({
                                    height: _this._getSizes(_this._cells[i - 1].config).height,
                                }).height -
                                    (sum - _this._tabsContainer.scrollTop));
                            }
                            else if (sum > totalHeight_1 + _this._tabsContainer.scrollTop && mode === "down") {
                                lastCellHeight_1 = Math.abs(totalHeight_1 + _this._tabsContainer.scrollTop - sum);
                            }
                            else {
                                return (sum +
                                    _this._normalizeSize({ height: _this._getSizes(tab.config).height }).height);
                            }
                        }, 0);
                    }
                    options.top =
                        mode === "up"
                            ? _this._tabsContainer.scrollTop - firstCellHeight_1
                            : _this._tabsContainer.scrollTop + lastCellHeight_1;
                }
                _this._tabsContainer.scrollTo(options);
            }, onHeaderScroll: core_1.debounce(function () {
                _this.paint();
            }, 10) });
        var activeNextTab = function (e) {
            e.preventDefault();
            var enableTabs = _this._getEnableTabs();
            var activeIndex = core_1.findIndex(enableTabs, function (cell) { return cell.id === _this.config.activeView; });
            var prev = _this.config.activeView;
            if (activeIndex === -1) {
                return;
            }
            if (activeIndex === enableTabs.length - 1) {
                _this.config.activeView = enableTabs[0].id;
            }
            else {
                _this.config.activeView = enableTabs[activeIndex + 1].id;
            }
            _this.events.fire(types_1.TabbarEvents.change, [_this.config.activeView, prev]);
            _this._focusTab(_this.config.activeView);
            _this.paint();
        };
        var activePrevTab = function (e) {
            e.preventDefault();
            var enableTabs = _this._getEnableTabs();
            var activeIndex = core_1.findIndex(enableTabs, function (cell) { return cell.id === _this.config.activeView; });
            var prev = _this.config.activeView;
            if (activeIndex === -1) {
                return;
            }
            if (activeIndex === 0) {
                _this.config.activeView = enableTabs[enableTabs.length - 1].id;
            }
            else {
                _this.config.activeView = enableTabs[activeIndex - 1].id;
            }
            _this.events.fire(types_1.TabbarEvents.change, [_this.config.activeView, prev]);
            _this._focusTab(_this.config.activeView);
            _this.paint();
        };
        var isVertical = this.config.mode === "right" || this.config.mode === "left";
        this._hotkeysDestructor = Keymanager_1.addHotkeys({
            arrowright: activeNextTab,
            arrowup: isVertical ? activePrevTab : activeNextTab,
            arrowleft: activePrevTab,
            arrowdown: isVertical ? activeNextTab : activePrevTab,
        }, function () { return html_1.locate(document.activeElement, "tabs_id") === _this._uid; });
    };
    Tabbar.prototype._isHorizontalMode = function () {
        return this.config.mode === "bottom" || this.config.mode === "top";
    };
    Tabbar.prototype._focusTab = function (id) {
        var _this = this;
        dom_1.awaitRedraw().then(function () {
            _this.getRootView().refs[id].el.focus();
        });
    };
    Tabbar.prototype._getEnableTabs = function () {
        var _this = this;
        return this._cells.filter(function (tab) { return !_this._disabled.includes(tab.config.id); });
    };
    Tabbar.prototype._getIndicatorPosition = function () {
        var _this = this;
        var activeIndex = core_1.findIndex(this._cells, function (cell) { return cell.id === _this.config.activeView; });
        if (activeIndex === -1) {
            activeIndex = 0;
        }
        var activeCell = this.getCell(this.config.activeView);
        if (this._isHorizontalMode()) {
            var _a = this._normalizeSize({
                width: this._getSizes(activeCell.config).width,
            }), width = _a.width, unit = _a.unit;
            // Dirty: borders in calculation
            var totalWidth_2 = this._tabsContainer.offsetWidth - 2;
            var translateX = this._cells.reduce(function (sum, item, i) {
                var size = _this._normalizeSize({ width: _this._getSizes(item.config).width });
                if (size.unit === "%") {
                    size.width = (totalWidth_2 / 100) * size.width;
                }
                return i < activeIndex ? sum + size.width : sum;
            }, 0);
            return {
                transform: "translateX(" + translateX + "px)",
                transition: "all 0.1s ease",
                width: width + unit,
                height: "2px",
            };
        }
        else {
            var _b = this._normalizeSize({
                height: this._getSizes(activeCell.config).height,
            }), height = _b.height, unit = _b.unit;
            // Dirty: borders in calculation
            var totalHeight_2 = this._tabsContainer.offsetHeight - 2;
            var translateY = this._cells.reduce(function (sum, item, i) {
                var size = _this._normalizeSize({ height: _this._getSizes(item.config).height });
                if (size.unit === "%") {
                    size.height = (totalHeight_2 / 100) * size.height;
                }
                return i < activeIndex ? sum + size.height : sum;
            }, 0);
            return {
                transform: "translateY(" + translateY + "px)",
                transition: "all 0.1s ease",
                height: height + unit,
                width: "2px",
            };
        }
    };
    Tabbar.prototype._drawTabs = function () {
        var _this = this;
        if (!this._cells.length) {
            return [];
        }
        var totalSize;
        var totalTabsSize;
        this._beforeScrollSize = 0;
        this._afterScrollSize = 0;
        if (this._isHorizontalMode()) {
            totalSize = this._tabsContainer.offsetWidth - 2;
            totalTabsSize = this._cells.reduce(function (sum, tab) {
                return _this._normalizeSize({ width: _this._getSizes(tab.config).width }).width + sum;
            }, 0);
            if (this._tabsContainer && totalTabsSize >= totalSize) {
                this._beforeScrollSize = this._tabsContainer.scrollLeft;
                this._afterScrollSize = totalTabsSize - (totalSize + this._beforeScrollSize);
            }
            else if (totalTabsSize >= totalSize) {
                this._afterScrollSize = totalTabsSize - totalSize;
            }
        }
        else {
            totalSize = this._tabsContainer.offsetHeight - 2;
            totalTabsSize = this._cells.reduce(function (sum, tab) {
                return _this._normalizeSize({ height: _this._getSizes(tab.config).height }).height + sum;
            }, 0);
            if (this._tabsContainer && totalTabsSize >= totalSize) {
                this._beforeScrollSize = this._tabsContainer.scrollTop;
                this._afterScrollSize = totalTabsSize - (totalSize + this._beforeScrollSize);
            }
            else {
                this._afterScrollSize = totalTabsSize - totalSize;
            }
        }
        var headerStyleClass = this._cssManager.add(this._getIndicatorPosition());
        return __spreadArrays([
            dom_1.el(".dhx_tabbar-header__wrapper", {
                onscroll: this._handlers.onHeaderScroll,
                class: this.config.tabAlign && this._beforeScrollSize <= 0 && this._afterScrollSize <= 0
                    ? "dhx_tabbar-header__wrapper-" + this.config.tabAlign
                    : "",
            }, [
                dom_1.el("ul" + "." + this.config.mode, {
                    tabs_id: this._uid,
                    class: "dhx_tabbar-header ",
                    onclick: this._handlers.onTabClick,
                }, __spreadArrays(this._cells.map(function (cell) {
                    var cssClassName = _this._cssManager.add(_this._getSizes(cell.config));
                    var _a = _this.config, closable = _a.closable, closeButtons = _a.closeButtons, activeView = _a.activeView;
                    return dom_1.el("li", {
                        class: "dhx_tabbar-tab" +
                            (cell.config.tabCss ? " " + cell.config.tabCss : "") +
                            (" " + cssClassName),
                        dhx_tabid: cell.id,
                        role: "presentation",
                    }, [
                        dom_1.el("button.dhx_button.dhx_tabbar-tab-button" +
                            (activeView === cell.id
                                ? ".dhx_tabbar-tab-button--active"
                                : "") +
                            (_this._disabled.includes(cell.config.id)
                                ? ".dhx_tabbar-tab-button--disabled"
                                : ""), {
                            tabindex: "0",
                            "aria-controls": cell.id,
                            id: "tab-content-" + cell.id,
                            "aria-selected": "" + (activeView === cell.id),
                            _ref: cell.id.toString(),
                        }, [dom_1.el("span.dhx_button__text", cell.config.tab)]),
                        (Array.isArray(closable) &&
                            closable.includes(cell.config.id) &&
                            !_this._disabled.includes(cell.config.id)) ||
                            (closable &&
                                typeof closable === "boolean" &&
                                !_this._disabled.includes(cell.config.id)) ||
                            (closeButtons &&
                                typeof closeButtons === "boolean" &&
                                !_this._disabled.includes(cell.config.id))
                            ? dom_1.el("div.dhx_tabbar-tab__close.dxi--small.dxi.dxi-close", {
                                tabindex: 0,
                                role: "button",
                                "aria-pressed": "false",
                            })
                            : null,
                    ]);
                }), [
                    dom_1.el(".dhx_tabbar-header-active", {
                        class: headerStyleClass,
                    }),
                ])),
            ])
        ], this._getOverflowScroll());
    };
    Tabbar.prototype._getOverflowScroll = function () {
        var isHorizontal = this._isHorizontalMode();
        var arrows = [];
        var cssClass;
        if (isHorizontal) {
            cssClass = this._cssManager.add({
                height: this.config.tabHeight || "45px",
            });
        }
        else {
            cssClass = this._cssManager.add({
                width: this.config.tabWidth || "200px",
            });
        }
        if (this._beforeScrollSize > 0) {
            var icon = "dxi dxi-chevron-" + (isHorizontal ? "left" : "up");
            arrows.push(dom_1.el(".dhx_tabbar_scroll", {
                class: icon + (" arrow-" + (isHorizontal ? "left" : "up") + " " + cssClass),
                onmousedown: this._handlers.onScrollClick,
                mode: isHorizontal ? "left" : "up",
            }));
        }
        if (this._afterScrollSize > 0) {
            var icon = "dxi dxi-chevron-" + (isHorizontal ? "right" : "down");
            arrows.push(dom_1.el(".dhx_tabbar_scroll", {
                class: icon + (" arrow-" + (isHorizontal ? "right" : "down") + " " + cssClass),
                onmousedown: this._handlers.onScrollClick,
                mode: isHorizontal ? "right" : "down",
            }));
        }
        return arrows;
    };
    Tabbar.prototype._getSizes = function (config) {
        if (typeof config.tabWidth === "number")
            config.tabWidth = config.tabWidth + "px";
        if (typeof config.tabHeight === "number")
            config.tabHeight = config.tabHeight + "px";
        if (typeof this.config.tabWidth === "number")
            this.config.tabWidth = this.config.tabWidth + "px";
        if (typeof this.config.tabHeight === "number")
            this.config.tabHeight = this.config.tabHeight + "px";
        var width = this.config.tabWidth ||
            (this._isHorizontalMode()
                ? html_1.getStrSize(config.tab.toUpperCase(), { fontWeight: "500" }).width + 48 + "px"
                : "200px");
        var height = this.config.tabHeight || "45px";
        if (this._isHorizontalMode()) {
            if (config.tabWidth !== undefined) {
                width = config.tabWidth;
            }
        }
        else {
            if (config.tabHeight !== undefined) {
                height = config.tabHeight;
            }
        }
        if (((this.config.tabAutoWidth && config.tabAutoWidth !== false) || config.tabAutoWidth) &&
            this.config.tabWidth === undefined &&
            config.tabWidth === undefined) {
            width = this._getTabAutoWidth();
        }
        if (((this.config.tabAutoHeight && config.tabAutoHeight !== false) || config.tabAutoHeight) &&
            this.config.tabHeight === undefined &&
            config.tabHeight === undefined) {
            height = this._getTabAutoHeight();
        }
        return { width: width, height: height };
    };
    Tabbar.prototype._normalizeSize = function (size) {
        var sizes = {};
        if (Object.keys(size).length >= 1) {
            for (var key in size) {
                if (typeof size[key] === "number") {
                    sizes.unit = "px";
                }
                else {
                    if (size[key].includes("%")) {
                        sizes[key] = size[key].slice(0, -1);
                        sizes.unit = "%";
                    }
                    else if (size[key].includes("px")) {
                        sizes[key] = size[key].slice(0, -2);
                        sizes.unit = "px";
                    }
                    sizes[key] = parseFloat(sizes[key]);
                }
            }
        }
        return sizes;
    };
    Tabbar.prototype._getTabAutoWidth = function () {
        var _this = this;
        // Dirty: borders in calculation
        var totalWidth = this._tabsContainer.offsetWidth - 2;
        var frozenWidth = 0;
        var autoTabs = 0;
        this._cells.forEach(function (cell) {
            if (cell.config.tabAutoWidth ||
                (_this.config.tabAutoWidth && cell.config.tabAutoWidth !== false)) {
                if (cell.config.tabWidth) {
                    frozenWidth += _this._normalizeSize({ width: cell.config.tabWidth }).width;
                }
                else {
                    autoTabs++;
                }
            }
            else {
                frozenWidth += _this._normalizeSize({ width: _this._getSizes(cell.config).width }).width;
            }
        });
        return (totalWidth - frozenWidth) / autoTabs + "px";
    };
    Tabbar.prototype._getTabAutoHeight = function () {
        var _this = this;
        // Dirty: borders in calculation
        var totalHeight = this._tabsContainer.offsetHeight - 2;
        var frozenHeight = 0;
        var autoTabs = 0;
        this._cells.forEach(function (cell) {
            if (cell.config.tabAutoHeight ||
                (_this.config.tabAutoHeight && cell.config.tabAutoHeight !== false)) {
                if (cell.config.tabHeight) {
                    frozenHeight += _this._normalizeSize({ height: cell.config.tabHeight }).height;
                }
                else {
                    autoTabs++;
                }
            }
            else {
                frozenHeight += _this._normalizeSize({ height: _this._getSizes(cell.config).height }).height;
            }
        });
        return (totalHeight - frozenHeight) / autoTabs + "px";
    };
    return Tabbar;
}(ts_layout_1.Layout));
exports.Tabbar = Tabbar;


/***/ }),

/***/ "../ts-tabbar/sources/types.ts":
/*!*************************************!*\
  !*** ../ts-tabbar/sources/types.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TabbarEvents;
(function (TabbarEvents) {
    TabbarEvents["change"] = "change";
    TabbarEvents["beforeClose"] = "beforeClose";
    TabbarEvents["afterClose"] = "afterClose";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    TabbarEvents["close"] = "close";
})(TabbarEvents = exports.TabbarEvents || (exports.TabbarEvents = {}));


/***/ }),

/***/ "../ts-timepicker/index.ts":
/*!*********************************!*\
  !*** ../ts-timepicker/index.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Timepicker */ "../ts-timepicker/sources/Timepicker.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-timepicker/sources/types.ts"));


/***/ }),

/***/ "../ts-timepicker/sources/Timepicker.ts":
/*!**********************************************!*\
  !*** ../ts-timepicker/sources/Timepicker.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_layout_1 = __webpack_require__(/*! @dhx/ts-layout */ "../ts-layout/index.ts");
var ts_slider_1 = __webpack_require__(/*! @dhx/ts-slider */ "../ts-slider/index.ts");
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-timepicker/sources/locales/en.ts");
var helper_1 = __webpack_require__(/*! ./helper */ "../ts-timepicker/sources/helper.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-timepicker/sources/types.ts");
function validate(value, max) {
    if (isNaN(value)) {
        return 0;
    }
    return Math.min(max, Math.max(0, value));
}
var Timepicker = /** @class */ (function (_super) {
    __extends(Timepicker, _super);
    function Timepicker(container, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, container, core_1.extend({
            timeFormat: 24,
            controls: false,
            valueFormat: "string",
            actions: false,
        }, config)) || this;
        _this.events = new events_1.EventSystem(_this);
        _this._time = {
            hour: 0,
            minute: 0,
            AM: true,
        };
        if (_this.config.timeFormat === 12) {
            _this._time.hour = 12;
        }
        _this.config.controls = _this.config.controls || _this.config.actions; // TODO: remove suite_7.0
        _this.config.value && _this._setValue(_this.config.value);
        _this._initUI(container);
        _this._initHandlers();
        _this._initEvents();
        return _this;
    }
    Timepicker.prototype.getValue = function (asOBject) {
        var _a = this._time, h = _a.hour, m = _a.minute, isAM = _a.AM;
        if (asOBject) {
            var obj = {
                hour: h,
                minute: m,
            };
            if (this.config.timeFormat === 12) {
                obj.AM = isAM;
            }
            return obj;
        }
        return ((h < 10 ? "0" + h : h) +
            ":" +
            (m < 10 ? "0" + m : m) +
            (this.config.timeFormat === 12 ? (isAM ? "AM" : "PM") : ""));
    };
    Timepicker.prototype.setValue = function (value) {
        this._setValue(value);
        this._hoursSlider.setValue(this._time.hour);
        this._minutesSlider.setValue(this._time.minute);
        this._inputsView.paint();
    };
    Timepicker.prototype.clear = function () {
        if (this.config.timeFormat === 24) {
            this.setValue("00:00");
        }
        else {
            this.setValue("12:00AM");
        }
    };
    Timepicker.prototype.destructor = function () {
        this._minutesSlider.destructor();
        this._hoursSlider.destructor();
        this.events.clear();
        this.unmount();
    };
    Timepicker.prototype.getRootView = function () {
        return this.layout.getRootView();
    };
    Timepicker.prototype._setValue = function (value) {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var m = 0;
        var h = 0;
        var isPM;
        if (typeof value === "number") {
            value = new Date(value);
        }
        if (value instanceof Date) {
            m = value.getMinutes();
            h = value.getHours();
        }
        else if (Array.isArray(value)) {
            h = validate(value[0], 23);
            m = validate(value[1], 59);
            if (value[2] && value[2].toLowerCase() === "pm") {
                isPM = true;
            }
        }
        else {
            var matches = value.match(/\d+/g);
            h = validate(+matches[0], 23);
            m = validate(+matches[1], 59);
            if (value.toLowerCase().includes("pm")) {
                isPM = true;
            }
        }
        if (isPM && h < 12) {
            h += 12;
        }
        if (this.config.timeFormat === 12 && !helper_1.isTimeCheck(value) && h >= 12)
            isPM = true;
        return (this._time = {
            hour: h,
            minute: m,
            AM: !isPM,
        });
    };
    Timepicker.prototype._initUI = function (container) {
        var _this = this;
        var layoutConfig = {
            gravity: false,
            css: "dhx_widget dhx_timepicker " +
                (this.config.css ? this.config.css : "") +
                (this.config.controls ? " dhx_timepicker--with-controls" : ""),
            rows: [
                {
                    id: "timepicker",
                    css: "dhx_timepicker__inputs",
                },
                {
                    id: "hour-slider",
                    css: "dhx_timepicker__hour",
                },
                {
                    id: "minute-slider",
                    css: "dhx_timepicker__minute",
                },
            ],
        };
        if (this.config.controls) {
            layoutConfig.rows.unshift({
                id: "close-action",
                css: "dhx_timepicker__close",
            });
            layoutConfig.rows.push({
                id: "save-action",
                css: "dhx_timepicker__save",
            });
        }
        var layout = (this.layout = new ts_layout_1.Layout(container, layoutConfig));
        var timepicker = dom_1.create({
            render: function () { return _this._draw(); },
        });
        var inputsView = (this._inputsView = view_1.toViewLike(timepicker));
        var mSlider = (this._minutesSlider = new ts_slider_1.Slider(null, {
            min: 0,
            max: 59,
            step: 1,
            tooltip: false,
            labelPosition: "top",
            label: en_1.default.minutes,
            value: this.config.value ? this._time.minute : 0,
        }));
        var hSlider = (this._hoursSlider = new ts_slider_1.Slider(null, {
            min: 0,
            max: 23,
            step: 1,
            tooltip: false,
            labelPosition: "top",
            label: en_1.default.hours,
            value: this.config.value ? (this._time.hour === 12 && this._time.AM ? 0 : this._time.hour) : 0,
        }));
        layout.getCell("timepicker").attach(inputsView);
        layout.getCell("hour-slider").attach(hSlider);
        layout.getCell("minute-slider").attach(mSlider);
        if (this.config.controls) {
            var save = function () {
                return dom_1.el("button.dhx_timepicker__button-save.dhx_button.dhx_button--view_flat.dhx_button--color_primary.dhx_button--size_medium.dhx_button--circle.dhx_button--width_full", { onclick: _this._outerHandlers.save }, en_1.default.save);
            };
            var close_1 = function () {
                return dom_1.el("button.dhx_timepicker__button-close.dhx_button.dhx_button--view_link.dhx_button--size_medium.dhx_button--view_link.dhx_button--color_secondary.dhx_button--icon.dhx_button--circle", {
                    onclick: _this._outerHandlers.close,
                }, [dom_1.el("span.dhx_button__icon.dxi.dxi-close")]);
            };
            layout.getCell("save-action").attach(save);
            layout.getCell("close-action").attach(close_1);
        }
    };
    Timepicker.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onchange: {
                ".dhx_timepicker-input--hour": function (e) {
                    var hour = validate(parseInt(e.target.value, 10), 23);
                    e.target.value = hour;
                    _this._hoursSlider.setValue(hour);
                },
                ".dhx_timepicker-input--minutes": function (e) {
                    var min = validate(parseInt(e.target.value, 10), 59);
                    e.target.value = min;
                    _this._minutesSlider.setValue(min);
                },
            },
        };
        this._outerHandlers = {
            close: function () {
                if (!_this.events.fire(types_1.TimepickerEvents.beforeClose, [
                    _this.getValue(_this.config.valueFormat === "timeObject"),
                ])) {
                    return;
                }
                _this.events.fire(types_1.TimepickerEvents.afterClose, [
                    _this.getValue(_this.config.valueFormat === "timeObject"),
                ]);
                _this.events.fire(types_1.TimepickerEvents.close, []); // TODO: remove suite_7.0
            },
            save: function () {
                if (!_this.events.fire(types_1.TimepickerEvents.beforeApply, [
                    _this.getValue(_this.config.valueFormat === "timeObject"),
                ]))
                    return;
                _this.events.fire(types_1.TimepickerEvents.afterApply, [
                    _this.getValue(_this.config.valueFormat === "timeObject"),
                ]);
                _this.events.fire(types_1.TimepickerEvents.apply, [_this.getValue()]); // TODO: remove suite_7.0
                _this.events.fire(types_1.TimepickerEvents.save, [_this._time]); // TODO: remove suite_7.0
            },
        };
    };
    Timepicker.prototype._initEvents = function () {
        var _this = this;
        this._hoursSlider.events.on(ts_slider_1.SliderEvents.change, function (value) {
            if (value < _this._hoursSlider.config.min || value > _this._hoursSlider.config.max) {
                return;
            }
            if (_this.config.timeFormat === 12) {
                _this._time.AM = value < 12;
                _this._time.hour = value % 12 || 12;
            }
            else {
                _this._time.hour = value;
            }
            _this.events.fire(types_1.TimepickerEvents.change, [
                _this.getValue(_this.config.valueFormat === "timeObject"),
            ]);
            _this._inputsView.paint();
        });
        this._minutesSlider.events.on(ts_slider_1.SliderEvents.change, function (value) {
            if (value < _this._minutesSlider.config.min || value > _this._minutesSlider.config.max) {
                return;
            }
            _this._time.minute = value;
            _this.events.fire(types_1.TimepickerEvents.change, [
                _this.getValue(_this.config.valueFormat === "timeObject"),
            ]);
            _this._inputsView.paint();
        });
    };
    Timepicker.prototype._draw = function () {
        if (this.config.timeFormat === 12)
            this._time.hour = this._time.hour % 12 || 12;
        return dom_1.el(".dhx_timepicker-inputs", __assign({}, this._handlers), [
            dom_1.el("input.dhx_timepicker-input.dhx_timepicker-input--hour", {
                _key: "hour",
                value: this._time.hour < 10 ? "0" + this._time.hour : this._time.hour,
            }),
            dom_1.el("span.dhx_timepicker-delimer", ":"),
            dom_1.el("input.dhx_timepicker-input.dhx_timepicker-input--minutes", {
                _key: "minute",
                value: this._time.minute < 10 ? "0" + this._time.minute : this._time.minute,
            }),
            this.config.timeFormat === 12
                ? dom_1.el(".dhx_timepicker-ampm", this._time.AM ? "AM" : "PM")
                : null,
        ]);
    };
    return Timepicker;
}(view_1.View));
exports.Timepicker = Timepicker;


/***/ }),

/***/ "../ts-timepicker/sources/helper.ts":
/*!******************************************!*\
  !*** ../ts-timepicker/sources/helper.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This function is designed to resolve conflicts with the time setting for the 12 hour format.
 */
function isTimeCheck(value) {
    return /(^12:[0-5][0-9]?AM$)/i.test(value);
}
exports.isTimeCheck = isTimeCheck;


/***/ }),

/***/ "../ts-timepicker/sources/locales/en.ts":
/*!**********************************************!*\
  !*** ../ts-timepicker/sources/locales/en.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var locale = {
    hours: "Hours",
    minutes: "Minutes",
    save: "save",
};
exports.default = locale;


/***/ }),

/***/ "../ts-timepicker/sources/types.ts":
/*!*****************************************!*\
  !*** ../ts-timepicker/sources/types.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TimepickerEvents;
(function (TimepickerEvents) {
    TimepickerEvents["change"] = "change";
    TimepickerEvents["beforeApply"] = "beforeApply";
    TimepickerEvents["afterApply"] = "afterApply";
    TimepickerEvents["beforeClose"] = "beforeClose";
    TimepickerEvents["afterClose"] = "afterClose";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    TimepickerEvents["apply"] = "apply";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    TimepickerEvents["close"] = "close";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    TimepickerEvents["save"] = "save";
})(TimepickerEvents = exports.TimepickerEvents || (exports.TimepickerEvents = {}));


/***/ }),

/***/ "../ts-toolbar/index.ts":
/*!******************************!*\
  !*** ../ts-toolbar/index.ts ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Toolbar */ "../ts-toolbar/sources/Toolbar.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-toolbar/sources/types.ts"));


/***/ }),

/***/ "../ts-toolbar/sources/Toolbar.ts":
/*!****************************************!*\
  !*** ../ts-toolbar/sources/Toolbar.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var ts_navbar_1 = __webpack_require__(/*! @dhx/ts-navbar */ "../ts-navbar/index.ts");
var ts_message_1 = __webpack_require__(/*! @dhx/ts-message */ "../ts-message/index.ts");
var Toolbar = /** @class */ (function (_super) {
    __extends(Toolbar, _super);
    function Toolbar(element, config) {
        var _this = _super.call(this, element, core_1.extend({
            navigationType: "click",
        }, config)) || this;
        _this._currentRoot = null;
        var render = function () { return _this._draw(); };
        _this.mount(element, dom_1.create({ render: render }));
        return _this;
    }
    Toolbar.prototype.getState = function () {
        var state = {};
        this.data.eachChild(this.data.getRoot(), function (item) {
            if (item.twoState && !item.group) {
                state[item.id] = item.active;
            }
            else if (item.type === "input" || item.type === "selectButton") {
                state[item.id] = item.value;
            }
        }, false);
        for (var key in this._groups) {
            if (this._groups[key].active) {
                state[key] = this._groups[key].active;
            }
        }
        return state;
    };
    Toolbar.prototype.setState = function (state) {
        for (var key in state) {
            if (this._groups && this._groups[key]) {
                if (this._groups[key].active) {
                    this.data.update(this._groups[key].active, { active: false });
                    this._groups[key].active = state[key];
                    this.data.update(state[key], { active: true });
                }
            }
            else {
                var item = this.data.getItem(key);
                if (item.type === "input" || item.type === "selectButton") {
                    this.data.update(key, { value: state[key] });
                }
                else {
                    this.data.update(key, { active: state[key] });
                }
            }
        }
    };
    Toolbar.prototype._customHandlers = function () {
        var _this = this;
        return {
            input: function (e) {
                var id = html_1.locate(e);
                _this.data.update(id, { value: e.target.value });
            },
            tooltip: function (e) {
                var elem = html_1.locateNode(e);
                if (!elem) {
                    return;
                }
                var id = elem.getAttribute("dhx_id");
                var item = _this.data.getItem(id);
                if (item.tooltip) {
                    ts_message_1.tooltip(item.tooltip, {
                        node: elem,
                        position: ts_message_1.Position.bottom,
                    });
                }
            },
        };
    };
    Toolbar.prototype._getFactory = function () {
        return ts_navbar_1.createFactory({
            widget: this,
            defaultType: "navItem",
            allowedTypes: [
                "button",
                "customHTMLButton",
                "imageButton",
                "input",
                "selectButton",
                "separator",
                "spacer",
                "title",
                "navItem",
                "menuItem",
                "customHTML",
            ],
            widgetName: "toolbar",
        });
    };
    Toolbar.prototype._draw = function () {
        var _this = this;
        return dom_1.el("nav.dhx_widget.dhx_toolbar", {
            class: this.config.css ? this.config.css : "",
        }, [
            dom_1.el("ul.dhx_navbar.dhx_navbar--horizontal", {
                dhx_widget_id: this._uid,
                tabindex: 0,
                onclick: this._handlers.onclick,
                onmousedown: this._handlers.onmousedown,
                oninput: this._handlers.input,
                onmouseover: this._handlers.tooltip,
                _hooks: {
                    didInsert: function (node) {
                        node.el.addEventListener("keyup", function (e) {
                            if (e.which !== 9) {
                                return;
                            }
                            var elem = html_1.locateNode(document.activeElement);
                            if (!elem) {
                                return;
                            }
                            var id = elem.getAttribute("dhx_id");
                            var item = _this.data.getItem(id);
                            if (item.tooltip) {
                                ts_message_1.tooltip(item.tooltip, {
                                    node: elem,
                                    position: ts_message_1.Position.bottom,
                                    force: true,
                                });
                            }
                        }, true);
                    },
                },
            }, this.data.map(function (item) { return _this._factory(item); }, this.data.getRoot(), false)),
        ]);
    };
    Toolbar.prototype._getMode = function (item, root) {
        return item.id === root ? "bottom" : "right";
    };
    Toolbar.prototype._close = function (e) {
        this._activePosition = null;
        this._currentRoot = null;
        _super.prototype._close.call(this, e);
    };
    Toolbar.prototype._setRoot = function (id) {
        if (this.data.getParent(id) === this.data.getRoot()) {
            this._currentRoot = id;
        }
    };
    return Toolbar;
}(ts_navbar_1.Navbar));
exports.Toolbar = Toolbar;


/***/ }),

/***/ "../ts-toolbar/sources/types.ts":
/*!**************************************!*\
  !*** ../ts-toolbar/sources/types.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ts_navbar_1 = __webpack_require__(/*! @dhx/ts-navbar */ "../ts-navbar/index.ts");
exports.NavigationBarEvents = ts_navbar_1.NavigationBarEvents;


/***/ }),

/***/ "../ts-tree/index.ts":
/*!***************************!*\
  !*** ../ts-tree/index.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Tree */ "../ts-tree/sources/Tree.ts"));
__export(__webpack_require__(/*! ./sources/Editor */ "../ts-tree/sources/Editor.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-tree/sources/types.ts"));


/***/ }),

/***/ "../ts-tree/sources/Editor.ts":
/*!************************************!*\
  !*** ../ts-tree/sources/Editor.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var Keymanager_1 = __webpack_require__(/*! @dhx/ts-common/Keymanager */ "../ts-common/Keymanager.ts");
var EditorMode;
(function (EditorMode) {
    EditorMode["editText"] = "text";
    EditorMode["selectItem"] = "select";
})(EditorMode = exports.EditorMode || (exports.EditorMode = {}));
var EditorEvents;
(function (EditorEvents) {
    EditorEvents["begin"] = "begin";
    EditorEvents["end"] = "end";
})(EditorEvents = exports.EditorEvents || (exports.EditorEvents = {}));
var Editor = /** @class */ (function () {
    function Editor() {
        var _this = this;
        this.events = new events_1.EventSystem();
        this._documentClick = function (e) {
            var id = html_1.locate(e, "id");
            if (id !== "input_" + _this._item.id) {
                _this._removeClickListener();
                _this._finishEdit();
            }
        };
        this._handlers = {
            editText: function (e) {
                _this._currentValue = e.target.value;
            },
            itemSelected: function (e) {
                _this._currentValue = e.target.value;
                _this._finishEdit();
            },
        };
    }
    Editor.prototype.edit = function (targetId, config) {
        if (this._active && this._item !== config.item) {
            this._finishEdit();
        }
        this._active = true;
        this._targetId = targetId;
        this.config = config;
        this._item = config.item;
        this._currentValue = this._item.value;
        this.events.fire(EditorEvents.begin, [targetId]);
        this._initOuterClick();
        this._addHotkeys();
        return this._draw();
    };
    Editor.prototype.isEditable = function () {
        return this._active;
    };
    Editor.prototype._draw = function () {
        var _this = this;
        if (this.config.mode === EditorMode.selectItem) {
            var opts = this.config.options;
            return dom_1.el("select", {
                id: "input_" + this._item.id,
                dhx_id: this._item.id,
                onchange: this._handlers.itemSelected,
            }, opts.map(function (item) {
                return dom_1.el("option", {
                    class: "editor-select",
                    value: item,
                    selected: _this._currentValue === item,
                    style: { border: "1px solid" },
                }, item);
            }));
        }
        else {
            return dom_1.el("input", {
                _hooks: {
                    didInsert: function (newNode) {
                        newNode.el.focus();
                    },
                },
                id: "input_" + this._item.id,
                class: "dhx_tree-input",
                oninput: this._handlers.editText,
                value: this._item.value,
                autofocus: true,
            });
        }
    };
    Editor.prototype._addHotkeys = function () {
        var _this = this;
        Keymanager_1.keyManager.addHotKey("escape", function () {
            _this._finishEdit();
        }, this);
        Keymanager_1.keyManager.addHotKey("enter", function () {
            _this._finishEdit();
        }, this);
    };
    Editor.prototype._removeHotkeys = function () {
        Keymanager_1.keyManager.removeHotKey(null, this);
    };
    Editor.prototype._finishEdit = function () {
        if (!this.events.fire(EditorEvents.end, [this._targetId, this._item.id, this._currentValue]))
            return;
        this._clear();
    };
    Editor.prototype._clear = function () {
        this._active = false;
        this._removeClickListener();
        this._removeHotkeys();
    };
    Editor.prototype._initOuterClick = function () {
        document.addEventListener("click", this._documentClick);
    };
    Editor.prototype._removeClickListener = function () {
        document.removeEventListener("click", this._documentClick);
    };
    return Editor;
}());
exports.default = new Editor();


/***/ }),

/***/ "../ts-tree/sources/KeyNavigation.ts":
/*!*******************************************!*\
  !*** ../ts-tree/sources/KeyNavigation.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var Keymanager_1 = __webpack_require__(/*! @dhx/ts-common/Keymanager */ "../ts-common/Keymanager.ts");
var KeyNavigation = /** @class */ (function () {
    function KeyNavigation() {
        this._store = {};
        this._keyManager = Keymanager_1.keyManager;
        this._listen = false;
        this._blocked = false;
    }
    KeyNavigation.prototype.add = function (id, target) {
        if (!this._listen) {
            this._listen = true;
            this._initKeys();
            this._addListeners();
        }
        this._store[id] = target;
    };
    KeyNavigation.prototype.block = function (val) {
        this._blocked = val;
    };
    KeyNavigation.prototype._initKeys = function () {
        var _this = this;
        this._keyManager.addHotKey("arrowleft", function (e) {
            if (_this._blocked) {
                return;
            }
            e.preventDefault();
            var target = _this._store[_this._activeTarget];
            if (!target) {
                return;
            }
            var focused = _this._getFocused();
            var parent = target.data.getParent(focused);
            if (target.data.getRoot() === parent) {
                target.collapse(focused);
                return;
            }
            var isClosed = !target.data.getItem(focused).opened;
            if (isClosed) {
                target.focusItem(parent);
            }
            else {
                if (focused !== target.data.getRoot()) {
                    target.collapse(focused);
                }
            }
        });
        this._keyManager.addHotKey("arrowright", function (e) {
            if (_this._blocked) {
                return;
            }
            e.preventDefault();
            var target = _this._store[_this._activeTarget];
            if (!target) {
                return;
            }
            var focused = _this._getFocused();
            if (target.data.haveItems(focused)) {
                target.expand(focused);
            }
        });
        this._keyManager.addHotKey("arrowup", function (e) {
            if (_this._blocked) {
                return;
            }
            e.preventDefault();
            var target = _this._store[_this._activeTarget];
            if (!target) {
                return;
            }
            var focused = _this._getFocused();
            var data = target.data;
            var next = _this._getClosestTop(focused, data);
            if (next) {
                target.focusItem(next);
            }
        });
        this._keyManager.addHotKey("arrowdown", function (e) {
            if (_this._blocked) {
                return;
            }
            e.preventDefault();
            var target = _this._store[_this._activeTarget];
            if (!target) {
                return;
            }
            var focused = _this._getFocused();
            var data = target.data;
            var next = _this._getClosestBot(focused, data);
            if (next) {
                target.focusItem(next);
            }
        });
        this._keyManager.addHotKey("enter", function () {
            if (_this._blocked) {
                return;
            }
            var target = _this._store[_this._activeTarget];
            if (!target) {
                return;
            }
            var focused = _this._getFocused();
            if (focused) {
                target.selection.add(focused);
            }
        });
    };
    KeyNavigation.prototype._getFocused = function () {
        var target = this._store[this._activeTarget];
        var focused = target._focusId;
        if (focused) {
            return focused;
        }
        else {
            var root = target.data.getRoot();
            return target.data.getItems(root)[0].id;
        }
    };
    KeyNavigation.prototype._addListeners = function () {
        var _this = this;
        document.addEventListener("click", function (e) {
            var id = html_1.locate(e, "dhx_widget_id");
            if (id in _this._store) {
                _this._activeTarget = id;
            }
        });
        Keymanager_1.keyManager.addHotKey("tab", function (e) {
            var id = html_1.locate(e, "dhx_widget_id");
            if (id in _this._store) {
                _this._activeTarget = id;
            }
        }, this);
    };
    KeyNavigation.prototype._getClosestBot = function (id, data, ignore) {
        if (ignore === void 0) { ignore = false; }
        var item = data.getItem(id);
        var haveItems = data.haveItems(id);
        if (haveItems && item.opened && !ignore) {
            // item opened
            return data.getItems(id)[0].id;
        }
        else {
            // item not opened
            var parent_1 = data.getParent(id);
            var childs = data.getItems(parent_1);
            var index = core_1.findIndex(childs, function (child) { return child.id === id; });
            var len = childs.length;
            if (index + 1 < len) {
                // item have next element on this level
                return childs[index + 1].id;
            }
            else {
                if (parent_1 === data.getRoot()) {
                    return null;
                }
                return this._getClosestBot(parent_1, data, true);
            }
        }
    };
    KeyNavigation.prototype._getClosestTop = function (id, data) {
        var index = data.getIndex(id);
        var parent = data.getParent(id);
        if (index > 0) {
            var childs = data.getItems(parent);
            var current = childs[index - 1];
            if (!data.haveItems(current.id) || !current.opened) {
                return current.id;
            }
            while (data.haveItems(current.id) && current.opened) {
                var allChilds = data.getItems(current.id);
                current = allChilds[allChilds.length - 1];
            }
            return current.id;
        }
        else {
            if (parent === data.getRoot()) {
                return null;
            }
            return parent;
        }
    };
    return KeyNavigation;
}());
exports.keyNavigation = new KeyNavigation();


/***/ }),

/***/ "../ts-tree/sources/Tree.ts":
/*!**********************************!*\
  !*** ../ts-tree/sources/Tree.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var Editor_1 = __webpack_require__(/*! ./Editor */ "../ts-tree/sources/Editor.ts");
var KeyNavigation_1 = __webpack_require__(/*! ./KeyNavigation */ "../ts-tree/sources/KeyNavigation.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-tree/sources/types.ts");
function getSelectionIndent(level) {
    return level * 20;
}
function getItemIconType(isFolder, isOpened) {
    if (!isFolder) {
        return "file";
    }
    if (isOpened) {
        return "openFolder";
    }
    return "folder";
}
var Tree = /** @class */ (function (_super) {
    __extends(Tree, _super);
    function Tree(element, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, element, core_1.extend({
            dropBehaviour: "child",
            icon: {
                file: "dxi dxi-file-outline",
                folder: "dxi dxi-folder",
                openFolder: "dxi dxi-folder-open",
            },
            editable: false,
            selection: true,
        }, config)) || this;
        _this._touch = {
            duration: 350,
            dblDuration: 300,
            timer: null,
            start: false,
            timeStamp: null,
        };
        _this.config.editable = _this.config.editable || _this.config.editing; // TODO: remove suite_7.0
        var init = function (item) {
            item.$mark = types_1.SelectStatus.unselected;
            item.checkbox = _this.config.checkbox;
            item.$autoload = Boolean(item.items && _this.config.autoload);
            item.$editor = false;
            return item;
        };
        if (Array.isArray(_this.config.data)) {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.TreeCollection({ autoload: _this.config.autoload, init: init }, _this.events);
            _this.data.parse(_this.config.data);
        }
        else if (_this.config.data && _this.config.data.events) {
            _this.data = _this.config.data;
            _this.data.config.init = init;
            _this.events = _this.data.events;
            _this.events.context = _this;
        }
        else {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.TreeCollection({ autoload: _this.config.autoload, init: init }, _this.events);
        }
        _this._isSelectionActive = true;
        _this.selection = new ts_data_1.Selection({
            disable: !_this.config.selection,
        }, _this.data, _this.events);
        if (_this.config.keyNavigation) {
            KeyNavigation_1.keyNavigation.add(_this._uid, _this);
        }
        _this._editor = Editor_1.default;
        _this._initEvents();
        _this._initHandlers();
        if (_this.config.dragMode) {
            ts_data_1.dragManager.setItem(_this._uid, _this);
        }
        _this._root = _this.data.getRoot();
        var render = function () { return _this._draw(); };
        _this.mount(element, dom_1.create({ render: render }));
        return _this;
    }
    Tree.prototype.focusItem = function (id) {
        var _this = this;
        this._focusId = id;
        this.data.eachParent(id, function (item) {
            if (!item.opened) {
                _this.expand(item.id);
            }
        });
        this.paint();
    };
    Tree.prototype.destructor = function () {
        this.events.clear();
        this.unmount();
    };
    Tree.prototype.editItem = function (id, config) {
        if (this._editor.isEditable()) {
            return;
        }
        var item = this.data.getItem(id);
        if (!this.events.fire(types_1.TreeEvents.beforeEditStart, [item.value, id]))
            return;
        this.data.update(id, {
            $edit: true,
            $editConfig: config,
        }, true);
        this.events.fire(types_1.TreeEvents.afterEditStart, [item.value, id]);
    };
    Tree.prototype.getState = function () {
        var state = {};
        this.data.eachChild(this._root, function (item) {
            state[item.id] = {
                open: item.opened,
                selected: item.$mark,
            };
        }, true);
        return state;
    };
    Tree.prototype.setState = function (state) {
        this.data.eachChild(this._root, function (item) {
            if (item.id in state) {
                item.opened = state[item.id].open;
                item.$mark = state[item.id].selected;
            }
        }, true);
        this.paint();
    };
    Tree.prototype.toggle = function (id) {
        var item = this.data.getItem(id);
        if (item.$autoload) {
            this.data.loadItems(id);
            this.data.update(id, {
                $autoload: false,
                opened: true,
            });
        }
        else {
            if (item.opened) {
                this.collapse(id);
            }
            else {
                this.expand(id);
            }
        }
    };
    Tree.prototype.getChecked = function () {
        var checked = [];
        this.data.eachChild(this._root, function (item) {
            if (item.$mark === types_1.SelectStatus.selected) {
                checked.push(item.id);
            }
        });
        return checked;
    };
    Tree.prototype.checkItem = function (id) {
        this._updateItemCheck(id, types_1.SelectStatus.selected);
    };
    Tree.prototype.collapse = function (id) {
        if (this.data.haveItems(id)) {
            if (!this.events.fire(types_1.TreeEvents.beforeCollapse, [id])) {
                return;
            }
            this.data.update(id, { opened: false });
            this.events.fire(types_1.TreeEvents.afterCollapse, [id]);
        }
    };
    Tree.prototype.collapseAll = function () {
        var _this = this;
        this.data.eachChild(this._root, function (_a) {
            var id = _a.id;
            return _this.collapse(id);
        }, true);
    };
    Tree.prototype.expand = function (id) {
        if (this.data.haveItems(id)) {
            if (!this.events.fire(types_1.TreeEvents.beforeExpand, [id])) {
                return;
            }
            this.data.update(id, { opened: true });
            this.events.fire(types_1.TreeEvents.afterExpand, [id]);
        }
    };
    Tree.prototype.expandAll = function () {
        var _this = this;
        this.data.eachChild(this._root, function (_a) {
            var id = _a.id;
            return _this.expand(id);
        }, true);
    };
    Tree.prototype.uncheckItem = function (id) {
        this._updateItemCheck(id, types_1.SelectStatus.unselected);
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Tree.prototype.close = function (id) {
        this.collapse(id);
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Tree.prototype.closeAll = function () {
        this.collapseAll();
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Tree.prototype.open = function (id) {
        this.expand(id);
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Tree.prototype.openAll = function () {
        this.expandAll();
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Tree.prototype.unCheckItem = function (id) {
        this.uncheckItem(id);
    };
    Tree.prototype._draw = function () {
        this._getRightPos();
        var items = this._drawItems(this.data.getRoot());
        return dom_1.el("ul", __assign({ class: "dhx_widget dhx_tree" +
                (!this._isSelectionActive ? " dhx_tree--no-selection " : "") +
                (this.config.css ? " " + this.config.css : ""), dhx_widget_id: this._uid }, this._handlers), items);
    };
    Tree.prototype._initEvents = function () {
        var _this = this;
        this.data.events.on(ts_data_1.DataEvents.change, function (id, status, obj) {
            if (status === "remove") {
                _this._updateParents(obj.parent, true);
            }
            if (status === "add") {
                _this._updateParents(id);
            }
            _this.paint();
        });
        this._editor.events.on(Editor_1.EditorEvents.begin, function (id) {
            if (id === _this._uid) {
                KeyNavigation_1.keyNavigation.block(true);
            }
        });
        this._editor.events.on(Editor_1.EditorEvents.end, function (target, id, value) {
            if (!_this.events.fire(types_1.TreeEvents.beforeEditEnd, [value, id])) {
                return false;
            }
            if (_this._uid === target) {
                _this.data.update(id, { $edit: false, value: value });
            }
            KeyNavigation_1.keyNavigation.block(false);
            _this.events.fire(types_1.TreeEvents.afterEditEnd, [value, id]);
        });
        this.events.on(ts_data_1.DragEvents.beforeDrag, function (_a, _events, ghost) {
            var start = _a.start;
            var item = _this.data.getItem(start);
            var isFolder = _this.config.isFolder ? _this.config.isFolder(item) : _this.data.haveItems(item.id);
            var iconType = getItemIconType(isFolder, item.opened);
            var icon = (item.icon || _this.config.icon)[iconType] || _this.config.icon[iconType];
            ghost.innerHTML = "<div class=\"dhx_tree-list-item__icon " + icon + "\"></div><span class=\"dhx_tree-list-item__text\">" + (item.text ||
                item.value) + "</span>";
        });
        this.events.on(ts_data_1.DragEvents.canDrop, function (_a) {
            var target = _a.target, dropPosition = _a.dropPosition;
            var dropStatus;
            if (_this.config.dropBehaviour === "complex") {
                if (dropPosition === "top") {
                    dropStatus = "dhx_tree-drop--top";
                }
                else if (dropPosition === "bottom") {
                    dropStatus = "dhx_tree-drop--bottom";
                }
                else {
                    dropStatus = "dhx_tree-drop--in-folder";
                }
            }
            else {
                dropStatus =
                    _this.config.dropBehaviour === "child"
                        ? "dhx_tree-drop--in-folder"
                        : "dhx_tree-drop--bottom";
            }
            if (_this.data.exists(target)) {
                _this.data.update(target, { $drophere: dropStatus }, true);
            }
            _this.paint();
        });
        this.events.on(ts_data_1.DragEvents.cancelDrop, function (_a) {
            var target = _a.target;
            if (_this.data.exists(target)) {
                _this.data.update(target, { $drophere: null }, true);
            }
        });
        this.events.on(ts_data_1.DragEvents.afterDrop, function (_a) {
            var target = _a.target, dropPosition = _a.dropPosition;
            if (_this.config.dropBehaviour === "child" ||
                (_this.config.dropBehaviour === "complex" && dropPosition === "in")) {
                _this.expand(target);
            }
        });
        this.events.on(ts_data_1.DragEvents.dragStart, function () {
            _this._isSelectionActive = false;
            _this.paint();
        });
        this.events.on(ts_data_1.DragEvents.afterDrag, function () {
            _this._isSelectionActive = true;
            _this.paint();
        });
        this.events.on(types_1.TreeEvents.itemClick, function (id) {
            _this._focusId = id;
            _this.paint();
        });
    };
    Tree.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onmouseleave: function (e) {
                ts_data_1.dragManager._cancelCanDrop(e);
            },
            onclick: function (e) {
                var id = html_1.locate(e);
                if (!id) {
                    return;
                }
                if (e.target.classList.contains("dhx_tree-toggle-button")) {
                    _this.toggle(id);
                    return;
                }
                if (e.target.classList.contains("dhx_tree-checkbox")) {
                    var item = _this.data.getItem(id);
                    if (item.$mark === types_1.SelectStatus.unselected) {
                        _this.checkItem(id);
                    }
                    else {
                        _this.uncheckItem(id);
                    }
                    return;
                }
                _this.events.fire(types_1.TreeEvents.itemClick, [id, e]);
                if (_this.data.exists(id)) {
                    _this.selection.add(id);
                }
            },
            ondblclick: function (e) {
                _this._dblClick(e);
            },
            ondragstart: function (e) {
                e.preventDefault();
            },
            onmousedown: function (e) {
                _this._dragStart(e);
            },
            ontouchstart: function (e) {
                _this._touch.timer = setTimeout(function () {
                    _this._dragStart(e);
                }, _this._touch.duration);
                if (!_this._touch.timeStamp) {
                    _this._touch.timeStamp = +e.timeStamp.toFixed();
                }
                else {
                    var doubleTap = _this._touch.dblDuration >= _this._touch.timeStamp - +e.timeStamp.toFixed();
                    if (doubleTap) {
                        _this._dblClick(e);
                    }
                    _this._touch.timeStamp = null;
                }
                setTimeout(function () {
                    _this._touch.timeStamp = null;
                }, _this._touch.dblDuration);
            },
            ontouchmove: function (e) {
                _this._touch.start && e.preventDefault();
                _this._clearTouchTimer();
            },
            ontouchend: function () {
                _this._touch.start = false;
                _this._clearTouchTimer();
            },
            oncontextmenu: function (e) {
                var id = html_1.locate(e);
                if (!id) {
                    return;
                }
                _this.events.fire(types_1.TreeEvents.itemRightClick, [id, e]);
                _this.events.fire(types_1.TreeEvents.itemContextMenu, [id, e]); // TODO: remove suite_7.0
            },
        };
    };
    Tree.prototype._dblClick = function (e) {
        var id = html_1.locate(e);
        if (!id) {
            return;
        }
        this.events.fire(types_1.TreeEvents.itemDblClick, [id, e]);
        if (this.config.editable) {
            this.editItem(id);
        }
    };
    Tree.prototype._clearTouchTimer = function () {
        if (this._touch.timer) {
            clearTimeout(this._touch.timer);
            this._touch.timer = null;
        }
    };
    Tree.prototype._dragStart = function (e) {
        if (this.config.dragMode && this.config.dragMode !== "target") {
            if (this._editor.isEditable()) {
                return;
            }
            this._touch.start = true;
            ts_data_1.dragManager.onMouseDown(e);
        }
    };
    Tree.prototype._getRightPos = function (id, level) {
        if (level === void 0) { level = 0; }
        if (!id) {
            var root_1 = this.data.getRoot();
            var items = this.data.findAll(function (i) { return i.parent === root_1; });
            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                var item_1 = items_1[_i];
                return this._getRightPos(item_1.id, level);
            }
        }
        var item = this.data.getItem(id);
        if (!item) {
            return;
        }
        this._right = level;
        if (this.data.haveItems(item.id) && item.opened) {
            for (var _a = 0, _b = item.items; _a < _b.length; _a++) {
                var child = _b[_a];
                this._getRightPos(child.id, level + 1);
            }
        }
    };
    Tree.prototype._drawItems = function (parent, level) {
        var _this = this;
        if (level === void 0) { level = 0; }
        return this.data.map(function (item) {
            if (!item) {
                return;
            }
            var toggleButton;
            var childs;
            var select;
            var isFolder = _this.config.isFolder ? _this.config.isFolder(item) : false;
            if (item.$autoload || _this.data.haveItems(item.id)) {
                isFolder = true;
                toggleButton = dom_1.el("div", { class: "dxi dxi-menu-right dhx_tree-toggle-button" }, "");
                if (item.opened) {
                    toggleButton = dom_1.el("div", {
                        class: "dxi dxi-menu-down dhx_tree-toggle-button dhx_tree-toggle-button--open",
                    }, "");
                    childs = _this._drawItems(item.id, level + 1);
                }
            }
            if (item.checkbox) {
                var className = item.$mark === types_1.SelectStatus.indeterminate
                    ? "dxi-minus-box"
                    : item.$mark === types_1.SelectStatus.selected
                        ? "dxi-checkbox-marked"
                        : "dxi-checkbox-blank-outline";
                select = dom_1.el("div", {
                    class: "dhx_tree-checkbox dxi " + className,
                });
            }
            var iconType = getItemIconType(isFolder, item.opened);
            var icon = (item.icon || _this.config.icon)[iconType] || _this.config.icon[iconType];
            var itemValue;
            if (item.$edit) {
                itemValue = _this._editor.edit(_this._uid, __assign({ item: item }, item.$editConfig));
            }
            else {
                itemValue = dom_1.el("span", { class: "dhx_tree-list-item__text" }, item.text || item.value);
            }
            if (isFolder) {
                return dom_1.el("li", {
                    class: "dhx_tree-list-item dhx_tree-list-item--parent" +
                        (item.css ? " " + item.css : ""),
                    dhx_id: item.id,
                    _key: item.id,
                }, [
                    dom_1.el("div.dhx_tree-folder", {
                        class: (item.id === _this._focusId ? " dhx_tree-folder--focused" : "") +
                            (item.$selected ? " dhx_tree-folder--selected" : "") +
                            (item.$drophere ? " " + item.$drophere : ""),
                        style: {
                            left: -getSelectionIndent(level) + "px",
                            right: -getSelectionIndent(_this._right) + "px",
                            "margin-left": getSelectionIndent(level) + "px",
                        },
                    }, [
                        toggleButton,
                        dom_1.el("div.dhx_tree-list-item__content", [
                            select,
                            dom_1.el("div", { class: "dhx_tree-list-item__icon " + icon }),
                            itemValue,
                        ]),
                    ]),
                    childs && dom_1.el("ul.dhx_tree-list", childs),
                ]);
            }
            else {
                return dom_1.el("li", {
                    class: "dhx_tree-list__item dhx_tree-list-item" +
                        (item.id === _this._focusId ? " dhx_tree-list-item--focused" : "") +
                        (item.$selected ? " dhx_tree-list-item--selected" : "") +
                        (item.$drophere ? " " + item.$drophere : "") +
                        (isFolder ? "dhx_tree-list-item--folder" : ""),
                    style: {
                        left: -getSelectionIndent(level) + "px",
                        right: -getSelectionIndent(_this._right) + "px",
                        "margin-left": getSelectionIndent(level) + "px",
                    },
                    dhx_id: item.id,
                    level: level,
                }, [
                    toggleButton,
                    dom_1.el("div", {
                        class: "dhx_tree-list-item__content",
                    }, [select, dom_1.el("div", { class: "dhx_tree-list-item__icon " + icon }), itemValue]),
                ]);
            }
        }, parent, false);
    };
    Tree.prototype._updateItemCheck = function (id, status) {
        this.data.update(id, { $mark: status }, true);
        this.data.eachChild(id, function (obj) { return (obj.$mark = status); }); // mark all childs
        this._updateParents(id);
    };
    Tree.prototype._updateParents = function (id, self) {
        var _this = this;
        if (self === void 0) { self = false; }
        if (id === this._root) {
            return;
        }
        this.data.eachParent(id, function (obj) {
            var selected = 0;
            var unselected = 0;
            _this.data.eachChild(obj.id, function (child) {
                if (!child.checkbox) {
                    return;
                }
                switch (child.$mark) {
                    case types_1.SelectStatus.unselected:
                        unselected++;
                        break;
                    case types_1.SelectStatus.selected:
                        selected++;
                        break;
                    default:
                        break;
                }
            }, true);
            if (selected !== 0 && unselected !== 0) {
                obj.$mark = types_1.SelectStatus.indeterminate;
            }
            else if (selected === 0 && unselected !== 0) {
                obj.$mark = types_1.SelectStatus.unselected;
            }
            else {
                obj.$mark = types_1.SelectStatus.selected;
            }
        }, self);
    };
    return Tree;
}(view_1.View));
exports.Tree = Tree;


/***/ }),

/***/ "../ts-tree/sources/types.ts":
/*!***********************************!*\
  !*** ../ts-tree/sources/types.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SelectStatus;
(function (SelectStatus) {
    SelectStatus[SelectStatus["unselected"] = 0] = "unselected";
    SelectStatus[SelectStatus["selected"] = 1] = "selected";
    SelectStatus[SelectStatus["indeterminate"] = 2] = "indeterminate";
})(SelectStatus = exports.SelectStatus || (exports.SelectStatus = {}));
var TreeEvents;
(function (TreeEvents) {
    TreeEvents["itemClick"] = "itemclick";
    TreeEvents["itemDblClick"] = "itemdblclick";
    TreeEvents["itemRightClick"] = "itemrightclick";
    TreeEvents["beforeCollapse"] = "beforeCollapse";
    TreeEvents["afterCollapse"] = "afterCollapse";
    TreeEvents["beforeExpand"] = "beforeExpand";
    TreeEvents["afterExpand"] = "afterExpand";
    TreeEvents["beforeEditStart"] = "beforeEditStart";
    TreeEvents["afterEditStart"] = "afterEditStart";
    TreeEvents["beforeEditEnd"] = "beforeEditEnd";
    TreeEvents["afterEditEnd"] = "afterEditEnd";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    TreeEvents["itemContextMenu"] = "itemcontextmenu";
})(TreeEvents = exports.TreeEvents || (exports.TreeEvents = {}));


/***/ }),

/***/ "../ts-treegrid/index.ts":
/*!*******************************!*\
  !*** ../ts-treegrid/index.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/TreeGrid */ "../ts-treegrid/sources/TreeGrid.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-treegrid/sources/types.ts"));
__export(__webpack_require__(/*! ./sources/TreeGridCollection */ "../ts-treegrid/sources/TreeGridCollection.ts"));


/***/ }),

/***/ "../ts-treegrid/sources/TreeGrid.ts":
/*!******************************************!*\
  !*** ../ts-treegrid/sources/TreeGrid.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ts_grid_1 = __webpack_require__(/*! @dhx/ts-grid */ "../ts-grid/index.ts");
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var TreeGridCollection_1 = __webpack_require__(/*! ./TreeGridCollection */ "../ts-treegrid/sources/TreeGridCollection.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-treegrid/sources/types.ts");
var defaultGroupTemplate = function (groupName, group) {
    return (groupName || "") + " (" + group.length + ")";
};
var groupRender = function (row, config) {
    return ts_grid_1.getTreeCell(config.groupTitleTemplate(row.$groupName, row.items), row, { id: "$groupName", width: "100%", $cellCss: {} }, config);
};
var TreeGrid = /** @class */ (function (_super) {
    __extends(TreeGrid, _super);
    function TreeGrid(container, config) {
        var _this = this;
        // [dirty]
        config.keyNavigation = false;
        config.multiselection = false;
        _this = _super.call(this, container, config) || this;
        // [dirty]
        if (!_this.config.dropBehaviour) {
            _this.config.dropBehaviour = "sibling";
        }
        _this.config.type = "tree";
        return _this;
    }
    TreeGrid.prototype.scrollTo = function (row, col) {
        var colInd = core_1.findIndex(this.config.columns, function (obj) { return obj.id === col; });
        var fixedColsWidth = this.config.splitAt
            ? this.config.columns.slice(0, this.config.splitAt).reduce(function (total, c) { return (total += c.$width); }, 0)
            : 0;
        var x = this.config.columns.slice(0, colInd).reduce(function (total, c) { return (total += c.$width); }, 0) -
            fixedColsWidth;
        var y = this.data.getPlainIndex(row) * this.config.rowHeight;
        var scrollState = this.getScrollState();
        var gridRight = this.config.width + scrollState.x;
        var gridBottom = this.config.height + scrollState.y - this.config.headerRowHeight * this.config.$headerLevel;
        var cellTop = y - scrollState.y - this.config.rowHeight;
        var cellLeft = x - scrollState.x - this.config.columns[colInd].$width;
        var cellBottom = y + this.config.rowHeight * 2 + 17 - gridBottom;
        var cellRight = x + this.config.columns[colInd].$width * 2 + 17 - gridRight;
        var scrollTop = cellTop > 0 && cellBottom < 0 ? 0 : cellTop < 0 ? cellTop : cellBottom;
        var scrollLeft = cellLeft > 0 && cellRight < 0 ? 0 : cellLeft < 0 ? cellLeft : cellRight;
        this.scroll(scrollLeft + scrollState.x, scrollTop + scrollState.y);
    };
    TreeGrid.prototype.expand = function (id) {
        if (this.data.haveItems(id)) {
            if (!this.events.fire(types_1.TreeGridEvents.beforeExpand, [id])) {
                return;
            }
            this.data.update(id, { $opened: true });
            this.events.fire(types_1.TreeGridEvents.afterExpand, [id]);
        }
    };
    TreeGrid.prototype.collapse = function (id) {
        if (this.data.haveItems(id)) {
            if (!this.events.fire(types_1.TreeGridEvents.beforeCollapse, [id])) {
                return;
            }
            this.data.update(id, { $opened: false });
            this.events.fire(types_1.TreeGridEvents.afterCollapse, [id]);
        }
    };
    TreeGrid.prototype.expandAll = function () {
        var _this = this;
        this.data.eachChild(this.data.getRoot(), function (_a) {
            var id = _a.id;
            return _this.expand(id);
        });
    };
    TreeGrid.prototype.collapseAll = function () {
        var _this = this;
        this.data.eachChild(this.data.getRoot(), function (_a) {
            var id = _a.id;
            return _this.collapse(id);
        });
    };
    TreeGrid.prototype.adjustColumnWidth = function (id, adjust) {
        var _this = this;
        if (adjust === void 0) { adjust = true; }
        var index = core_1.findIndex(this.config.columns, function (c) { return c.id === id; });
        var col = this.config.columns[index];
        var widthArr = [];
        if (adjust === "header" || adjust === true) {
            col.header.forEach(function (item) {
                widthArr.push(html_1.getStrSize(ts_grid_1.removeHTMLTags(item.text)).width + (ts_grid_1.isSortable(_this.config, col) ? 40 : 20));
            });
        }
        if (adjust === "data" || adjust === true) {
            this.data.map(function (row) {
                if (typeof row[col.id] === "string" || typeof row[col.id] === "number") {
                    widthArr.push(html_1.getStrSize(ts_grid_1.removeHTMLTags(row[col.id])).width +
                        (index === 0 ? _this.data.getMaxLevel() * 24 + 20 : 20));
                }
            });
        }
        this.config.$totalWidth = this.config.columns.reduce(function (t, column, i) {
            if (i === index) {
                column.$width = Math.max.apply(Math, widthArr);
            }
            return (t += column.hidden ? 0 : column.$width);
        }, 0);
        this.paint();
    };
    TreeGrid.prototype.groupBy = function (property) {
        var _this = this;
        this.ungroup();
        this.config.groupTitleTemplate = this.config.groupTitleTemplate || defaultGroupTemplate;
        this._pregroupData = this.data.serialize();
        var grouppedData = this._groupBy(this.data.serialize(), property);
        this.data.parse(grouppedData);
        grouppedData.forEach(function (i) {
            _this.addRowCss(i.id, "dhx_tree-cell_group-title");
        });
    };
    TreeGrid.prototype.ungroup = function () {
        if (this._pregroupData) {
            this.data.parse(this._pregroupData);
        }
    };
    TreeGrid.prototype.showRow = function (id) {
        var _this = this;
        if (!id) {
            return;
        }
        id = id.toString();
        var row = this.data.getItem(id);
        if (!row || !row.hidden) {
            return;
        }
        if (!this.events.fire(ts_grid_1.GridEvents.beforeRowShow, [row]))
            return;
        this.data.update(id, { hidden: false, wasHidden: false });
        this.data.restoreOrder();
        this.data.eachChild(id, function (i) {
            if (!i.wasHidden) {
                _this.data.update(i.id, { hidden: false });
            }
        });
        this.data.filter(function (i) { return !i.hidden; });
        this.events.fire(ts_grid_1.GridEvents.afterRowShow, [row]);
    };
    TreeGrid.prototype.hideRow = function (id) {
        var _this = this;
        if (!id) {
            return;
        }
        id = id.toString();
        var row = this.data.getItem(id);
        if (!row || row.hidden) {
            return;
        }
        if (!this.events.fire(ts_grid_1.GridEvents.beforeRowShow, [row]))
            return;
        this.data.update(id, { hidden: true, wasHidden: true });
        this.data.eachChild(id, function (i) { return _this.data.update(i.id, { hidden: true }); });
        this.data.filter(function (i) { return !i.hidden; });
        this.events.fire(ts_grid_1.GridEvents.afterRowShow, [row]);
    };
    TreeGrid.prototype._createCollection = function (prep) {
        this.data = new TreeGridCollection_1.TreeGridCollection({
            prep: prep,
        }, this.events);
    };
    TreeGrid.prototype._checkColumns = function () {
        _super.prototype._checkColumns.call(this);
    };
    TreeGrid.prototype._getRowIndex = function (rowId) {
        return core_1.findIndex(this.data.serialize(), function (obj) { return obj.id === rowId; });
    };
    TreeGrid.prototype._parseColumns = function () {
        _super.prototype._parseColumns.call(this);
    };
    TreeGrid.prototype._setEventHandlers = function () {
        var _this = this;
        _super.prototype._setEventHandlers.call(this);
        this.events.on(ts_grid_1.GridEvents.expand, function (id) {
            var item = _this.data.getItem(id);
            if (item.$opened) {
                _this.collapse(id);
            }
            else {
                _this.expand(id);
            }
        });
        this.events.detach(ts_grid_1.GridEvents.filterChange, this);
        this.events.on(ts_grid_1.GridEvents.filterChange, function (val, colId, filter) {
            _this.data.filter();
            if (val) {
                _this.data.filter({
                    by: colId,
                    match: val,
                    compare: _this.content[filter].match,
                });
            }
        });
        // TODO: remove suite_7.0
        this.events.detach(ts_grid_1.GridEvents.headerInput, this);
        // TODO: remove suite_7.0
        this.events.on(ts_grid_1.GridEvents.headerInput, function (val, colId, filter) {
            _this.data.filter();
            if (val) {
                _this.data.filter({
                    by: colId,
                    match: val,
                    compare: _this.content[filter].match,
                });
            }
        });
    };
    TreeGrid.prototype._groupBy = function (data, columnId) {
        var groups = {};
        data.reduce(function (acc, item) {
            var groupName = typeof columnId === "string" ? item[columnId] && item[columnId].toString() : columnId(item);
            if (!acc[groupName]) {
                acc[groupName] = [];
            }
            acc[groupName].push(item);
            return acc;
        }, groups);
        return Object.entries(groups).map(function (_a) {
            var key = _a[0], items = _a[1];
            items.forEach(function (i) {
                i.parent = "$group::" + key;
            });
            return {
                id: "$group::" + key,
                $groupName: key,
                $customRender: groupRender,
                items: items,
            };
        });
    };
    return TreeGrid;
}(ts_grid_1.ProGrid));
exports.TreeGrid = TreeGrid;


/***/ }),

/***/ "../ts-treegrid/sources/TreeGridCollection.ts":
/*!****************************************************!*\
  !*** ../ts-treegrid/sources/TreeGridCollection.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var TreeGridCollection = /** @class */ (function (_super) {
    __extends(TreeGridCollection, _super);
    function TreeGridCollection(config, events) {
        return _super.call(this, config, events) || this;
    }
    TreeGridCollection.prototype.eachChild = function (id, cb, direct, checkItem) {
        if (direct === void 0) { direct = true; }
        checkItem = checkItem || (function (item) { return item.$opened !== false; });
        _super.prototype.eachChild.call(this, id, cb, direct, checkItem);
    };
    TreeGridCollection.prototype.getMaxLevel = function () {
        var _this = this;
        var maxLevel = 1;
        this.map(function (el) {
            var level = _this.getLevel(el.id);
            maxLevel = Math.max(level, maxLevel);
        });
        return maxLevel;
    };
    TreeGridCollection.prototype.getLevel = function (id) {
        var level = 0;
        this.eachParent(id, function () {
            level++;
        });
        return level;
    };
    TreeGridCollection.prototype.serialize = function (driver) {
        var _this = this;
        if (driver === void 0) { driver = ts_data_1.DataDriver.json; }
        var data = [];
        this.eachChild(this.getRoot(), function (el) {
            if (!el) {
                return;
            }
            var cell = __assign(__assign({}, el), { $level: _this.getLevel(el.id), $items: _this.haveItems(el.id) });
            if (_this.haveItems(el.id) && el.$opened === undefined) {
                el.$opened = cell.$opened = true;
            }
            data.push(cell);
        });
        var dataDriver = ts_data_1.toDataDriver(driver);
        if (dataDriver) {
            return dataDriver.serialize(data);
        }
    };
    TreeGridCollection.prototype.getPlainIndex = function (id) {
        return Object.keys(this._pull).indexOf(id);
    };
    TreeGridCollection.prototype.map = function (cb, parent, direct) {
        if (parent === void 0) { parent = this._root; }
        if (direct === void 0) { direct = true; }
        var result = [];
        if (!this.haveItems(parent)) {
            return result;
        }
        for (var i = 0; i < this._childs[parent].length; i++) {
            result.push(cb.call(this, this._childs[parent][i], i));
            if (direct) {
                if (this._childs[parent][i].$opened) {
                    var childResult = this.map(cb, this._childs[parent][i].id, direct);
                    result = result.concat(childResult);
                }
            }
        }
        return result;
    };
    // [todo]
    TreeGridCollection.prototype.getId = function (index) {
        return Object.keys(this._pull)[index];
    };
    TreeGridCollection.prototype._parse_data = function (data, parent) {
        if (parent === void 0) { parent = this._root; }
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var obj = data_1[_i];
            if (this.config.init) {
                obj = this.config.init(obj);
            }
            obj.id = obj.id ? obj.id.toString() : core_1.uid();
            obj.parent = obj.parent ? obj.parent.toString() : parent;
            this._pull[obj.id] = obj;
            if (!this._childs[obj.parent]) {
                this._childs[obj.parent] = [];
            }
            this._childs[obj.parent].push(obj);
            obj.$level = this.getLevel(obj.id);
            if (obj.items && obj.items instanceof Object) {
                obj.$opened = true;
                this._parse_data(obj.items, obj.id);
            }
        }
        this._checkItems();
    };
    TreeGridCollection.prototype._checkItems = function () {
        var _this = this;
        this.eachChild(this._root, function (item) {
            item.$items = item.$opened = _this.haveItems(item.id);
        });
    };
    return TreeGridCollection;
}(ts_data_1.TreeCollection));
exports.TreeGridCollection = TreeGridCollection;


/***/ }),

/***/ "../ts-treegrid/sources/types.ts":
/*!***************************************!*\
  !*** ../ts-treegrid/sources/types.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TreeGridEvents;
(function (TreeGridEvents) {
    TreeGridEvents["beforeCollapse"] = "beforeCollapse";
    TreeGridEvents["afterCollapse"] = "afterCollapse";
    TreeGridEvents["beforeExpand"] = "beforeExpand";
    TreeGridEvents["afterExpand"] = "afterExpand";
})(TreeGridEvents = exports.TreeGridEvents || (exports.TreeGridEvents = {}));


/***/ }),

/***/ "../ts-vault/index.ts":
/*!****************************!*\
  !*** ../ts-vault/index.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Uploader */ "../ts-vault/sources/Uploader.ts"));
__export(__webpack_require__(/*! ./sources/Vault */ "../ts-vault/sources/Vault.ts"));
__export(__webpack_require__(/*! ./sources/types */ "../ts-vault/sources/types.ts"));


/***/ }),

/***/ "../ts-vault/sources/ProgressBar.ts":
/*!******************************************!*\
  !*** ../ts-vault/sources/ProgressBar.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-vault/sources/locales/en.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-vault/sources/types.ts");
var ProgressBar = /** @class */ (function (_super) {
    __extends(ProgressBar, _super);
    function ProgressBar(events, config) {
        var _this = _super.call(this, null, config) || this;
        _this.events = events;
        _this._progress = 0;
        var render = function () { return _this._draw(); };
        _this.mount(null, dom_1.create({
            render: render,
        }));
        _this._abortUpload = function () {
            _this.events.fire(types_1.ProgressBarEvents.cancel);
        };
        return _this;
    }
    ProgressBar.prototype.setState = function (progress, extra) {
        this._progress = progress;
        if (this.config.template) {
            this._progressText = this.config.template(progress, extra);
        }
        else {
            this._progressText = this._progress.toFixed(1) + "%";
        }
        this.paint();
    };
    ProgressBar.prototype._draw = function () {
        return dom_1.el(".progress-bar", {
            _key: this._uid,
        }, [
            dom_1.el(".progress-indicator", {
                style: {
                    width: this._progress + "%",
                },
            }),
            dom_1.el(".progress-text", {
                ".innerHTML": this._progressText,
            }),
            dom_1.el("button", {
                class: "dhx_btn dhx_btn--flat dhx_btn_small action-abort-all",
                onclick: this._abortUpload,
            }, en_1.default.cancel),
        ]);
    };
    return ProgressBar;
}(view_1.View));
exports.ProgressBar = ProgressBar;


/***/ }),

/***/ "../ts-vault/sources/ReadStackPreview.ts":
/*!***********************************************!*\
  !*** ../ts-vault/sources/ReadStackPreview.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ReadStackPreview = /** @class */ (function () {
    function ReadStackPreview(data) {
        this._readerStack = [];
        this._isActive = false;
        this._data = data;
    }
    ReadStackPreview.prototype.add = function (fileWrapper, wait) {
        if (wait === void 0) { wait = false; }
        this._readerStack.push(fileWrapper);
        if (!wait) {
            this.read();
        }
    };
    ReadStackPreview.prototype.read = function () {
        var _this = this;
        if (!this._readerStack.length || this._isActive) {
            return;
        }
        var fileWrapper = this._readerStack.shift();
        this._isActive = true;
        var reader = new FileReader();
        reader.readAsDataURL(fileWrapper.file);
        reader.onload = function (e) {
            var image = new Image();
            image.src = e.target.result;
            image.onload = function () {
                if (_this._data.exists(fileWrapper.id)) {
                    _this._data.update(fileWrapper.id, { image: image });
                }
                _this._isActive = false;
                _this.read();
            };
        };
        reader.onerror = function () {
            _this._isActive = false;
            _this.read();
        };
    };
    ReadStackPreview.prototype.stop = function () {
        this._readerStack = [];
    };
    return ReadStackPreview;
}());
exports.ReadStackPreview = ReadStackPreview;


/***/ }),

/***/ "../ts-vault/sources/Uploader.ts":
/*!***************************************!*\
  !*** ../ts-vault/sources/Uploader.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/unbound-method */
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-vault/sources/types.ts");
var Uploader = /** @class */ (function () {
    function Uploader(config, data, events) {
        if (config === void 0) { config = {}; }
        this.config = core_1.extend({
            autosend: true,
            updateFromResponse: true,
            fieldName: "file",
        }, config);
        this.data = data || new ts_data_1.DataCollection();
        this.events = events || this.data.events;
        this.isActive = false;
        this._fileInput = document.createElement("input");
        this._fileInput.type = "file";
        this._fileInput.multiple = true;
        this._initEvents();
        this._dropAreas = new Map();
    }
    Uploader.prototype.selectFile = function () {
        this._fileInput.click();
    };
    Uploader.prototype.linkDropArea = function (element) {
        var _this = this;
        var node = html_1.toNode(element);
        var dragover = function (e) { return e.preventDefault(); };
        var drop = function (e) {
            e.preventDefault();
            _this.parseFiles(e.dataTransfer);
        };
        node.addEventListener("dragover", dragover);
        node.addEventListener("drop", drop);
        this._dropAreas.set(node, {
            dragover: dragover,
            drop: drop,
        });
    };
    Uploader.prototype.unlinkDropArea = function (element) {
        var _this = this;
        if (!element) {
            this._dropAreas.forEach(function (_, node) {
                _this._unlinkDropArea(node);
            });
            this._dropAreas.clear();
        }
        else {
            var node = html_1.toNode(element);
            this._unlinkDropArea(node);
            this._dropAreas.delete(node);
        }
    };
    Uploader.prototype.parseFiles = function (dataTransfer) {
        if (!dataTransfer.items || !dataTransfer.items[0] || !dataTransfer.items[0].webkitGetAsEntry) {
            var files = dataTransfer.files;
            for (var i = 0; i < files.length; i++) {
                this._addFile(files[i]);
            }
            if (this.config.autosend) {
                this.send();
            }
        }
        else {
            this._parseAsWebkitEntry(dataTransfer.items);
        }
    };
    Uploader.prototype.send = function (params) {
        var _this = this;
        if (this._uploadInfo && this.isActive) {
            // cancel two active sends
            return;
        }
        var all = this.data.findAll(function (item) { return item.status === types_1.FileStatus.queue || item.status === types_1.FileStatus.failed; });
        var files = all.filter(function (file) { return _this.events.fire(types_1.UploaderEvents.beforeUploadFile, [file]); });
        if (!files.length) {
            return;
        }
        this.isActive = true;
        this._uploadInfo = {
            files: files,
            count: files.length,
            size: files.reduce(function (s, f) { return s + f.file.size; }, 0),
        };
        this.events.fire(types_1.UploaderEvents.uploadBegin, [files]);
        this.events.fire(types_1.UploaderEvents.uploadProgress, [0, 0, this._uploadInfo.size]);
        if (this.config.singleRequest) {
            this._xhrSend(files, params);
        }
        else {
            for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
                var fileWrapper = files_1[_i];
                this._xhrSend([fileWrapper], params);
            }
        }
    };
    Uploader.prototype.abort = function (id) {
        if (!id) {
            if (!this._uploadInfo || !this._uploadInfo.files) {
                return;
            }
            for (var _i = 0, _a = this._uploadInfo.files; _i < _a.length; _i++) {
                var fileWrapper = _a[_i];
                this.abort(fileWrapper.id);
            }
            return;
        }
        else {
            var item = this.data.getItem(id);
            if (!item || !item.request || item.request.readyState === 4) {
                return;
            }
            item.request.abort();
        }
    };
    Uploader.prototype._unlinkDropArea = function (node) {
        var handlers = this._dropAreas.get(node);
        if (!handlers) {
            return;
        }
        var dragover = handlers.dragover, drop = handlers.drop;
        node.removeEventListener("dragover", dragover);
        node.removeEventListener("drop", drop);
    };
    Uploader.prototype._initEvents = function () {
        var _this = this;
        this._fileInput.addEventListener("change", function () {
            var files = _this._fileInput.files;
            for (var i = 0; i < files.length; i++) {
                _this._addFile(files[i]);
            }
            if (_this.config.autosend) {
                _this.send();
            }
            _this._fileInput.value = null; // clear file input after get info about files
        });
    };
    Uploader.prototype._xhrSend = function (fileWrappers, params) {
        var _this = this;
        var formData = this._createFormData(fileWrappers, params);
        var request = new XMLHttpRequest();
        for (var _i = 0, fileWrappers_1 = fileWrappers; _i < fileWrappers_1.length; _i++) {
            var fileWrapper = fileWrappers_1[_i];
            this.data.update(fileWrapper.id, {
                request: request,
                status: types_1.FileStatus.inprogress,
                progress: 0,
            });
        }
        request.open("POST", this.config.target);
        request.upload.onprogress = function (ev) {
            for (var _i = 0, fileWrappers_2 = fileWrappers; _i < fileWrappers_2.length; _i++) {
                var fileWrapper = fileWrappers_2[_i];
                _this.data.update(fileWrapper.id, {
                    progress: ev.loaded / ev.total,
                    status: types_1.FileStatus.inprogress,
                });
            }
            var current = _this._uploadInfo.files.reduce(function (tot, file) { return tot + file.size * file.progress; }, 0) || 0;
            var total = _this._uploadInfo.size;
            var progress = (current / _this._uploadInfo.size) * 100 || 0;
            _this.events.fire(types_1.UploaderEvents.uploadProgress, [progress, current, total]);
        };
        request.onloadend = function () {
            _this._uploadInfo.count = _this.config.singleRequest ? 0 : _this._uploadInfo.count - 1;
            var status = request.status === 200 ? types_1.FileStatus.uploaded : types_1.FileStatus.failed;
            var extra = request.status === 200 && request.response ? JSON.parse(request.response) : null;
            for (var _i = 0, fileWrappers_3 = fileWrappers; _i < fileWrappers_3.length; _i++) {
                var fileWrapper = fileWrappers_3[_i];
                _this.data.update(fileWrapper.id, { status: status });
                if (status === types_1.FileStatus.uploaded) {
                    if (_this.config.updateFromResponse && extra) {
                        if (_this.config.singleRequest && extra[fileWrapper.id]) {
                            _this.data.update(fileWrapper.id, extra[fileWrapper.id]);
                        }
                        else if (!_this.config.singleRequest) {
                            _this.data.update(fileWrapper.id, extra);
                        }
                    }
                    _this.events.fire(types_1.UploaderEvents.uploadFile, [fileWrapper, extra]);
                }
                else {
                    _this.events.fire(types_1.UploaderEvents.uploadFail, [fileWrapper]);
                }
            }
            if (_this._uploadInfo.count === 0) {
                _this.isActive = false;
                _this.events.fire(types_1.UploaderEvents.uploadComplete, [_this._uploadInfo.files]);
            }
        };
        request.send(formData);
    };
    Uploader.prototype._parseAsWebkitEntry = function (items) {
        var _this = this;
        var reads = [];
        for (var i = 0; i < items.length; i++) {
            var item = items[i].webkitGetAsEntry();
            reads.push(this._traverseFileTree(item));
        }
        Promise.all(reads).then(function () {
            if (_this.config.autosend) {
                _this.send();
            }
        });
    };
    Uploader.prototype._createFormData = function (fileWrappers, params) {
        var fieldName = this.config.fieldName;
        var formData = new FormData();
        var extraParams = this.config.params;
        if (params) {
            for (var key in params) {
                formData.append(key, params[key]);
            }
        }
        if (extraParams) {
            for (var key in extraParams) {
                formData.append(key, extraParams[key]);
            }
        }
        var brackets = fileWrappers.length > 1 ? "[]" : "";
        for (var _i = 0, fileWrappers_4 = fileWrappers; _i < fileWrappers_4.length; _i++) {
            var fileWrapper = fileWrappers_4[_i];
            formData.append(fieldName + brackets, fileWrapper.file, fileWrapper.file.name);
            formData.append(fieldName + "_fullname" + brackets, fileWrapper.path + fileWrapper.file.name);
            formData.append(fieldName + "_id" + brackets, fileWrapper.id);
        }
        return formData;
    };
    Uploader.prototype._addFile = function (file, path) {
        if (path === void 0) { path = ""; }
        var fileWrapper = {
            id: core_1.uid(),
            file: file,
            progress: 0,
            status: types_1.FileStatus.queue,
            src: null,
            path: path,
        };
        this.data.add(fileWrapper);
    };
    Uploader.prototype._traverseFileTree = function (item) {
        var _this = this;
        return new Promise(function (res) {
            var count = 0;
            var readDirectory = function (reader, path) {
                count++;
                reader.readEntries(function (entries) {
                    count--;
                    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
                        var entry = entries_1[_i];
                        // eslint-disable-next-line @typescript-eslint/no-use-before-define
                        readEntry(entry, path);
                    }
                    if (count === 0) {
                        res();
                    }
                });
            };
            var readEntry = function (entry, path) {
                if (entry.isFile) {
                    count++;
                    entry.file(function (file) {
                        count--;
                        _this._addFile(file, path);
                        if (count === 0) {
                            res();
                        }
                    });
                }
                else if (entry.isDirectory) {
                    var reader = entry.createReader();
                    readDirectory(reader, path + entry.name + "/");
                }
            };
            readEntry(item, "");
        });
    };
    return Uploader;
}());
exports.Uploader = Uploader;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promiz */ "../node_modules/promiz/promiz.js")))

/***/ }),

/***/ "../ts-vault/sources/Vault.ts":
/*!************************************!*\
  !*** ../ts-vault/sources/Vault.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var html_1 = __webpack_require__(/*! @dhx/ts-common/html */ "../ts-common/html.ts");
var scrollView_1 = __webpack_require__(/*! @dhx/ts-common/scrollView */ "../ts-common/scrollView.ts");
var view_1 = __webpack_require__(/*! @dhx/ts-common/view */ "../ts-common/view.ts");
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var ts_layout_1 = __webpack_require__(/*! @dhx/ts-layout */ "../ts-layout/index.ts");
var ts_message_1 = __webpack_require__(/*! @dhx/ts-message */ "../ts-message/index.ts");
var ts_toolbar_1 = __webpack_require__(/*! @dhx/ts-toolbar */ "../ts-toolbar/index.ts");
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-vault/sources/locales/en.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-vault/sources/types.ts");
var Uploader_1 = __webpack_require__(/*! ./Uploader */ "../ts-vault/sources/Uploader.ts");
var configs_1 = __webpack_require__(/*! ./configs */ "../ts-vault/sources/configs.ts");
var helper_1 = __webpack_require__(/*! ./helper */ "../ts-vault/sources/helper.ts");
var ProgressBar_1 = __webpack_require__(/*! ./ProgressBar */ "../ts-vault/sources/ProgressBar.ts");
var ReadStackPreview_1 = __webpack_require__(/*! ./ReadStackPreview */ "../ts-vault/sources/ReadStackPreview.ts");
var Vault = /** @class */ (function (_super) {
    __extends(Vault, _super);
    function Vault(container, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, null, core_1.extend({
            mode: types_1.VaultMode.list,
            toolbar: true,
            updateFromResponse: true,
            scaleFactor: 4,
            customScroll: true,
            uploader: {},
            progressBar: {},
        }, config)) || this;
        if (!_this.config.toolbar) {
            _this.config.uploader.autosend = true;
        }
        if (config.data) {
            _this.data = config.data;
            _this.events = config.data.events;
            _this.events.context = _this;
        }
        else {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.DataCollection({}, _this.events);
        }
        _this.data.config.init = function (obj) {
            obj.status = obj.status || types_1.FileStatus.uploaded;
            if (obj.file) {
                obj.size = obj.file.size;
                obj.name = obj.file.name;
            }
            else {
                obj.size = obj.size || 0;
                obj.name = obj.name || "";
            }
            if (_this.config.mode === types_1.VaultMode.grid && obj.file && helper_1.isImage(obj)) {
                _this._readStack.add(obj, _this.uploader.config.autosend);
            }
            return obj;
        };
        _this._readStack = new ReadStackPreview_1.ReadStackPreview(_this.data);
        _this.uploader = new Uploader_1.Uploader(_this.config.uploader, _this.data, _this.events);
        _this._scrollView = new scrollView_1.ScrollView(function () { return _this._vaultView.getRootView(); });
        _this._progressBar = new ProgressBar_1.ProgressBar(_this.events, _this.config.progressBar);
        _this.events.on(types_1.UploaderEvents.uploadProgress, function (progress, current, total) {
            return _this._progressBar.setState(progress, { current: current, total: total });
        });
        _this._initHandlers();
        _this._initUI(container);
        _this._initEvents();
        return _this;
    }
    Vault.prototype.destructor = function () {
        this.toolbar.destructor();
        this._readStack.stop();
        this.uploader.unlinkDropArea();
        this.uploader.abort();
    };
    Vault.prototype.getRootView = function () {
        return this._layout.getRootView();
    };
    Vault.prototype._initUI = function (container) {
        var _this = this;
        var cfg = this.config.toolbar ? configs_1.layoutConfig : configs_1.layoutConfigWithoutTopbar;
        cfg.on = this._getDragEvents();
        var layout = (this._layout = new ts_layout_1.Layout(container, cfg));
        var toolbar = (this.toolbar = new ts_toolbar_1.Toolbar(null, {
            css: "vault-toolbar",
        }));
        this.toolbar.data.parse([
            {
                id: "add",
                tooltip: en_1.default.add,
                type: "button",
                icon: "dxi-plus",
            },
            {
                id: "upload",
                tooltip: en_1.default.upload,
                type: "button",
                icon: "dxi icon-upload",
            },
            {
                id: "spacer",
                type: "spacer",
            },
            {
                id: "remove-all",
                tooltip: en_1.default.clearAll,
                type: "button",
                icon: "dxi-delete-forever",
            },
        ]);
        this._hideUploadAndDeleteButtons();
        this._vaultView = view_1.toViewLike(dom_1.create({ render: function () { return _this._draw(); } }));
        if (this.config.toolbar) {
            layout.getCell("topbar").attach(toolbar);
        }
        layout.getCell("vault").attach(this._vaultView);
    };
    Vault.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onclick: {
                ".action-add": function () { return _this.uploader.selectFile(); },
                ".action-remove-file": function (e) {
                    var id = html_1.locate(e);
                    if (!id) {
                        return;
                    }
                    _this.data.update(id, { $toRemove: true });
                    setTimeout(function () {
                        _this.data.update(id, { $toRemove: false }, true);
                        _this.data.remove(id);
                    }, 200);
                },
            },
            onmouseover: {
                ".action-download": function (e) {
                    ts_message_1.tooltip(en_1.default.download, {
                        node: e.target,
                        position: ts_message_1.Position.bottom,
                    });
                },
                ".action-remove-file": function (e) {
                    ts_message_1.tooltip(en_1.default.clear, {
                        node: e.target,
                        position: ts_message_1.Position.bottom,
                    });
                },
                ".title-content, .dhx-file-name": function (e) {
                    var id = html_1.locate(e);
                    var item = _this.data.getItem(id);
                    ts_message_1.tooltip(item.name, {
                        node: e.target,
                        position: ts_message_1.Position.bottom,
                        css: "tooltip-light",
                    });
                },
            },
        };
    };
    Vault.prototype._getDragEvents = function () {
        var _this = this;
        var rect = {
            left: null,
            top: null,
            width: null,
            height: null,
        };
        return {
            dragleave: function (e) {
                if (!_this._canDrop) {
                    return;
                }
                if (e.pageX > rect.left + rect.width - 1 ||
                    e.pageX < rect.left ||
                    e.pageY > rect.top + rect.height - 1 ||
                    e.pageY < rect.top) {
                    _this._canDrop = false;
                    if (_this.config.toolbar) {
                        _this._layout.getCell("topbar").show();
                    }
                    _this._layout.config.css = "vault-layout";
                    _this._layout.paint();
                }
            },
            dragenter: function (e) {
                e.preventDefault();
                if (_this.uploader.isActive || _this._canDrop) {
                    return;
                }
                var types = e.dataTransfer.types;
                for (var _i = 0, types_2 = types; _i < types_2.length; _i++) {
                    var type = types_2[_i];
                    if (type !== "Files" && type !== "application/x-moz-file") {
                        _this._canDrop = false;
                        return;
                    }
                }
                _this._canDrop = true;
                var clientRect = _this.getRootView().node.el.getBoundingClientRect();
                rect.left = clientRect.left + window.pageXOffset;
                rect.top = clientRect.top + window.pageYOffset;
                rect.width = clientRect.width;
                rect.height = clientRect.height;
                _this._canDrop = true;
                if (_this.config.toolbar) {
                    _this._layout.getCell("topbar").hide();
                }
                _this._layout.config.css = "vault-layout dhx-dragin";
                _this._layout.paint();
            },
            dragover: function (e) {
                e.preventDefault();
            },
            drop: function (e) {
                e.preventDefault();
                if (!_this._canDrop) {
                    return;
                }
                var dataTransfer = e.dataTransfer;
                _this.uploader.parseFiles(dataTransfer);
                _this._canDrop = false;
                if (_this.config.toolbar) {
                    _this._layout.getCell("topbar").show();
                }
                _this._layout.config.css = "vault-layout";
                _this._layout.paint();
            },
        };
    };
    Vault.prototype._hideUploadAndDeleteButtons = function () {
        this.toolbar.hide(["upload", "remove-all"]);
    };
    Vault.prototype._showUploadAndDeleteButtons = function () {
        if (this.uploader.config.autosend) {
            this.toolbar.show("remove-all");
        }
        else {
            this.toolbar.show(["upload", "remove-all"]);
        }
    };
    Vault.prototype._initEvents = function () {
        var _this = this;
        this.data.events.on(ts_data_1.DataEvents.change, function () {
            if (!_this.data.getLength()) {
                _this._hideUploadAndDeleteButtons();
            }
            else {
                _this._showUploadAndDeleteButtons();
            }
            _this._vaultView.paint();
        });
        this.events.on(types_1.UploaderEvents.uploadBegin, function () {
            if (_this.config.toolbar) {
                _this._layout.getCell("topbar").attach(_this._progressBar);
            }
        });
        this.events.on(types_1.UploaderEvents.uploadComplete, function () {
            if (_this.config.mode === types_1.VaultMode.grid && _this.uploader.config.autosend) {
                _this._readStack.read();
            }
            if (_this.config.toolbar) {
                _this._layout.getCell("topbar").attach(_this.toolbar);
            }
        });
        this.toolbar.events.on(ts_toolbar_1.NavigationBarEvents.click, function (id) {
            switch (id) {
                case "add":
                    _this.uploader.selectFile();
                    break;
                case "remove-all":
                    _this.data.removeAll();
                    break;
                case "upload":
                    _this.uploader.send();
                    break;
            }
        });
        this.events.on(types_1.ProgressBarEvents.cancel, function () {
            _this.uploader.abort();
            _this._vaultView.paint();
        });
    };
    Vault.prototype._draw = function () {
        var isEmpty = !this.data.getLength();
        var files = this.config.mode === types_1.VaultMode.grid ? this._drawGrid() : this._drawList();
        return dom_1.el("div", __assign(__assign({ class: "vault dhx_widget" + (this._canDrop ? " drop-here" : "") }, this._handlers), { dhx_widget_id: this._uid }), [
            this._canDrop || isEmpty
                ? this._drawDropableArea()
                : this.config.customScroll
                    ? this._scrollView.render(files)
                    : files,
        ]);
    };
    Vault.prototype._getFileActions = function (file) {
        var defaultActions = [];
        var hoverActions = [];
        var actions = [dom_1.el(".dhx-default-actions", defaultActions), dom_1.el(".dhx-hover-actions", hoverActions)];
        if (file.status === types_1.FileStatus.inprogress) {
            return actions;
        }
        if (file.status !== types_1.FileStatus.failed && file.link) {
            var link = (this.config.downloadURL || "") + file.link;
            var downloadName = link
                .split("/")
                .pop()
                .split("?")[0];
            var download = dom_1.el("a", {
                download: downloadName,
                class: "download-link",
                href: link,
            }, [dom_1.el(".icon-btn.dxi.dxi-download.action-download")]);
            hoverActions.push(download);
        }
        var remove = dom_1.el(".icon-btn.dxi.dxi-delete-forever.action-remove-file");
        hoverActions.push(remove);
        if (file.status === types_1.FileStatus.failed) {
            var warn = dom_1.el(".dxi.dxi-alert-circle.warning-status");
            defaultActions.push(warn);
        }
        if (file.status === types_1.FileStatus.uploaded) {
            var uploadComplete = dom_1.el(".dxi.dxi-checkbox-marked-circle.uploaded-status");
            defaultActions.push(uploadComplete);
        }
        return actions;
    };
    Vault.prototype._drawList = function () {
        var _this = this;
        return dom_1.el(".dhx-files-block.dhx-webkit-scroll", this.data.map(function (item) {
            var isError = item.status === types_1.FileStatus.failed && item.request;
            var inProgress = item.status === types_1.FileStatus.inprogress;
            var inQueue = item.status === types_1.FileStatus.queue;
            var notUploaded = item.status !== types_1.FileStatus.uploaded;
            return dom_1.el("div", {
                class: "dhx-file-item" +
                    (item.$toRemove ? " to-remove" : "") +
                    (inQueue ? " in-queue" : ""),
                dhx_id: item.id,
                _key: item.id,
            }, [
                dom_1.el(".dhx-file-icon", [
                    dom_1.el("div", {
                        class: "dhx-file-type " +
                            helper_1.getFileClassName(item) +
                            (notUploaded ? " not-loaded" : ""),
                    }),
                ]),
                dom_1.el(".dhx-file-title", [
                    dom_1.el(".dhx-title-content", item.name),
                    dom_1.el(".dhx-file-info", [
                        isError && dom_1.el(".warn-message", item.request.statusText || en_1.default.error),
                        inProgress
                            ? dom_1.el(".progress-value", (item.progress * 100).toFixed(1) + "%")
                            : dom_1.el(".dhx-size" + ((isError && ".dhx-size-error") || ""), helper_1.getBasis(item.size)),
                    ]),
                ]),
                inProgress &&
                    dom_1.el(".dhx-download-progress", {
                        style: {
                            width: (item.progress * 100).toFixed(1) + "%",
                        },
                    }),
                !inProgress && dom_1.el(".dhx-file-action", _this._getFileActions(item)),
            ]);
        }));
    };
    Vault.prototype._drawDropableArea = function () {
        return dom_1.el(".dhx-dropable-area.drop-files-here", [
            dom_1.el(".dhx-big-icon-block", [
                dom_1.el(".dxi.icon-upload"),
            ]),
            !this._canDrop && dom_1.el(".drop-area-bold-text", en_1.default.dragAndDrop),
            !this._canDrop && dom_1.el(".drop-area-bold-text", en_1.default.filesOrFoldersHere),
            !this._canDrop && dom_1.el(".drop-area-light-text", en_1.default.or),
            !this._canDrop && dom_1.el("button.dhx_btn.dhx_btn--flat.dhx_btn--small.action-add", en_1.default.browse),
        ]);
    };
    Vault.prototype._drawGrid = function () {
        var _this = this;
        return dom_1.el("div", {
            class: "dhx-files-grid dhx-webkit-scroll",
        }, [
            dom_1.el(".dhx-grid-content", this.data.map(function (item) {
                var inProgress = item.status === types_1.FileStatus.inprogress;
                var inQueue = item.status === types_1.FileStatus.queue;
                var isError = item.status === types_1.FileStatus.failed;
                return dom_1.el("div", {
                    class: "dhx-file-grid-item" +
                        (inProgress ? " in-progress" : "") +
                        (item.$toRemove ? " to-remove" : "") +
                        (inQueue ? " in-queue" : "") +
                        (isError ? " failed" : ""),
                    dhx_id: item.id,
                    _key: item.id,
                }, [
                    dom_1.el(".dhx-preview-wrapper", __spreadArrays([
                        item.preview
                            ? dom_1.el(".dhx-server-file-preview", [dom_1.el("img", { src: item.preview })])
                            : item.image
                                ? dom_1.el("canvas", {
                                    width: 98 * _this.config.scaleFactor,
                                    height: 98 * _this.config.scaleFactor,
                                    _hooks: {
                                        didInsert: function (node) {
                                            var _a = helper_1.calculateCover(item.image), dx = _a.dx, dy = _a.dy, sx = _a.sx, sy = _a.sy, sHeight = _a.sHeight, sWidth = _a.sWidth;
                                            var ctx = node.el.getContext("2d");
                                            ctx.drawImage(item.image, sx, sy, sWidth, sHeight, dx, dy, 98 * _this.config.scaleFactor, 98 * _this.config.scaleFactor);
                                        },
                                    },
                                })
                                : dom_1.el("div", {
                                    class: "dhx-file-preview dhx-file-type " +
                                        helper_1.getFileClassName(item),
                                }),
                        inProgress && _this._drawCircle(item.progress)
                    ], _this._getFileActions(item), [
                        dom_1.el(".dhx-file-info", [
                            isError &&
                                dom_1.el(".warn-message", item.request.statusText || en_1.default.error),
                            !inProgress &&
                                dom_1.el(".dhx-size" + ((isError && ".dhx-size-error") || ""), helper_1.getBasis(item.size)),
                        ]),
                    ])),
                    dom_1.el(".dhx-file-name", helper_1.truncateWord(item.name)),
                ]);
            })),
        ]);
    };
    Vault.prototype._drawCircle = function (progress) {
        return dom_1.el(".progress-layout", [
            dom_1.el(".progress-amount", (progress * 100).toFixed(1) + "%"),
            dom_1.sv("svg", {
                xmlns: "http://www.w3.org/2000/svg",
                class: "progress-circle",
                viewBox: "0 0 60 60",
            }, [
                dom_1.sv("circle", {
                    cx: 30,
                    cy: 30,
                    r: 28,
                    "stroke-width": 4,
                    class: "progress-bar-background",
                }),
                dom_1.sv("circle.active-circle", {
                    cx: 30,
                    cy: 30,
                    r: 28,
                    "stroke-width": 4,
                    "stroke-dasharray": "175.9 175.9",
                    "stroke-dashoffset": (1 - progress) * 175.9,
                    class: "progress-bar-active",
                }),
            ]),
        ]);
    };
    return Vault;
}(view_1.View));
exports.Vault = Vault;


/***/ }),

/***/ "../ts-vault/sources/configs.ts":
/*!**************************************!*\
  !*** ../ts-vault/sources/configs.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.layoutConfig = {
    css: "vault-layout",
    rows: [
        {
            id: "topbar",
            css: "vault-topbar",
        },
        {
            id: "vault",
            css: "vault-file-grid",
        },
    ],
};
exports.layoutConfigWithoutTopbar = {
    css: "vault-layout",
    rows: [
        {
            id: "vault",
            css: "vault-file-grid",
        },
    ],
};


/***/ }),

/***/ "../ts-vault/sources/helper.ts":
/*!*************************************!*\
  !*** ../ts-vault/sources/helper.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var en_1 = __webpack_require__(/*! ./locales/en */ "../ts-vault/sources/locales/en.ts");
var basis = ["byte", "kilobyte", "megabyte", "gigabyte"];
function getBasis(size, current) {
    if (size === void 0) { size = 0; }
    if (current === void 0) { current = 0; }
    return size < 1024
        ? size + " " + en_1.default[basis[current]]
        : this.getBasis(Math.round(size / 1024), current + 1);
}
exports.getBasis = getBasis;
var MAX_WORD_LENGTH = 13;
function truncateWord(word, len) {
    if (len === void 0) { len = MAX_WORD_LENGTH; }
    var start;
    var end;
    if (word.length <= len) {
        return word;
    }
    var dotIndex = word.lastIndexOf(".");
    if (dotIndex === -1) {
        end = word.substr(word.length - 4);
        start = word.substr(0, len - 7);
    }
    else {
        var endStartFrom = dotIndex - 3;
        end = word.substr(endStartFrom);
        start = word.substr(0, len - (word.length - endStartFrom));
    }
    return start + "..." + end;
}
exports.truncateWord = truncateWord;
function calculateCover(image) {
    var width = image.width, height = image.height;
    var imageAspectRatio = width / height;
    var sHeight;
    var sWidth;
    var sx;
    var sy;
    if (imageAspectRatio > 1) {
        // width > height
        sWidth = height;
        sHeight = height;
        sx = (width - sWidth) / 2;
        sy = 0;
    }
    else if (imageAspectRatio < 1) {
        // width < height
        sWidth = width;
        sHeight = width;
        sx = 0;
        sy = (height - sHeight) / 2;
    }
    else {
        // width == height
        sHeight = width;
        sWidth = width;
        sx = 0;
        sy = 0;
    }
    return {
        sx: sx,
        sy: sy,
        sWidth: sWidth,
        sHeight: sHeight,
        dx: 0,
        dy: 0,
    };
}
exports.calculateCover = calculateCover;
var FileType;
(function (FileType) {
    FileType["image"] = "image";
    FileType["video"] = "video";
    FileType["archive"] = "archive";
    FileType["table"] = "table";
    FileType["document"] = "document";
    FileType["presentation"] = "presentation";
    FileType["application"] = "application";
    FileType["web"] = "web";
    FileType["apple"] = "apple";
    FileType["pdf"] = "pdf";
    FileType["psd"] = "psd";
    FileType["audio"] = "audio";
    FileType["other"] = "other";
    FileType["text"] = "text";
})(FileType = exports.FileType || (exports.FileType = {}));
function getMimeAndExtension(fileWrapper) {
    var extension = fileWrapper.name.split(".").pop() || "none";
    var mime = fileWrapper.file ? fileWrapper.file.type : "";
    return {
        extension: extension,
        mime: mime,
    };
}
function getFileType(extension, mime) {
    switch (extension) {
        case "jpg":
        case "jpeg":
        case "gif":
        case "png":
        case "bmp":
        case "tiff":
        case "pcx":
        case "svg":
        case "ico":
            return FileType.image;
        case "avi":
        case "mpg":
        case "mpeg":
        case "rm":
        case "move":
        case "mov":
        case "mkv":
        case "flv":
        case "f4v":
        case "mp4":
        case "3gp":
        case "wmv":
        case "webm":
        case "vob":
            return FileType.video;
        case "rar":
        case "zip":
        case "tar":
        case "tgz":
        case "arj":
        case "gzip":
        case "bzip2":
        case "7z":
        case "ace":
        case "apk":
        case "deb":
        case "zipx":
        case "cab":
        case "tar-gz":
        case "rpm":
        case "xar":
            return FileType.archive;
        case "xlr":
        case "xls":
        case "xlsm":
        case "xlsx":
        case "ods":
        case "csv":
        case "tsv":
            return FileType.table;
        case "doc":
        case "docx":
        case "docm":
        case "dot":
        case "dotx":
        case "odt":
        case "wpd":
        case "wps":
        case "pages":
            return FileType.document;
        case "wav":
        case "aiff":
        case "au":
        case "mp3":
        case "aac":
        case "wma":
        case "ogg":
        case "flac":
        case "ape":
        case "wv":
        case "m4a":
        case "mid":
        case "midi":
            return FileType.audio;
        case "pot":
        case "potm":
        case "potx":
        case "pps":
        case "ppsm":
        case "ppsx":
        case "ppt":
        case "pptx":
        case "pptm":
        case "odp":
            return FileType.presentation;
        case "html":
        case "htm":
        case "eml":
            return FileType.web;
        case "exe":
            return FileType.application;
        case "dmg":
            return FileType.apple;
        case "pdf":
        case "ps":
        case "eps":
            return FileType.pdf;
        case "psd":
            return FileType.psd;
        case "txt":
        case "djvu":
        case "nfo":
        case "xml":
            return FileType.text;
        default: {
            var type = mime.split("/")[0];
            switch (type) {
                case "image":
                    return FileType.image;
                case "audio":
                    return FileType.audio;
                case "video":
                    return FileType.video;
                default:
                    return FileType.other;
            }
        }
    }
}
exports.getFileType = getFileType;
function getFileClassName(fileWrapper) {
    var _a = getMimeAndExtension(fileWrapper), mime = _a.mime, extension = _a.extension;
    return getFileType(extension, mime) + " extension-" + extension;
}
exports.getFileClassName = getFileClassName;
function isImage(fileWrapper) {
    var _a = getMimeAndExtension(fileWrapper), mime = _a.mime, extension = _a.extension;
    var fileType = getFileType(extension, mime);
    return fileType === FileType.image;
}
exports.isImage = isImage;


/***/ }),

/***/ "../ts-vault/sources/locales/en.ts":
/*!*****************************************!*\
  !*** ../ts-vault/sources/locales/en.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var locale = {
    dragAndDrop: "Drag & drop",
    or: "or",
    browse: "Browse files",
    filesOrFoldersHere: "files or folders here",
    cancel: "Cancel",
    clearAll: "Clear all",
    clear: "Clear",
    add: "Add",
    upload: "Upload",
    download: "Download",
    error: "error",
    byte: "B",
    kilobyte: "KB",
    megabyte: "MB",
    gigabyte: "GB",
};
exports.default = locale;


/***/ }),

/***/ "../ts-vault/sources/types.ts":
/*!************************************!*\
  !*** ../ts-vault/sources/types.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ts_data_1 = __webpack_require__(/*! @dhx/ts-data */ "../ts-data/index.ts");
var FileStatus;
(function (FileStatus) {
    FileStatus["queue"] = "queue";
    FileStatus["uploaded"] = "uploaded";
    FileStatus["failed"] = "failed";
    FileStatus["inprogress"] = "inprogress";
})(FileStatus = exports.FileStatus || (exports.FileStatus = {}));
var UploaderEvents;
(function (UploaderEvents) {
    UploaderEvents["uploadBegin"] = "uploadbegin";
    UploaderEvents["beforeUploadFile"] = "beforeuploadfile";
    UploaderEvents["uploadFile"] = "uploadfile";
    UploaderEvents["uploadFail"] = "uploadfail";
    UploaderEvents["uploadComplete"] = "uploadcomplete";
    UploaderEvents["uploadProgress"] = "uploadprogress";
})(UploaderEvents = exports.UploaderEvents || (exports.UploaderEvents = {}));
var ProgressBarEvents;
(function (ProgressBarEvents) {
    ProgressBarEvents["cancel"] = "cancel";
})(ProgressBarEvents = exports.ProgressBarEvents || (exports.ProgressBarEvents = {}));
var VaultMode;
(function (VaultMode) {
    VaultMode["grid"] = "grid";
    VaultMode["list"] = "list";
})(VaultMode = exports.VaultMode || (exports.VaultMode = {}));


/***/ }),

/***/ "../ts-window/index.ts":
/*!*****************************!*\
  !*** ../ts-window/index.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./sources/Window */ "../ts-window/sources/Window.ts"));


/***/ }),

/***/ "../ts-window/sources/Window.ts":
/*!**************************************!*\
  !*** ../ts-window/sources/Window.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(/*! @dhx/ts-common/core */ "../ts-common/core.ts");
var dom_1 = __webpack_require__(/*! @dhx/ts-common/dom */ "../ts-common/dom.ts");
var events_1 = __webpack_require__(/*! @dhx/ts-common/events */ "../ts-common/events.ts");
var Keymanager_1 = __webpack_require__(/*! @dhx/ts-common/Keymanager */ "../ts-common/Keymanager.ts");
var ts_layout_1 = __webpack_require__(/*! @dhx/ts-layout */ "../ts-layout/index.ts");
var ts_toolbar_1 = __webpack_require__(/*! @dhx/ts-toolbar */ "../ts-toolbar/index.ts");
var types_1 = __webpack_require__(/*! ./types */ "../ts-window/sources/types.ts");
var WindowController_1 = __webpack_require__(/*! ./WindowController */ "../ts-window/sources/WindowController.ts");
function detectDrag(e) {
    return new Promise(function (res) {
        var handleMouseUp = function () {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            document.removeEventListener("mousemove", handleMouseMove);
            document.removeEventListener("mouseup", handleMouseUp);
            res(false);
        };
        var timeout = setTimeout(function () {
            handleMouseUp();
        }, 1000);
        var handleMouseMove = function (moveEvent) {
            if (Math.abs(moveEvent.pageX - e.pageX) > 4 || Math.abs(moveEvent.pageY - e.pageY) > 4) {
                document.removeEventListener("mousemove", handleMouseMove);
                document.removeEventListener("mouseup", handleMouseUp);
                clearTimeout(timeout);
                res({ x: e.pageX, y: e.pageY });
            }
        };
        document.addEventListener("mousemove", handleMouseMove);
        document.addEventListener("mouseup", handleMouseUp);
    });
}
var Window = /** @class */ (function () {
    function Window(config) {
        this.config = core_1.extend({
            movable: false,
            resizable: false,
            closable: config.modal,
        }, config);
        if (this.config.node && typeof this.config.node === "string") {
            this.config.node = document.getElementById(this.config.node);
        }
        else if (!this.config.node) {
            this.config.node = document.body;
        }
        this._uid = core_1.uid();
        this.events = new events_1.EventSystem(this);
        var popup = (this._popup = document.createElement("div"));
        popup.tabIndex = 1;
        if (!this.config.modal) {
            WindowController_1.default.add(this._uid, this._popup);
        }
        this._isActive = false;
        this._initHandlers();
        this._initUI();
        if (this.config.html) {
            this.attachHTML(this.config.html);
        }
    }
    Window.prototype.paint = function () {
        this._layout.paint();
    };
    Window.prototype.setFullScreen = function () {
        this.setSize(window.innerWidth, window.innerHeight);
        this.setPosition(window.pageXOffset, window.pageYOffset);
    };
    Window.prototype.setSize = function (width, height) {
        var oldsize = {
            width: this._popup.offsetWidth,
            height: this._popup.offsetHeight,
        };
        var size = {
            width: oldsize.width,
            height: oldsize.height,
        };
        if (core_1.isDefined(width)) {
            this.config.width = size.width = width;
        }
        if (core_1.isDefined(height)) {
            this.config.height = size.height = height;
        }
        this._popup.style.width = size.width + "px";
        this._popup.style.height = size.height + "px";
        this.events.fire(types_1.WindowEvents.resize, [
            size,
            oldsize,
            { left: true, top: true, bottom: true, right: true },
        ]);
    };
    Window.prototype.getSize = function () {
        return {
            width: this._popup.offsetWidth,
            height: this._popup.offsetHeight,
        };
    };
    Window.prototype.setPosition = function (left, top) {
        var oldposition = {
            left: this._popup.offsetLeft,
            top: this._popup.offsetTop,
        };
        var position = {
            left: oldposition.left,
            top: oldposition.top,
        };
        if (core_1.isDefined(left)) {
            this.config.left = position.left = left;
        }
        if (core_1.isDefined(top)) {
            this.config.top = position.top = top;
        }
        this._popup.style.left = position.left + "px";
        this._popup.style.top = position.top + "px";
        this.events.fire(types_1.WindowEvents.resize, [
            position,
            oldposition,
            { left: true, top: true, bottom: true, right: true },
        ]);
    };
    Window.prototype.getPosition = function () {
        return {
            left: this._popup.offsetLeft,
            top: this._popup.offsetTop,
        };
    };
    Window.prototype.show = function (left, top) {
        if (left === void 0) { left = this.config.left; }
        if (top === void 0) { top = this.config.top; }
        if (!this.events.fire(types_1.WindowEvents.beforeShow, [left, top])) {
            return;
        }
        this._popup.className =
            "dhx_popup dhx_widget" +
                (this.config.modal ? " dhx_popup--window_modal" : " dhx_popup--window") +
                (this.config.css ? " " + this.config.css : "");
        this._popup.style.position = this.config.modal ? "fixed" : "absolute";
        var _a = this._getContainerParams(), containerInnerWidth = _a.containerInnerWidth, containerInnerHeight = _a.containerInnerHeight, containerXOffset = _a.containerXOffset, containerYOffset = _a.containerYOffset;
        var width = (this.config.width =
            this.config.width || this.config.minWidth || containerInnerWidth / 2);
        var height = (this.config.height =
            this.config.height || this.config.minHeight || containerInnerHeight / 2);
        this.config.left = left = core_1.isDefined(left)
            ? left
            : (containerInnerWidth - width) / (this.config.modal ? 2 : 2 + containerXOffset);
        this.config.top = top = core_1.isDefined(top)
            ? top
            : (containerInnerHeight - height) / (this.config.modal ? 2 : 2 + containerYOffset);
        if (this._isActive) {
            this._popup.style.left = left + "px";
            this._popup.style.top = top + "px";
            return;
        }
        if (this.config.viewportOverflow) {
            WindowController_1.default.openFreeWindow(this.config.node);
        }
        if (this.config.modal) {
            this._blockScreen();
        }
        this._popup.style.width = width + "px";
        this._popup.style.height = height + "px";
        this._popup.style.left = left + "px";
        this._popup.style.top = top + "px";
        this.config.node.appendChild(this._popup);
        this._popup.focus();
        this._isActive = true;
        this.events.fire(types_1.WindowEvents.afterShow, []);
    };
    Window.prototype.hide = function () {
        if (!this._isActive || !this.events.fire(types_1.WindowEvents.beforeHide, [])) {
            return;
        }
        if (this.config.viewportOverflow) {
            WindowController_1.default.closeFreeWindow(this.config.node);
        }
        if (this._blocker) {
            this.config.node.removeChild(this._blocker);
            if (this.config.closable) {
                Keymanager_1.keyManager.removeHotKey(null, this);
            }
            this._blocker = null;
        }
        this.config.node.removeChild(this._popup);
        this._isActive = false;
        this.events.fire(types_1.WindowEvents.afterHide, []);
    };
    Window.prototype.isVisible = function () {
        return this._isActive;
    };
    Window.prototype.getWidget = function () {
        return this._layout.getCell("content").getWidget();
    };
    Window.prototype.getContainer = function () {
        return this.getRootView().data._container;
    };
    Window.prototype.attach = function (name, config) {
        this._layout.getCell("content").attach(name, config);
    };
    Window.prototype.attachHTML = function (html) {
        this._layout.getCell("content").attach(function () {
            return dom_1.el(".dhx_window__inner-html-content", {
                ".innerHTML": html,
            });
        });
    };
    Window.prototype.getRootView = function () {
        return this._layout.getRootView();
    };
    Window.prototype.destructor = function () {
        if (this._isActive) {
            this.hide();
        }
        if (this.header) {
            this.header.destructor();
        }
        if (this.footer) {
            this.footer.destructor();
        }
        this._layout.destructor();
        this._popup = null;
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Window.prototype.fullScreen = function () {
        this.setFullScreen();
    };
    Window.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            headerDblClick: function () { return _this.events.fire(types_1.WindowEvents.headerDoubleClick, []); },
            move: function (e) {
                if (e.which === 3) {
                    return;
                }
                e.preventDefault();
                WindowController_1.default.setActive(_this._uid);
                detectDrag(e).then(function (pos) {
                    if (pos) {
                        _this._startDrag(pos.x, pos.y);
                    }
                });
            },
            resize: {
                ".dhx_window-resizer": function (e) {
                    if (e.which === 3) {
                        return;
                    }
                    e.preventDefault();
                    WindowController_1.default.setActive(_this._uid);
                    detectDrag(e).then(function (pos) {
                        if (pos) {
                            var classList = e.target.classList;
                            if (classList.contains("dhx_window-resizer--left")) {
                                _this._startResize({ left: true });
                            }
                            else if (classList.contains("dhx_window-resizer--right")) {
                                _this._startResize({ right: true });
                            }
                            else if (classList.contains("dhx_window-resizer--top")) {
                                _this._startResize({ top: true });
                            }
                            else if (classList.contains("dhx_window-resizer--bottom")) {
                                _this._startResize({ bottom: true });
                            }
                            else if (classList.contains("dhx_window-resizer--bottom_left")) {
                                _this._startResize({ left: true, bottom: true });
                            }
                            else if (classList.contains("dhx_window-resizer--bottom_right")) {
                                _this._startResize({ bottom: true, right: true });
                            }
                            else if (classList.contains("dhx_window-resizer--top_left")) {
                                _this._startResize({ top: true, left: true });
                            }
                            else if (classList.contains("dhx_window-resizer--top_right")) {
                                _this._startResize({ top: true, right: true });
                            }
                        }
                    });
                },
            },
            setActive: function () {
                WindowController_1.default.setActive(_this._uid);
            },
        };
    };
    Window.prototype._initUI = function () {
        var _this = this;
        var rows = [];
        var isHeader = (this.config.header || this.config.title || this.config.closable || this.config.movable) &&
            this.config.header !== false;
        if (isHeader) {
            rows.push({
                id: "header",
                gravity: false,
                css: "dhx_window-header " + (this.config.movable ? "dhx_window-header--movable" : ""),
                on: {
                    mousedown: this.config.movable && this._handlers.move,
                    dblclick: this._handlers.headerDblClick,
                },
            });
        }
        rows.push({
            id: "content",
            css: isHeader ? "dhx_window-content" : "dhx_window-content-without-header",
        });
        if (this.config.footer) {
            rows.push({ id: "footer", gravity: false, css: "dhx_window-footer" });
        }
        if (this.config.resizable) {
            rows.push({ id: "resizers", gravity: false, css: "resizers" });
        }
        var layout = (this._layout = new ts_layout_1.Layout(this._popup, {
            css: "dhx_window" + (this.config.modal ? " dhx_window--modal" : ""),
            rows: rows,
            on: {
                click: this._handlers.setActive,
            },
        }));
        if (isHeader) {
            var header = (this.header = new ts_toolbar_1.Toolbar());
            if (this.config.title) {
                this.header.data.add({
                    type: "title",
                    value: this.config.title,
                    id: "title",
                });
            }
            if (this.config.closable) {
                this.header.data.add({
                    type: "spacer",
                });
                this.header.data.add({
                    id: "close",
                    type: "button",
                    view: "link",
                    size: "medium",
                    color: "secondary",
                    circle: true,
                    icon: "dxi dxi-close",
                });
                header.events.on(ts_toolbar_1.NavigationBarEvents.click, function (id) {
                    if (id === "close") {
                        _this.hide();
                    }
                });
            }
            layout.getCell("header").attach(header);
        }
        if (this.config.footer) {
            var footer = (this.footer = new ts_toolbar_1.Toolbar());
            layout.getCell("footer").attach(footer);
        }
        if (this.config.resizable) {
            layout.getCell("resizers").attach(function () { return _this._drawResizers(); });
        }
    };
    Window.prototype._drawResizers = function () {
        return dom_1.el(".dhx-resizers", {
            onmousedown: this._handlers.resize,
        }, [
            dom_1.el(".dhx_window-resizer.dhx_window-resizer--left"),
            dom_1.el(".dhx_window-resizer.dhx_window-resizer--right"),
            dom_1.el(".dhx_window-resizer.dhx_window-resizer--bottom"),
            dom_1.el(".dhx_window-resizer.dhx_window-resizer--top"),
            dom_1.el(".dhx_window-resizer.dhx_window-resizer--bottom_right"),
            dom_1.el(".dhx_window-resizer.dhx_window-resizer--bottom_left"),
            dom_1.el(".dhx_window-resizer.dhx_window-resizer--top_right"),
            dom_1.el(".dhx_window-resizer.dhx_window-resizer--top_left"),
        ]);
    };
    Window.prototype._startDrag = function (x, y) {
        var _this = this;
        this.config.node.classList.add("dhx_window--stop_selection");
        var deltaX = x - this._popup.offsetLeft;
        var deltaY = y - this._popup.offsetTop;
        var width = this._popup.offsetWidth;
        var height = this._popup.offsetHeight;
        var mousemove = function (e) {
            var oldposition = {
                left: _this._popup.offsetLeft,
                top: _this._popup.offsetTop,
            };
            var newX = e.pageX - deltaX;
            var newY = e.pageY - deltaY;
            if (!_this.config.viewportOverflow) {
                var _a = _this._getContainerParams(), containerXOffset = _a.containerXOffset, containerYOffset = _a.containerYOffset, containerInnerWidth = _a.containerInnerWidth, containerInnerHeight = _a.containerInnerHeight;
                if (newX < containerXOffset) {
                    newX = containerXOffset;
                }
                else if (newX > containerXOffset + containerInnerWidth - width) {
                    newX = containerXOffset + containerInnerWidth - width;
                }
                if (newY < containerYOffset) {
                    newY = containerYOffset;
                }
                else if (newY > containerYOffset + containerInnerHeight - height) {
                    newY = containerYOffset + containerInnerHeight - height;
                }
            }
            _this.config.left = newX;
            _this.config.top = newY;
            _this._popup.style.left = newX + "px";
            _this._popup.style.top = newY + "px";
            var position = { left: newX, top: newY };
            _this.events.fire(types_1.WindowEvents.move, [
                position,
                oldposition,
                { left: true, top: true, bottom: true, right: true },
            ]);
        };
        var mouseup = function () {
            document.removeEventListener("mouseup", mouseup);
            document.removeEventListener("mousemove", mousemove);
            _this.config.node.classList.remove("dhx_window--stop_selection");
        };
        document.addEventListener("mouseup", mouseup);
        document.addEventListener("mousemove", mousemove);
    };
    Window.prototype._startResize = function (resizeConfig) {
        var _this = this;
        var minWidth = this.config.minWidth | 100;
        var minHeight = this.config.minHeight | 100;
        var left = this._popup.offsetLeft;
        var top = this._popup.offsetTop;
        var width = this._popup.offsetWidth;
        var height = this._popup.offsetHeight;
        var resizeClassName;
        switch (true) {
            case resizeConfig.bottom && resizeConfig.left:
                resizeClassName = "dhx_window-body-pointer--bottom_left";
                break;
            case resizeConfig.bottom && resizeConfig.right:
                resizeClassName = "dhx_window-body-pointer--bottom_right";
                break;
            case resizeConfig.top && resizeConfig.left:
                resizeClassName = "dhx_window-body-pointer--top_left";
                break;
            case resizeConfig.top && resizeConfig.right:
                resizeClassName = "dhx_window-body-pointer--top-right";
                break;
            case resizeConfig.top:
                resizeClassName = "dhx_window-body-pointer--top";
                break;
            case resizeConfig.bottom:
                resizeClassName = "dhx_window-body-pointer--bottom";
                break;
            case resizeConfig.left:
                resizeClassName = "dhx_window-body-pointer--left";
                break;
            case resizeConfig.right:
                resizeClassName = "dhx_window-body-pointer--right";
                break;
        }
        this.config.node.classList.add("dhx_window--stop_selection");
        this.config.node.classList.add(resizeClassName);
        var mousemove = function (e) {
            var _a = _this._getContainerParams(), containerInnerWidth = _a.containerInnerWidth, containerInnerHeight = _a.containerInnerHeight, containerXOffset = _a.containerXOffset, containerYOffset = _a.containerYOffset;
            var size = {
                width: _this._notInNode() ? e.pageX - left : e.pageX - _this.config.node.offsetLeft - left,
                height: _this._notInNode() ? e.pageY - top : e.pageY - _this.config.node.offsetTop - top,
                left: _this._notInNode() ? e.pageX : e.pageX - _this.config.node.offsetLeft,
                top: _this._notInNode() ? e.pageY : e.pageY - _this.config.node.offsetTop,
            };
            if (resizeConfig.right) {
                if (size.width < minWidth) {
                    size.width = minWidth;
                }
                else if (size.width > containerXOffset + containerInnerWidth - left) {
                    size.width = containerXOffset + containerInnerWidth - left;
                }
                _this._popup.style.width = size.width + "px";
            }
            if (resizeConfig.bottom) {
                if (size.height < minHeight) {
                    size.height = minHeight;
                }
                else if (size.height > containerYOffset + containerInnerHeight - top) {
                    size.height = containerYOffset + containerInnerHeight - top;
                }
                _this._popup.style.height = size.height + "px";
            }
            if (resizeConfig.left) {
                if (left + width - size.left < minWidth) {
                    size.left = left + width - minWidth;
                }
                size.width = left + width - size.left;
                _this.config.left = size.left;
                _this._popup.style.left = size.left + "px";
                _this._popup.style.width = size.width + "px";
            }
            if (resizeConfig.top) {
                if (size.top < containerYOffset) {
                    size.top = containerYOffset;
                }
                else if (top + height - size.top < minHeight) {
                    size.top = top + height - minHeight;
                }
                size.height = top + height - size.top;
                _this.config.top = size.top;
                _this._popup.style.top = size.top + "px";
                _this._popup.style.height = size.height + "px";
            }
            _this.config.width = _this._popup.offsetWidth;
            _this.config.height = _this._popup.offsetHeight;
            _this.events.fire(types_1.WindowEvents.resize, [size, { left: left, top: top, height: height, width: width }, resizeConfig]);
        };
        var mouseup = function () {
            document.removeEventListener("mouseup", mouseup);
            document.removeEventListener("mousemove", mousemove);
            _this.config.node.classList.remove("dhx_window--stop_selection");
            _this.config.node.classList.remove(resizeClassName);
        };
        document.addEventListener("mouseup", mouseup);
        document.addEventListener("mousemove", mousemove);
    };
    Window.prototype._blockScreen = function () {
        var _this = this;
        var blocker = document.createElement("div");
        blocker.className = "dhx_window__overlay";
        this.config.node.appendChild(blocker);
        this._blocker = blocker;
        if (this.config.closable) {
            blocker.addEventListener("click", function () { return _this.hide(); });
            Keymanager_1.keyManager.addHotKey("escape", function () { return _this.hide(); }, this);
        }
    };
    Window.prototype._notInNode = function () {
        return this.config.node === document.body || this.config.modal;
    };
    Window.prototype._getContainerParams = function () {
        var notInNode = this._notInNode();
        return {
            containerInnerWidth: notInNode ? window.innerWidth : this.config.node.offsetWidth,
            containerInnerHeight: notInNode ? window.innerHeight : this.config.node.offsetHeight,
            containerXOffset: notInNode ? window.pageXOffset : this.config.node.scrollLeft,
            containerYOffset: notInNode ? window.pageYOffset : this.config.node.scrollTop,
        };
    };
    return Window;
}());
exports.Window = Window;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! promiz */ "../node_modules/promiz/promiz.js")))

/***/ }),

/***/ "../ts-window/sources/WindowController.ts":
/*!************************************************!*\
  !*** ../ts-window/sources/WindowController.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    popups: {},
    lastActive: null,
    freeCount: 0,
    add: function (id, popup) {
        if (this.lastActive) {
            this.popups[this.lastActive].classList.remove("dhx_popup--window_active");
        }
        this.lastActive = id;
        popup.classList.add("dhx_popup--window_active");
        this.popups[id] = popup;
    },
    setActive: function (id) {
        if (id === this.lastActive) {
            return;
        }
        var popup = this.popups[id];
        if (popup) {
            if (this.lastActive) {
                this.popups[this.lastActive].classList.remove("dhx_popup--window_active");
            }
            this.lastActive = id;
            popup.classList.add("dhx_popup--window_active");
        }
    },
    openFreeWindow: function (node) {
        if (this.freeCount === 0) {
            node.classList.add("dhx_window--no-scroll");
        }
        this.freeCount++;
    },
    closeFreeWindow: function (node) {
        this.freeCount--;
        if (this.freeCount === 0) {
            node.classList.remove("dhx_window--no-scroll");
        }
    },
};


/***/ }),

/***/ "../ts-window/sources/types.ts":
/*!*************************************!*\
  !*** ../ts-window/sources/types.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var WindowEvents;
(function (WindowEvents) {
    WindowEvents["resize"] = "resize";
    WindowEvents["headerDoubleClick"] = "headerdoubleclick";
    WindowEvents["move"] = "move";
    WindowEvents["afterShow"] = "aftershow";
    WindowEvents["afterHide"] = "afterhide";
    WindowEvents["beforeShow"] = "beforeshow";
    WindowEvents["beforeHide"] = "beforehide";
})(WindowEvents = exports.WindowEvents || (exports.WindowEvents = {}));


/***/ }),

/***/ 0:
/*!********************************************************************************************************************************************************************************!*\
  !*** multi ../ts-common/polyfills/object.ts ../ts-common/polyfills/array.ts ../ts-common/polyfills/string.ts ../ts-common/polyfills/element.ts ../ts-all/sources/entry_pro.ts ***!
  \********************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ../ts-common/polyfills/object.ts */"../ts-common/polyfills/object.ts");
__webpack_require__(/*! ../ts-common/polyfills/array.ts */"../ts-common/polyfills/array.ts");
__webpack_require__(/*! ../ts-common/polyfills/string.ts */"../ts-common/polyfills/string.ts");
__webpack_require__(/*! ../ts-common/polyfills/element.ts */"../ts-common/polyfills/element.ts");
module.exports = __webpack_require__(/*! C:\development\work\widgets\ts-all/sources/entry_pro.ts */"../ts-all/sources/entry_pro.ts");


/***/ })

/******/ });
});if (window.dhx_legacy) { if (window.dhx){ for (var key in dhx) dhx_legacy[key] = dhx[key]; } window.dhx = dhx_legacy; delete window.dhx_legacy; }
//# sourceMappingURL=data:application/json;charset=utf-8;base64,